generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  domain             String?            @unique
  subdomain          String             @unique
  description        String?
  logo               String?
  website            String?
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  subscriptionPlan   SubscriptionPlan   @default(STARTER)
  trialEndsAt        DateTime?
  subscriptionEndsAt DateTime?
  stripeCustomerId   String?            @unique
  settings           Json               @default("{}")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  cuppingSessions    CuppingSession[]
  templates          CuppingTemplate[]
  flavorDescriptors  FlavorDescriptor[]
  invitations        Invitation[]
  samples            Sample[]
  users              User[]

  @@map("organizations")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  avatar              String?
  bio                 String?
  organizationId      String
  role                UserRole             @default(CUPPER)
  emailVerified       Boolean              @default(false)
  emailVerifiedAt     DateTime?
  lastLoginAt         DateTime?
  resetToken          String?
  resetTokenExpiry    DateTime?
  preferences         Json                 @default("{}")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  cuppingSessions     CuppingSession[]
  createdTemplates    CuppingTemplate[]
  flavorDescriptors   FlavorDescriptor[]
  scores              Score[]
  sessionParticipants SessionParticipant[]
  organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  role           UserRole         @default(CUPPER)
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  invitedBy      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invitations")
}

model Sample {
  id               String            @id @default(cuid())
  organizationId   String
  name             String
  description      String?
  code             String?
  origin           String
  region           String?
  farm             String?
  producer         String?
  variety          String?
  altitude         Int?
  processingMethod ProcessingMethod?
  harvestDate      DateTime?
  roaster          String?
  roastDate        DateTime?
  roastLevel       RoastLevel?
  moisture         Float?
  density          Float?
  screenSize       String?
  notes            String?
  imageUrl         String?
  tags             String[]          @default([])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  greenBeanGrading GreenBeanGrading?
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  scores           Score[]
  sessionSamples   SessionSample[]

  @@map("samples")
}

model CuppingTemplate {
  id              String           @id @default(cuid())
  organizationId  String
  createdBy       String
  name            String
  description     String?
  isDefault       Boolean          @default(false)
  isPublic        Boolean          @default(false)
  scoringSystem   ScoringSystem    @default(SCA)
  maxScore        Int              @default(100)
  categories      Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cuppingSessions CuppingSession[]
  creator         User             @relation(fields: [createdBy], references: [id])
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("cupping_templates")
}

model CuppingSession {
  id                 String               @id @default(cuid())
  organizationId     String
  createdBy          String
  name               String
  description        String?
  location           String?
  templateId         String?
  blindTasting       Boolean              @default(true)
  allowComments      Boolean              @default(true)
  requireCalibration Boolean              @default(false)
  status             SessionStatus        @default(DRAFT)
  scheduledAt        DateTime?
  startedAt          DateTime?
  completedAt        DateTime?
  notes              String?
  tags               String[]             @default([])
  settings           Json                 @default("{}")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  creator            User                 @relation(fields: [createdBy], references: [id])
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  template           CuppingTemplate?     @relation(fields: [templateId], references: [id])
  scores             Score[]
  participants       SessionParticipant[]
  samples            SessionSample[]

  @@map("cupping_sessions")
}

model SessionParticipant {
  id           String          @id @default(cuid())
  sessionId    String
  userId       String
  role         ParticipantRole @default(CUPPER)
  joinedAt     DateTime        @default(now())
  leftAt       DateTime?
  isActive     Boolean         @default(true)
  isCalibrated Boolean         @default(false)
  calibratedAt DateTime?
  session      CuppingSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("session_participants")
}

model SessionSample {
  id        String         @id @default(cuid())
  sessionId String
  sampleId  String
  position  Int
  isBlind   Boolean        @default(true)
  blindCode String?
  grindSize String?
  waterTemp Float?
  brewRatio String?
  steepTime Int?
  addedAt   DateTime       @default(now())
  scores    Score[]
  sample    Sample         @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  session   CuppingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, sampleId])
  @@unique([sessionId, position])
  @@map("session_samples")
}

model Score {
  id                String                  @id @default(cuid())
  sessionId         String
  sessionSampleId   String
  sampleId          String
  userId            String
  totalScore        Float
  maxScore          Float                   @default(100)
  scores            Json
  aroma             Float?
  flavor            Float?
  aftertaste        Float?
  acidity           Float?
  body              Float?
  balance           Float?
  sweetness         Float?
  cleanliness       Float?
  uniformity        Float?
  overall           Float?
  defects           Json                    @default("[]")
  notes             String?
  privateNotes      String?
  voiceNotes        String?
  voiceFileUrl      String?
  isComplete        Boolean                 @default(false)
  isSubmitted       Boolean                 @default(false)
  submittedAt       DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  flavorDescriptors ScoreFlavorDescriptor[]
  sample            Sample                  @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  session           CuppingSession          @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionSample     SessionSample           @relation(fields: [sessionSampleId], references: [id], onDelete: Cascade)
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, sampleId, userId])
  @@map("scores")
}

model GreenBeanGrading {
  id                     String               @id @default(cuid())
  sampleId               String               @unique
  gradingSystem          GradingSystem        @default(SCA)
  primaryDefects         Int                  @default(0)
  secondaryDefects       Int                  @default(0)
  fullDefectEquivalents  Float                @default(0)
  defectBreakdown        Json                 @default("[]")
  screenSizeDistribution Json?
  averageScreenSize      Float?
  uniformityPercentage   Float?
  moistureContent        Float?
  waterActivity          Float?
  bulkDensity            Float?
  uniformityScore        Int?
  grade                  String?
  classification         GradeClassification?
  qualityScore           Float?
  gradedBy               String?
  gradedAt               DateTime?
  certifiedBy            String?
  certificationDate      DateTime?
  notes                  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  beanColorAssessment    String?
  sample                 Sample               @relation(fields: [sampleId], references: [id], onDelete: Cascade)

  @@map("green_bean_gradings")
}

model FlavorDescriptor {
  id               String                  @id @default(cuid())
  name             String
  category         FlavorCategory
  description      String?
  isDefault        Boolean                 @default(false)
  organizationId   String?
  createdBy        String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  creator          User?                   @relation(fields: [createdBy], references: [id])
  organization     Organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  scoreDescriptors ScoreFlavorDescriptor[]

  @@unique([name, organizationId])
  @@map("flavor_descriptors")
}

model ScoreFlavorDescriptor {
  id                 String           @id @default(cuid())
  scoreId            String
  flavorDescriptorId String
  intensity          Int              @default(1)
  createdAt          DateTime         @default(now())
  flavorDescriptor   FlavorDescriptor @relation(fields: [flavorDescriptorId], references: [id], onDelete: Cascade)
  score              Score            @relation(fields: [scoreId], references: [id], onDelete: Cascade)

  @@unique([scoreId, flavorDescriptorId])
  @@map("score_flavor_descriptors")
}

enum UserRole {
  ADMIN
  CUPPER

  @@map("user_role")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID

  @@map("subscription_status")
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM

  @@map("subscription_plan")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED

  @@map("invitation_status")
}

enum ProcessingMethod {
  WASHED
  NATURAL
  HONEY
  SEMI_WASHED
  WET_HULLED
  ANAEROBIC
  CARBONIC_MACERATION
  OTHER

  @@map("processing_method")
}

enum RoastLevel {
  LIGHT
  MEDIUM_LIGHT
  MEDIUM
  MEDIUM_DARK
  DARK
  FRENCH
  ITALIAN

  @@map("roast_level")
}

enum ScoringSystem {
  SCA
  COE
  CUSTOM

  @@map("scoring_system")
}

enum SessionStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
  ARCHIVED

  @@map("session_status")
}

enum ParticipantRole {
  CUPPER
  HEAD_JUDGE
  OBSERVER

  @@map("participant_role")
}

enum GradingSystem {
  SCA

  @@map("grading_system")
}

enum GradeClassification {
  SPECIALTY_GRADE
  PREMIUM_GRADE
  EXCHANGE_GRADE
  BELOW_STANDARD
  OFF_GRADE

  @@map("grade_classification")
}

enum FlavorCategory {
  POSITIVE
  NEGATIVE

  @@map("flavor_category")
}
