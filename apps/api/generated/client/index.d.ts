
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Invitation
 * 
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>
/**
 * Model Sample
 * 
 */
export type Sample = $Result.DefaultSelection<Prisma.$SamplePayload>
/**
 * Model CuppingTemplate
 * 
 */
export type CuppingTemplate = $Result.DefaultSelection<Prisma.$CuppingTemplatePayload>
/**
 * Model CuppingSession
 * 
 */
export type CuppingSession = $Result.DefaultSelection<Prisma.$CuppingSessionPayload>
/**
 * Model SessionParticipant
 * 
 */
export type SessionParticipant = $Result.DefaultSelection<Prisma.$SessionParticipantPayload>
/**
 * Model SessionSample
 * 
 */
export type SessionSample = $Result.DefaultSelection<Prisma.$SessionSamplePayload>
/**
 * Model Score
 * 
 */
export type Score = $Result.DefaultSelection<Prisma.$ScorePayload>
/**
 * Model FlavorDescriptor
 * 
 */
export type FlavorDescriptor = $Result.DefaultSelection<Prisma.$FlavorDescriptorPayload>
/**
 * Model ScoreFlavorDescriptor
 * 
 */
export type ScoreFlavorDescriptor = $Result.DefaultSelection<Prisma.$ScoreFlavorDescriptorPayload>
/**
 * Model GreenBeanGrading
 * 
 */
export type GreenBeanGrading = $Result.DefaultSelection<Prisma.$GreenBeanGradingPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  CUPPER: 'CUPPER',
  VIEWER: 'VIEWER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const SubscriptionStatus: {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  UNPAID: 'UNPAID'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const SubscriptionPlan: {
  STARTER: 'STARTER',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE',
  CUSTOM: 'CUSTOM'
};

export type SubscriptionPlan = (typeof SubscriptionPlan)[keyof typeof SubscriptionPlan]


export const InvitationStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED'
};

export type InvitationStatus = (typeof InvitationStatus)[keyof typeof InvitationStatus]


export const ProcessingMethod: {
  WASHED: 'WASHED',
  NATURAL: 'NATURAL',
  HONEY: 'HONEY',
  SEMI_WASHED: 'SEMI_WASHED',
  WET_HULLED: 'WET_HULLED',
  ANAEROBIC: 'ANAEROBIC',
  CARBONIC_MACERATION: 'CARBONIC_MACERATION',
  OTHER: 'OTHER'
};

export type ProcessingMethod = (typeof ProcessingMethod)[keyof typeof ProcessingMethod]


export const RoastLevel: {
  LIGHT: 'LIGHT',
  MEDIUM_LIGHT: 'MEDIUM_LIGHT',
  MEDIUM: 'MEDIUM',
  MEDIUM_DARK: 'MEDIUM_DARK',
  DARK: 'DARK',
  FRENCH: 'FRENCH',
  ITALIAN: 'ITALIAN'
};

export type RoastLevel = (typeof RoastLevel)[keyof typeof RoastLevel]


export const ScoringSystem: {
  SCA: 'SCA',
  COE: 'COE',
  CUSTOM: 'CUSTOM'
};

export type ScoringSystem = (typeof ScoringSystem)[keyof typeof ScoringSystem]


export const SessionStatus: {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ARCHIVED: 'ARCHIVED'
};

export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus]


export const ParticipantRole: {
  CUPPER: 'CUPPER',
  HEAD_JUDGE: 'HEAD_JUDGE',
  OBSERVER: 'OBSERVER'
};

export type ParticipantRole = (typeof ParticipantRole)[keyof typeof ParticipantRole]


export const FlavorCategory: {
  POSITIVE: 'POSITIVE',
  NEGATIVE: 'NEGATIVE'
};

export type FlavorCategory = (typeof FlavorCategory)[keyof typeof FlavorCategory]


export const GradingSystem: {
  SCA: 'SCA',
  ETHIOPIAN: 'ETHIOPIAN',
  COLOMBIAN: 'COLOMBIAN',
  BRAZILIAN: 'BRAZILIAN',
  KENYAN: 'KENYAN',
  CUSTOM: 'CUSTOM'
};

export type GradingSystem = (typeof GradingSystem)[keyof typeof GradingSystem]


export const GradeClassification: {
  SPECIALTY_GRADE: 'SPECIALTY_GRADE',
  PREMIUM_GRADE: 'PREMIUM_GRADE',
  EXCHANGE_GRADE: 'EXCHANGE_GRADE',
  BELOW_STANDARD: 'BELOW_STANDARD',
  OFF_GRADE: 'OFF_GRADE'
};

export type GradeClassification = (typeof GradeClassification)[keyof typeof GradeClassification]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type SubscriptionPlan = $Enums.SubscriptionPlan

export const SubscriptionPlan: typeof $Enums.SubscriptionPlan

export type InvitationStatus = $Enums.InvitationStatus

export const InvitationStatus: typeof $Enums.InvitationStatus

export type ProcessingMethod = $Enums.ProcessingMethod

export const ProcessingMethod: typeof $Enums.ProcessingMethod

export type RoastLevel = $Enums.RoastLevel

export const RoastLevel: typeof $Enums.RoastLevel

export type ScoringSystem = $Enums.ScoringSystem

export const ScoringSystem: typeof $Enums.ScoringSystem

export type SessionStatus = $Enums.SessionStatus

export const SessionStatus: typeof $Enums.SessionStatus

export type ParticipantRole = $Enums.ParticipantRole

export const ParticipantRole: typeof $Enums.ParticipantRole

export type FlavorCategory = $Enums.FlavorCategory

export const FlavorCategory: typeof $Enums.FlavorCategory

export type GradingSystem = $Enums.GradingSystem

export const GradingSystem: typeof $Enums.GradingSystem

export type GradeClassification = $Enums.GradeClassification

export const GradeClassification: typeof $Enums.GradeClassification

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sample`: Exposes CRUD operations for the **Sample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Samples
    * const samples = await prisma.sample.findMany()
    * ```
    */
  get sample(): Prisma.SampleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cuppingTemplate`: Exposes CRUD operations for the **CuppingTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CuppingTemplates
    * const cuppingTemplates = await prisma.cuppingTemplate.findMany()
    * ```
    */
  get cuppingTemplate(): Prisma.CuppingTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cuppingSession`: Exposes CRUD operations for the **CuppingSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CuppingSessions
    * const cuppingSessions = await prisma.cuppingSession.findMany()
    * ```
    */
  get cuppingSession(): Prisma.CuppingSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionParticipant`: Exposes CRUD operations for the **SessionParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionParticipants
    * const sessionParticipants = await prisma.sessionParticipant.findMany()
    * ```
    */
  get sessionParticipant(): Prisma.SessionParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionSample`: Exposes CRUD operations for the **SessionSample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionSamples
    * const sessionSamples = await prisma.sessionSample.findMany()
    * ```
    */
  get sessionSample(): Prisma.SessionSampleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.score`: Exposes CRUD operations for the **Score** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scores
    * const scores = await prisma.score.findMany()
    * ```
    */
  get score(): Prisma.ScoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flavorDescriptor`: Exposes CRUD operations for the **FlavorDescriptor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlavorDescriptors
    * const flavorDescriptors = await prisma.flavorDescriptor.findMany()
    * ```
    */
  get flavorDescriptor(): Prisma.FlavorDescriptorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scoreFlavorDescriptor`: Exposes CRUD operations for the **ScoreFlavorDescriptor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScoreFlavorDescriptors
    * const scoreFlavorDescriptors = await prisma.scoreFlavorDescriptor.findMany()
    * ```
    */
  get scoreFlavorDescriptor(): Prisma.ScoreFlavorDescriptorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.greenBeanGrading`: Exposes CRUD operations for the **GreenBeanGrading** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GreenBeanGradings
    * const greenBeanGradings = await prisma.greenBeanGrading.findMany()
    * ```
    */
  get greenBeanGrading(): Prisma.GreenBeanGradingDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Organization: 'Organization',
    User: 'User',
    Invitation: 'Invitation',
    Sample: 'Sample',
    CuppingTemplate: 'CuppingTemplate',
    CuppingSession: 'CuppingSession',
    SessionParticipant: 'SessionParticipant',
    SessionSample: 'SessionSample',
    Score: 'Score',
    FlavorDescriptor: 'FlavorDescriptor',
    ScoreFlavorDescriptor: 'ScoreFlavorDescriptor',
    GreenBeanGrading: 'GreenBeanGrading'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "organization" | "user" | "invitation" | "sample" | "cuppingTemplate" | "cuppingSession" | "sessionParticipant" | "sessionSample" | "score" | "flavorDescriptor" | "scoreFlavorDescriptor" | "greenBeanGrading"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Invitation: {
        payload: Prisma.$InvitationPayload<ExtArgs>
        fields: Prisma.InvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findFirst: {
            args: Prisma.InvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findMany: {
            args: Prisma.InvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          create: {
            args: Prisma.InvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          createMany: {
            args: Prisma.InvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          delete: {
            args: Prisma.InvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          update: {
            args: Prisma.InvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          deleteMany: {
            args: Prisma.InvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          upsert: {
            args: Prisma.InvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          aggregate: {
            args: Prisma.InvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitation>
          }
          groupBy: {
            args: Prisma.InvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationCountAggregateOutputType> | number
          }
        }
      }
      Sample: {
        payload: Prisma.$SamplePayload<ExtArgs>
        fields: Prisma.SampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findFirst: {
            args: Prisma.SampleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findMany: {
            args: Prisma.SampleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          create: {
            args: Prisma.SampleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          createMany: {
            args: Prisma.SampleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          delete: {
            args: Prisma.SampleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          update: {
            args: Prisma.SampleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          deleteMany: {
            args: Prisma.SampleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SampleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          upsert: {
            args: Prisma.SampleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          aggregate: {
            args: Prisma.SampleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSample>
          }
          groupBy: {
            args: Prisma.SampleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleCountArgs<ExtArgs>
            result: $Utils.Optional<SampleCountAggregateOutputType> | number
          }
        }
      }
      CuppingTemplate: {
        payload: Prisma.$CuppingTemplatePayload<ExtArgs>
        fields: Prisma.CuppingTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CuppingTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CuppingTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>
          }
          findFirst: {
            args: Prisma.CuppingTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CuppingTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>
          }
          findMany: {
            args: Prisma.CuppingTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>[]
          }
          create: {
            args: Prisma.CuppingTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>
          }
          createMany: {
            args: Prisma.CuppingTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CuppingTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>[]
          }
          delete: {
            args: Prisma.CuppingTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>
          }
          update: {
            args: Prisma.CuppingTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>
          }
          deleteMany: {
            args: Prisma.CuppingTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CuppingTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CuppingTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>[]
          }
          upsert: {
            args: Prisma.CuppingTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingTemplatePayload>
          }
          aggregate: {
            args: Prisma.CuppingTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCuppingTemplate>
          }
          groupBy: {
            args: Prisma.CuppingTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CuppingTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CuppingTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<CuppingTemplateCountAggregateOutputType> | number
          }
        }
      }
      CuppingSession: {
        payload: Prisma.$CuppingSessionPayload<ExtArgs>
        fields: Prisma.CuppingSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CuppingSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CuppingSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>
          }
          findFirst: {
            args: Prisma.CuppingSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CuppingSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>
          }
          findMany: {
            args: Prisma.CuppingSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>[]
          }
          create: {
            args: Prisma.CuppingSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>
          }
          createMany: {
            args: Prisma.CuppingSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CuppingSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>[]
          }
          delete: {
            args: Prisma.CuppingSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>
          }
          update: {
            args: Prisma.CuppingSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>
          }
          deleteMany: {
            args: Prisma.CuppingSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CuppingSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CuppingSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>[]
          }
          upsert: {
            args: Prisma.CuppingSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuppingSessionPayload>
          }
          aggregate: {
            args: Prisma.CuppingSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCuppingSession>
          }
          groupBy: {
            args: Prisma.CuppingSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CuppingSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CuppingSessionCountArgs<ExtArgs>
            result: $Utils.Optional<CuppingSessionCountAggregateOutputType> | number
          }
        }
      }
      SessionParticipant: {
        payload: Prisma.$SessionParticipantPayload<ExtArgs>
        fields: Prisma.SessionParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          findFirst: {
            args: Prisma.SessionParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          findMany: {
            args: Prisma.SessionParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>[]
          }
          create: {
            args: Prisma.SessionParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          createMany: {
            args: Prisma.SessionParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>[]
          }
          delete: {
            args: Prisma.SessionParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          update: {
            args: Prisma.SessionParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          deleteMany: {
            args: Prisma.SessionParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>[]
          }
          upsert: {
            args: Prisma.SessionParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          aggregate: {
            args: Prisma.SessionParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionParticipant>
          }
          groupBy: {
            args: Prisma.SessionParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<SessionParticipantCountAggregateOutputType> | number
          }
        }
      }
      SessionSample: {
        payload: Prisma.$SessionSamplePayload<ExtArgs>
        fields: Prisma.SessionSampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionSampleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionSampleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>
          }
          findFirst: {
            args: Prisma.SessionSampleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionSampleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>
          }
          findMany: {
            args: Prisma.SessionSampleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>[]
          }
          create: {
            args: Prisma.SessionSampleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>
          }
          createMany: {
            args: Prisma.SessionSampleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionSampleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>[]
          }
          delete: {
            args: Prisma.SessionSampleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>
          }
          update: {
            args: Prisma.SessionSampleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>
          }
          deleteMany: {
            args: Prisma.SessionSampleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionSampleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionSampleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>[]
          }
          upsert: {
            args: Prisma.SessionSampleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionSamplePayload>
          }
          aggregate: {
            args: Prisma.SessionSampleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionSample>
          }
          groupBy: {
            args: Prisma.SessionSampleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionSampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionSampleCountArgs<ExtArgs>
            result: $Utils.Optional<SessionSampleCountAggregateOutputType> | number
          }
        }
      }
      Score: {
        payload: Prisma.$ScorePayload<ExtArgs>
        fields: Prisma.ScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          findFirst: {
            args: Prisma.ScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          findMany: {
            args: Prisma.ScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          create: {
            args: Prisma.ScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          createMany: {
            args: Prisma.ScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          delete: {
            args: Prisma.ScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          update: {
            args: Prisma.ScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          deleteMany: {
            args: Prisma.ScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          upsert: {
            args: Prisma.ScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          aggregate: {
            args: Prisma.ScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScore>
          }
          groupBy: {
            args: Prisma.ScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreCountAggregateOutputType> | number
          }
        }
      }
      FlavorDescriptor: {
        payload: Prisma.$FlavorDescriptorPayload<ExtArgs>
        fields: Prisma.FlavorDescriptorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlavorDescriptorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlavorDescriptorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>
          }
          findFirst: {
            args: Prisma.FlavorDescriptorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlavorDescriptorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>
          }
          findMany: {
            args: Prisma.FlavorDescriptorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>[]
          }
          create: {
            args: Prisma.FlavorDescriptorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>
          }
          createMany: {
            args: Prisma.FlavorDescriptorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlavorDescriptorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>[]
          }
          delete: {
            args: Prisma.FlavorDescriptorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>
          }
          update: {
            args: Prisma.FlavorDescriptorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>
          }
          deleteMany: {
            args: Prisma.FlavorDescriptorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlavorDescriptorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlavorDescriptorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>[]
          }
          upsert: {
            args: Prisma.FlavorDescriptorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlavorDescriptorPayload>
          }
          aggregate: {
            args: Prisma.FlavorDescriptorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlavorDescriptor>
          }
          groupBy: {
            args: Prisma.FlavorDescriptorGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlavorDescriptorGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlavorDescriptorCountArgs<ExtArgs>
            result: $Utils.Optional<FlavorDescriptorCountAggregateOutputType> | number
          }
        }
      }
      ScoreFlavorDescriptor: {
        payload: Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>
        fields: Prisma.ScoreFlavorDescriptorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreFlavorDescriptorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreFlavorDescriptorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>
          }
          findFirst: {
            args: Prisma.ScoreFlavorDescriptorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreFlavorDescriptorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>
          }
          findMany: {
            args: Prisma.ScoreFlavorDescriptorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>[]
          }
          create: {
            args: Prisma.ScoreFlavorDescriptorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>
          }
          createMany: {
            args: Prisma.ScoreFlavorDescriptorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreFlavorDescriptorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>[]
          }
          delete: {
            args: Prisma.ScoreFlavorDescriptorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>
          }
          update: {
            args: Prisma.ScoreFlavorDescriptorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>
          }
          deleteMany: {
            args: Prisma.ScoreFlavorDescriptorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreFlavorDescriptorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreFlavorDescriptorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>[]
          }
          upsert: {
            args: Prisma.ScoreFlavorDescriptorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreFlavorDescriptorPayload>
          }
          aggregate: {
            args: Prisma.ScoreFlavorDescriptorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScoreFlavorDescriptor>
          }
          groupBy: {
            args: Prisma.ScoreFlavorDescriptorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreFlavorDescriptorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreFlavorDescriptorCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreFlavorDescriptorCountAggregateOutputType> | number
          }
        }
      }
      GreenBeanGrading: {
        payload: Prisma.$GreenBeanGradingPayload<ExtArgs>
        fields: Prisma.GreenBeanGradingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GreenBeanGradingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GreenBeanGradingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>
          }
          findFirst: {
            args: Prisma.GreenBeanGradingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GreenBeanGradingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>
          }
          findMany: {
            args: Prisma.GreenBeanGradingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>[]
          }
          create: {
            args: Prisma.GreenBeanGradingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>
          }
          createMany: {
            args: Prisma.GreenBeanGradingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GreenBeanGradingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>[]
          }
          delete: {
            args: Prisma.GreenBeanGradingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>
          }
          update: {
            args: Prisma.GreenBeanGradingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>
          }
          deleteMany: {
            args: Prisma.GreenBeanGradingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GreenBeanGradingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GreenBeanGradingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>[]
          }
          upsert: {
            args: Prisma.GreenBeanGradingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreenBeanGradingPayload>
          }
          aggregate: {
            args: Prisma.GreenBeanGradingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGreenBeanGrading>
          }
          groupBy: {
            args: Prisma.GreenBeanGradingGroupByArgs<ExtArgs>
            result: $Utils.Optional<GreenBeanGradingGroupByOutputType>[]
          }
          count: {
            args: Prisma.GreenBeanGradingCountArgs<ExtArgs>
            result: $Utils.Optional<GreenBeanGradingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    organization?: OrganizationOmit
    user?: UserOmit
    invitation?: InvitationOmit
    sample?: SampleOmit
    cuppingTemplate?: CuppingTemplateOmit
    cuppingSession?: CuppingSessionOmit
    sessionParticipant?: SessionParticipantOmit
    sessionSample?: SessionSampleOmit
    score?: ScoreOmit
    flavorDescriptor?: FlavorDescriptorOmit
    scoreFlavorDescriptor?: ScoreFlavorDescriptorOmit
    greenBeanGrading?: GreenBeanGradingOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
    cuppingSessions: number
    samples: number
    templates: number
    invitations: number
    flavorDescriptors: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
    cuppingSessions?: boolean | OrganizationCountOutputTypeCountCuppingSessionsArgs
    samples?: boolean | OrganizationCountOutputTypeCountSamplesArgs
    templates?: boolean | OrganizationCountOutputTypeCountTemplatesArgs
    invitations?: boolean | OrganizationCountOutputTypeCountInvitationsArgs
    flavorDescriptors?: boolean | OrganizationCountOutputTypeCountFlavorDescriptorsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountCuppingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingSessionWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingTemplateWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountFlavorDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlavorDescriptorWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    cuppingSessions: number
    scores: number
    sessionParticipants: number
    createdTemplates: number
    createdFlavorDescriptors: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cuppingSessions?: boolean | UserCountOutputTypeCountCuppingSessionsArgs
    scores?: boolean | UserCountOutputTypeCountScoresArgs
    sessionParticipants?: boolean | UserCountOutputTypeCountSessionParticipantsArgs
    createdTemplates?: boolean | UserCountOutputTypeCountCreatedTemplatesArgs
    createdFlavorDescriptors?: boolean | UserCountOutputTypeCountCreatedFlavorDescriptorsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCuppingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingTemplateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedFlavorDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlavorDescriptorWhereInput
  }


  /**
   * Count Type SampleCountOutputType
   */

  export type SampleCountOutputType = {
    sessionSamples: number
    scores: number
  }

  export type SampleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessionSamples?: boolean | SampleCountOutputTypeCountSessionSamplesArgs
    scores?: boolean | SampleCountOutputTypeCountScoresArgs
  }

  // Custom InputTypes
  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleCountOutputType
     */
    select?: SampleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountSessionSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionSampleWhereInput
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }


  /**
   * Count Type CuppingTemplateCountOutputType
   */

  export type CuppingTemplateCountOutputType = {
    cuppingSessions: number
  }

  export type CuppingTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cuppingSessions?: boolean | CuppingTemplateCountOutputTypeCountCuppingSessionsArgs
  }

  // Custom InputTypes
  /**
   * CuppingTemplateCountOutputType without action
   */
  export type CuppingTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplateCountOutputType
     */
    select?: CuppingTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CuppingTemplateCountOutputType without action
   */
  export type CuppingTemplateCountOutputTypeCountCuppingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingSessionWhereInput
  }


  /**
   * Count Type CuppingSessionCountOutputType
   */

  export type CuppingSessionCountOutputType = {
    participants: number
    samples: number
    scores: number
  }

  export type CuppingSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | CuppingSessionCountOutputTypeCountParticipantsArgs
    samples?: boolean | CuppingSessionCountOutputTypeCountSamplesArgs
    scores?: boolean | CuppingSessionCountOutputTypeCountScoresArgs
  }

  // Custom InputTypes
  /**
   * CuppingSessionCountOutputType without action
   */
  export type CuppingSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSessionCountOutputType
     */
    select?: CuppingSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CuppingSessionCountOutputType without action
   */
  export type CuppingSessionCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionParticipantWhereInput
  }

  /**
   * CuppingSessionCountOutputType without action
   */
  export type CuppingSessionCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionSampleWhereInput
  }

  /**
   * CuppingSessionCountOutputType without action
   */
  export type CuppingSessionCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }


  /**
   * Count Type SessionSampleCountOutputType
   */

  export type SessionSampleCountOutputType = {
    scores: number
  }

  export type SessionSampleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scores?: boolean | SessionSampleCountOutputTypeCountScoresArgs
  }

  // Custom InputTypes
  /**
   * SessionSampleCountOutputType without action
   */
  export type SessionSampleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSampleCountOutputType
     */
    select?: SessionSampleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionSampleCountOutputType without action
   */
  export type SessionSampleCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }


  /**
   * Count Type ScoreCountOutputType
   */

  export type ScoreCountOutputType = {
    flavorDescriptors: number
  }

  export type ScoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flavorDescriptors?: boolean | ScoreCountOutputTypeCountFlavorDescriptorsArgs
  }

  // Custom InputTypes
  /**
   * ScoreCountOutputType without action
   */
  export type ScoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCountOutputType
     */
    select?: ScoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScoreCountOutputType without action
   */
  export type ScoreCountOutputTypeCountFlavorDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreFlavorDescriptorWhereInput
  }


  /**
   * Count Type FlavorDescriptorCountOutputType
   */

  export type FlavorDescriptorCountOutputType = {
    scoreDescriptors: number
  }

  export type FlavorDescriptorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreDescriptors?: boolean | FlavorDescriptorCountOutputTypeCountScoreDescriptorsArgs
  }

  // Custom InputTypes
  /**
   * FlavorDescriptorCountOutputType without action
   */
  export type FlavorDescriptorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptorCountOutputType
     */
    select?: FlavorDescriptorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlavorDescriptorCountOutputType without action
   */
  export type FlavorDescriptorCountOutputTypeCountScoreDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreFlavorDescriptorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    domain: string | null
    subdomain: string | null
    description: string | null
    logo: string | null
    website: string | null
    subscriptionStatus: $Enums.SubscriptionStatus | null
    subscriptionPlan: $Enums.SubscriptionPlan | null
    trialEndsAt: Date | null
    subscriptionEndsAt: Date | null
    stripeCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    domain: string | null
    subdomain: string | null
    description: string | null
    logo: string | null
    website: string | null
    subscriptionStatus: $Enums.SubscriptionStatus | null
    subscriptionPlan: $Enums.SubscriptionPlan | null
    trialEndsAt: Date | null
    subscriptionEndsAt: Date | null
    stripeCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    domain: number
    subdomain: number
    description: number
    logo: number
    website: number
    subscriptionStatus: number
    subscriptionPlan: number
    trialEndsAt: number
    subscriptionEndsAt: number
    stripeCustomerId: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    domain?: true
    subdomain?: true
    description?: true
    logo?: true
    website?: true
    subscriptionStatus?: true
    subscriptionPlan?: true
    trialEndsAt?: true
    subscriptionEndsAt?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    domain?: true
    subdomain?: true
    description?: true
    logo?: true
    website?: true
    subscriptionStatus?: true
    subscriptionPlan?: true
    trialEndsAt?: true
    subscriptionEndsAt?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    domain?: true
    subdomain?: true
    description?: true
    logo?: true
    website?: true
    subscriptionStatus?: true
    subscriptionPlan?: true
    trialEndsAt?: true
    subscriptionEndsAt?: true
    stripeCustomerId?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    slug: string
    domain: string | null
    subdomain: string
    description: string | null
    logo: string | null
    website: string | null
    subscriptionStatus: $Enums.SubscriptionStatus
    subscriptionPlan: $Enums.SubscriptionPlan
    trialEndsAt: Date | null
    subscriptionEndsAt: Date | null
    stripeCustomerId: string | null
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    domain?: boolean
    subdomain?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    subscriptionStatus?: boolean
    subscriptionPlan?: boolean
    trialEndsAt?: boolean
    subscriptionEndsAt?: boolean
    stripeCustomerId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    cuppingSessions?: boolean | Organization$cuppingSessionsArgs<ExtArgs>
    samples?: boolean | Organization$samplesArgs<ExtArgs>
    templates?: boolean | Organization$templatesArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    flavorDescriptors?: boolean | Organization$flavorDescriptorsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    domain?: boolean
    subdomain?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    subscriptionStatus?: boolean
    subscriptionPlan?: boolean
    trialEndsAt?: boolean
    subscriptionEndsAt?: boolean
    stripeCustomerId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    domain?: boolean
    subdomain?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    subscriptionStatus?: boolean
    subscriptionPlan?: boolean
    trialEndsAt?: boolean
    subscriptionEndsAt?: boolean
    stripeCustomerId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    domain?: boolean
    subdomain?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    subscriptionStatus?: boolean
    subscriptionPlan?: boolean
    trialEndsAt?: boolean
    subscriptionEndsAt?: boolean
    stripeCustomerId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "domain" | "subdomain" | "description" | "logo" | "website" | "subscriptionStatus" | "subscriptionPlan" | "trialEndsAt" | "subscriptionEndsAt" | "stripeCustomerId" | "settings" | "createdAt" | "updatedAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    cuppingSessions?: boolean | Organization$cuppingSessionsArgs<ExtArgs>
    samples?: boolean | Organization$samplesArgs<ExtArgs>
    templates?: boolean | Organization$templatesArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    flavorDescriptors?: boolean | Organization$flavorDescriptorsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      cuppingSessions: Prisma.$CuppingSessionPayload<ExtArgs>[]
      samples: Prisma.$SamplePayload<ExtArgs>[]
      templates: Prisma.$CuppingTemplatePayload<ExtArgs>[]
      invitations: Prisma.$InvitationPayload<ExtArgs>[]
      flavorDescriptors: Prisma.$FlavorDescriptorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      domain: string | null
      subdomain: string
      description: string | null
      logo: string | null
      website: string | null
      subscriptionStatus: $Enums.SubscriptionStatus
      subscriptionPlan: $Enums.SubscriptionPlan
      trialEndsAt: Date | null
      subscriptionEndsAt: Date | null
      stripeCustomerId: string | null
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cuppingSessions<T extends Organization$cuppingSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$cuppingSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    samples<T extends Organization$samplesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    templates<T extends Organization$templatesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends Organization$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    flavorDescriptors<T extends Organization$flavorDescriptorsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$flavorDescriptorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly domain: FieldRef<"Organization", 'String'>
    readonly subdomain: FieldRef<"Organization", 'String'>
    readonly description: FieldRef<"Organization", 'String'>
    readonly logo: FieldRef<"Organization", 'String'>
    readonly website: FieldRef<"Organization", 'String'>
    readonly subscriptionStatus: FieldRef<"Organization", 'SubscriptionStatus'>
    readonly subscriptionPlan: FieldRef<"Organization", 'SubscriptionPlan'>
    readonly trialEndsAt: FieldRef<"Organization", 'DateTime'>
    readonly subscriptionEndsAt: FieldRef<"Organization", 'DateTime'>
    readonly stripeCustomerId: FieldRef<"Organization", 'String'>
    readonly settings: FieldRef<"Organization", 'Json'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization.cuppingSessions
   */
  export type Organization$cuppingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    where?: CuppingSessionWhereInput
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    cursor?: CuppingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CuppingSessionScalarFieldEnum | CuppingSessionScalarFieldEnum[]
  }

  /**
   * Organization.samples
   */
  export type Organization$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Organization.templates
   */
  export type Organization$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    where?: CuppingTemplateWhereInput
    orderBy?: CuppingTemplateOrderByWithRelationInput | CuppingTemplateOrderByWithRelationInput[]
    cursor?: CuppingTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CuppingTemplateScalarFieldEnum | CuppingTemplateScalarFieldEnum[]
  }

  /**
   * Organization.invitations
   */
  export type Organization$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Organization.flavorDescriptors
   */
  export type Organization$flavorDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    where?: FlavorDescriptorWhereInput
    orderBy?: FlavorDescriptorOrderByWithRelationInput | FlavorDescriptorOrderByWithRelationInput[]
    cursor?: FlavorDescriptorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlavorDescriptorScalarFieldEnum | FlavorDescriptorScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    bio: string | null
    organizationId: string | null
    role: $Enums.UserRole | null
    emailVerified: boolean | null
    emailVerifiedAt: Date | null
    lastLoginAt: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    bio: string | null
    organizationId: string | null
    role: $Enums.UserRole | null
    emailVerified: boolean | null
    emailVerifiedAt: Date | null
    lastLoginAt: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    avatar: number
    bio: number
    organizationId: number
    role: number
    emailVerified: number
    emailVerifiedAt: number
    lastLoginAt: number
    resetToken: number
    resetTokenExpiry: number
    preferences: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    bio?: true
    organizationId?: true
    role?: true
    emailVerified?: true
    emailVerifiedAt?: true
    lastLoginAt?: true
    resetToken?: true
    resetTokenExpiry?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    bio?: true
    organizationId?: true
    role?: true
    emailVerified?: true
    emailVerifiedAt?: true
    lastLoginAt?: true
    resetToken?: true
    resetTokenExpiry?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    bio?: true
    organizationId?: true
    role?: true
    emailVerified?: true
    emailVerifiedAt?: true
    lastLoginAt?: true
    resetToken?: true
    resetTokenExpiry?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar: string | null
    bio: string | null
    organizationId: string
    role: $Enums.UserRole
    emailVerified: boolean
    emailVerifiedAt: Date | null
    lastLoginAt: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    preferences: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    bio?: boolean
    organizationId?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    cuppingSessions?: boolean | User$cuppingSessionsArgs<ExtArgs>
    scores?: boolean | User$scoresArgs<ExtArgs>
    sessionParticipants?: boolean | User$sessionParticipantsArgs<ExtArgs>
    createdTemplates?: boolean | User$createdTemplatesArgs<ExtArgs>
    createdFlavorDescriptors?: boolean | User$createdFlavorDescriptorsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    bio?: boolean
    organizationId?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    bio?: boolean
    organizationId?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    bio?: boolean
    organizationId?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "avatar" | "bio" | "organizationId" | "role" | "emailVerified" | "emailVerifiedAt" | "lastLoginAt" | "resetToken" | "resetTokenExpiry" | "preferences" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    cuppingSessions?: boolean | User$cuppingSessionsArgs<ExtArgs>
    scores?: boolean | User$scoresArgs<ExtArgs>
    sessionParticipants?: boolean | User$sessionParticipantsArgs<ExtArgs>
    createdTemplates?: boolean | User$createdTemplatesArgs<ExtArgs>
    createdFlavorDescriptors?: boolean | User$createdFlavorDescriptorsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      cuppingSessions: Prisma.$CuppingSessionPayload<ExtArgs>[]
      scores: Prisma.$ScorePayload<ExtArgs>[]
      sessionParticipants: Prisma.$SessionParticipantPayload<ExtArgs>[]
      createdTemplates: Prisma.$CuppingTemplatePayload<ExtArgs>[]
      createdFlavorDescriptors: Prisma.$FlavorDescriptorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      avatar: string | null
      bio: string | null
      organizationId: string
      role: $Enums.UserRole
      emailVerified: boolean
      emailVerifiedAt: Date | null
      lastLoginAt: Date | null
      resetToken: string | null
      resetTokenExpiry: Date | null
      preferences: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cuppingSessions<T extends User$cuppingSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$cuppingSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scores<T extends User$scoresArgs<ExtArgs> = {}>(args?: Subset<T, User$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessionParticipants<T extends User$sessionParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdTemplates<T extends User$createdTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdFlavorDescriptors<T extends User$createdFlavorDescriptorsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdFlavorDescriptorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly organizationId: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerifiedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly preferences: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.cuppingSessions
   */
  export type User$cuppingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    where?: CuppingSessionWhereInput
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    cursor?: CuppingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CuppingSessionScalarFieldEnum | CuppingSessionScalarFieldEnum[]
  }

  /**
   * User.scores
   */
  export type User$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * User.sessionParticipants
   */
  export type User$sessionParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    where?: SessionParticipantWhereInput
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    cursor?: SessionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * User.createdTemplates
   */
  export type User$createdTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    where?: CuppingTemplateWhereInput
    orderBy?: CuppingTemplateOrderByWithRelationInput | CuppingTemplateOrderByWithRelationInput[]
    cursor?: CuppingTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CuppingTemplateScalarFieldEnum | CuppingTemplateScalarFieldEnum[]
  }

  /**
   * User.createdFlavorDescriptors
   */
  export type User$createdFlavorDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    where?: FlavorDescriptorWhereInput
    orderBy?: FlavorDescriptorOrderByWithRelationInput | FlavorDescriptorOrderByWithRelationInput[]
    cursor?: FlavorDescriptorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlavorDescriptorScalarFieldEnum | FlavorDescriptorScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Invitation
   */

  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationMinAggregateOutputType = {
    id: string | null
    email: string | null
    organizationId: string | null
    role: $Enums.UserRole | null
    token: string | null
    status: $Enums.InvitationStatus | null
    expiresAt: Date | null
    invitedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvitationMaxAggregateOutputType = {
    id: string | null
    email: string | null
    organizationId: string | null
    role: $Enums.UserRole | null
    token: string | null
    status: $Enums.InvitationStatus | null
    expiresAt: Date | null
    invitedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvitationCountAggregateOutputType = {
    id: number
    email: number
    organizationId: number
    role: number
    token: number
    status: number
    expiresAt: number
    invitedBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvitationMinAggregateInputType = {
    id?: true
    email?: true
    organizationId?: true
    role?: true
    token?: true
    status?: true
    expiresAt?: true
    invitedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvitationMaxAggregateInputType = {
    id?: true
    email?: true
    organizationId?: true
    role?: true
    token?: true
    status?: true
    expiresAt?: true
    invitedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvitationCountAggregateInputType = {
    id?: true
    email?: true
    organizationId?: true
    role?: true
    token?: true
    status?: true
    expiresAt?: true
    invitedBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitation to aggregate.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
    by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }

  export type InvitationGroupByOutputType = {
    id: string
    email: string
    organizationId: string
    role: $Enums.UserRole
    token: string
    status: $Enums.InvitationStatus
    expiresAt: Date
    invitedBy: string
    createdAt: Date
    updatedAt: Date
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    status?: boolean
    expiresAt?: boolean
    invitedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    status?: boolean
    expiresAt?: boolean
    invitedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    status?: boolean
    expiresAt?: boolean
    invitedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectScalar = {
    id?: boolean
    email?: boolean
    organizationId?: boolean
    role?: boolean
    token?: boolean
    status?: boolean
    expiresAt?: boolean
    invitedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "organizationId" | "role" | "token" | "status" | "expiresAt" | "invitedBy" | "createdAt" | "updatedAt", ExtArgs["result"]["invitation"]>
  export type InvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitation"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      organizationId: string
      role: $Enums.UserRole
      token: string
      status: $Enums.InvitationStatus
      expiresAt: Date
      invitedBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invitation"]>
    composites: {}
  }

  type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>

  type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvitationCountAggregateInputType | true
    }

  export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } }
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
     */
    create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invitations.
     * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invitations and returns the data saved in the database.
     * @param {InvitationCreateManyAndReturnArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
     */
    delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations and returns the data updated in the database.
     * @param {InvitationUpdateManyAndReturnArgs} args - Arguments to update many Invitations.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, InvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
     */
    upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitation model
   */
  readonly fields: InvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invitation model
   */
  interface InvitationFieldRefs {
    readonly id: FieldRef<"Invitation", 'String'>
    readonly email: FieldRef<"Invitation", 'String'>
    readonly organizationId: FieldRef<"Invitation", 'String'>
    readonly role: FieldRef<"Invitation", 'UserRole'>
    readonly token: FieldRef<"Invitation", 'String'>
    readonly status: FieldRef<"Invitation", 'InvitationStatus'>
    readonly expiresAt: FieldRef<"Invitation", 'DateTime'>
    readonly invitedBy: FieldRef<"Invitation", 'String'>
    readonly createdAt: FieldRef<"Invitation", 'DateTime'>
    readonly updatedAt: FieldRef<"Invitation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findUniqueOrThrow
   */
  export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findFirstOrThrow
   */
  export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation create
   */
  export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a Invitation.
     */
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }

  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invitation createManyAndReturn
   */
  export type InvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation update
   */
  export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a Invitation.
     */
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
  }

  /**
   * Invitation updateManyAndReturn
   */
  export type InvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     */
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     */
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }

  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter which Invitation to delete.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to delete.
     */
    limit?: number
  }

  /**
   * Invitation without action
   */
  export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
  }


  /**
   * Model Sample
   */

  export type AggregateSample = {
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  export type SampleAvgAggregateOutputType = {
    altitude: number | null
    moisture: number | null
    density: number | null
  }

  export type SampleSumAggregateOutputType = {
    altitude: number | null
    moisture: number | null
    density: number | null
  }

  export type SampleMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    description: string | null
    code: string | null
    origin: string | null
    region: string | null
    farm: string | null
    producer: string | null
    variety: string | null
    altitude: number | null
    processingMethod: $Enums.ProcessingMethod | null
    harvestDate: Date | null
    roaster: string | null
    roastDate: Date | null
    roastLevel: $Enums.RoastLevel | null
    moisture: number | null
    density: number | null
    screenSize: string | null
    notes: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SampleMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    description: string | null
    code: string | null
    origin: string | null
    region: string | null
    farm: string | null
    producer: string | null
    variety: string | null
    altitude: number | null
    processingMethod: $Enums.ProcessingMethod | null
    harvestDate: Date | null
    roaster: string | null
    roastDate: Date | null
    roastLevel: $Enums.RoastLevel | null
    moisture: number | null
    density: number | null
    screenSize: string | null
    notes: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SampleCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    description: number
    code: number
    origin: number
    region: number
    farm: number
    producer: number
    variety: number
    altitude: number
    processingMethod: number
    harvestDate: number
    roaster: number
    roastDate: number
    roastLevel: number
    moisture: number
    density: number
    screenSize: number
    notes: number
    imageUrl: number
    tags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SampleAvgAggregateInputType = {
    altitude?: true
    moisture?: true
    density?: true
  }

  export type SampleSumAggregateInputType = {
    altitude?: true
    moisture?: true
    density?: true
  }

  export type SampleMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    code?: true
    origin?: true
    region?: true
    farm?: true
    producer?: true
    variety?: true
    altitude?: true
    processingMethod?: true
    harvestDate?: true
    roaster?: true
    roastDate?: true
    roastLevel?: true
    moisture?: true
    density?: true
    screenSize?: true
    notes?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SampleMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    code?: true
    origin?: true
    region?: true
    farm?: true
    producer?: true
    variety?: true
    altitude?: true
    processingMethod?: true
    harvestDate?: true
    roaster?: true
    roastDate?: true
    roastLevel?: true
    moisture?: true
    density?: true
    screenSize?: true
    notes?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SampleCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    code?: true
    origin?: true
    region?: true
    farm?: true
    producer?: true
    variety?: true
    altitude?: true
    processingMethod?: true
    harvestDate?: true
    roaster?: true
    roastDate?: true
    roastLevel?: true
    moisture?: true
    density?: true
    screenSize?: true
    notes?: true
    imageUrl?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sample to aggregate.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Samples
    **/
    _count?: true | SampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleMaxAggregateInputType
  }

  export type GetSampleAggregateType<T extends SampleAggregateArgs> = {
        [P in keyof T & keyof AggregateSample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSample[P]>
      : GetScalarType<T[P], AggregateSample[P]>
  }




  export type SampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithAggregationInput | SampleOrderByWithAggregationInput[]
    by: SampleScalarFieldEnum[] | SampleScalarFieldEnum
    having?: SampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleCountAggregateInputType | true
    _avg?: SampleAvgAggregateInputType
    _sum?: SampleSumAggregateInputType
    _min?: SampleMinAggregateInputType
    _max?: SampleMaxAggregateInputType
  }

  export type SampleGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    description: string | null
    code: string | null
    origin: string
    region: string | null
    farm: string | null
    producer: string | null
    variety: string | null
    altitude: number | null
    processingMethod: $Enums.ProcessingMethod | null
    harvestDate: Date | null
    roaster: string | null
    roastDate: Date | null
    roastLevel: $Enums.RoastLevel | null
    moisture: number | null
    density: number | null
    screenSize: string | null
    notes: string | null
    imageUrl: string | null
    tags: string[]
    createdAt: Date
    updatedAt: Date
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  type GetSampleGroupByPayload<T extends SampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleGroupByOutputType[P]>
            : GetScalarType<T[P], SampleGroupByOutputType[P]>
        }
      >
    >


  export type SampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    origin?: boolean
    region?: boolean
    farm?: boolean
    producer?: boolean
    variety?: boolean
    altitude?: boolean
    processingMethod?: boolean
    harvestDate?: boolean
    roaster?: boolean
    roastDate?: boolean
    roastLevel?: boolean
    moisture?: boolean
    density?: boolean
    screenSize?: boolean
    notes?: boolean
    imageUrl?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    sessionSamples?: boolean | Sample$sessionSamplesArgs<ExtArgs>
    scores?: boolean | Sample$scoresArgs<ExtArgs>
    greenBeanGrading?: boolean | Sample$greenBeanGradingArgs<ExtArgs>
    _count?: boolean | SampleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    origin?: boolean
    region?: boolean
    farm?: boolean
    producer?: boolean
    variety?: boolean
    altitude?: boolean
    processingMethod?: boolean
    harvestDate?: boolean
    roaster?: boolean
    roastDate?: boolean
    roastLevel?: boolean
    moisture?: boolean
    density?: boolean
    screenSize?: boolean
    notes?: boolean
    imageUrl?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    origin?: boolean
    region?: boolean
    farm?: boolean
    producer?: boolean
    variety?: boolean
    altitude?: boolean
    processingMethod?: boolean
    harvestDate?: boolean
    roaster?: boolean
    roastDate?: boolean
    roastLevel?: boolean
    moisture?: boolean
    density?: boolean
    screenSize?: boolean
    notes?: boolean
    imageUrl?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    origin?: boolean
    region?: boolean
    farm?: boolean
    producer?: boolean
    variety?: boolean
    altitude?: boolean
    processingMethod?: boolean
    harvestDate?: boolean
    roaster?: boolean
    roastDate?: boolean
    roastLevel?: boolean
    moisture?: boolean
    density?: boolean
    screenSize?: boolean
    notes?: boolean
    imageUrl?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SampleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "description" | "code" | "origin" | "region" | "farm" | "producer" | "variety" | "altitude" | "processingMethod" | "harvestDate" | "roaster" | "roastDate" | "roastLevel" | "moisture" | "density" | "screenSize" | "notes" | "imageUrl" | "tags" | "createdAt" | "updatedAt", ExtArgs["result"]["sample"]>
  export type SampleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    sessionSamples?: boolean | Sample$sessionSamplesArgs<ExtArgs>
    scores?: boolean | Sample$scoresArgs<ExtArgs>
    greenBeanGrading?: boolean | Sample$greenBeanGradingArgs<ExtArgs>
    _count?: boolean | SampleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SampleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type SampleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $SamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sample"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      sessionSamples: Prisma.$SessionSamplePayload<ExtArgs>[]
      scores: Prisma.$ScorePayload<ExtArgs>[]
      greenBeanGrading: Prisma.$GreenBeanGradingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      description: string | null
      code: string | null
      origin: string
      region: string | null
      farm: string | null
      producer: string | null
      variety: string | null
      altitude: number | null
      processingMethod: $Enums.ProcessingMethod | null
      harvestDate: Date | null
      roaster: string | null
      roastDate: Date | null
      roastLevel: $Enums.RoastLevel | null
      moisture: number | null
      density: number | null
      screenSize: string | null
      notes: string | null
      imageUrl: string | null
      tags: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sample"]>
    composites: {}
  }

  type SampleGetPayload<S extends boolean | null | undefined | SampleDefaultArgs> = $Result.GetResult<Prisma.$SamplePayload, S>

  type SampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SampleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SampleCountAggregateInputType | true
    }

  export interface SampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sample'], meta: { name: 'Sample' } }
    /**
     * Find zero or one Sample that matches the filter.
     * @param {SampleFindUniqueArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleFindUniqueArgs>(args: SelectSubset<T, SampleFindUniqueArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sample that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SampleFindUniqueOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sample that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleFindFirstArgs>(args?: SelectSubset<T, SampleFindFirstArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sample that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Samples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Samples
     * const samples = await prisma.sample.findMany()
     * 
     * // Get first 10 Samples
     * const samples = await prisma.sample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleWithIdOnly = await prisma.sample.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SampleFindManyArgs>(args?: SelectSubset<T, SampleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sample.
     * @param {SampleCreateArgs} args - Arguments to create a Sample.
     * @example
     * // Create one Sample
     * const Sample = await prisma.sample.create({
     *   data: {
     *     // ... data to create a Sample
     *   }
     * })
     * 
     */
    create<T extends SampleCreateArgs>(args: SelectSubset<T, SampleCreateArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Samples.
     * @param {SampleCreateManyArgs} args - Arguments to create many Samples.
     * @example
     * // Create many Samples
     * const sample = await prisma.sample.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleCreateManyArgs>(args?: SelectSubset<T, SampleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Samples and returns the data saved in the database.
     * @param {SampleCreateManyAndReturnArgs} args - Arguments to create many Samples.
     * @example
     * // Create many Samples
     * const sample = await prisma.sample.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Samples and only return the `id`
     * const sampleWithIdOnly = await prisma.sample.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sample.
     * @param {SampleDeleteArgs} args - Arguments to delete one Sample.
     * @example
     * // Delete one Sample
     * const Sample = await prisma.sample.delete({
     *   where: {
     *     // ... filter to delete one Sample
     *   }
     * })
     * 
     */
    delete<T extends SampleDeleteArgs>(args: SelectSubset<T, SampleDeleteArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sample.
     * @param {SampleUpdateArgs} args - Arguments to update one Sample.
     * @example
     * // Update one Sample
     * const sample = await prisma.sample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleUpdateArgs>(args: SelectSubset<T, SampleUpdateArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Samples.
     * @param {SampleDeleteManyArgs} args - Arguments to filter Samples to delete.
     * @example
     * // Delete a few Samples
     * const { count } = await prisma.sample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleDeleteManyArgs>(args?: SelectSubset<T, SampleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Samples
     * const sample = await prisma.sample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleUpdateManyArgs>(args: SelectSubset<T, SampleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Samples and returns the data updated in the database.
     * @param {SampleUpdateManyAndReturnArgs} args - Arguments to update many Samples.
     * @example
     * // Update many Samples
     * const sample = await prisma.sample.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Samples and only return the `id`
     * const sampleWithIdOnly = await prisma.sample.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SampleUpdateManyAndReturnArgs>(args: SelectSubset<T, SampleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sample.
     * @param {SampleUpsertArgs} args - Arguments to update or create a Sample.
     * @example
     * // Update or create a Sample
     * const sample = await prisma.sample.upsert({
     *   create: {
     *     // ... data to create a Sample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sample we want to update
     *   }
     * })
     */
    upsert<T extends SampleUpsertArgs>(args: SelectSubset<T, SampleUpsertArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleCountArgs} args - Arguments to filter Samples to count.
     * @example
     * // Count the number of Samples
     * const count = await prisma.sample.count({
     *   where: {
     *     // ... the filter for the Samples we want to count
     *   }
     * })
    **/
    count<T extends SampleCountArgs>(
      args?: Subset<T, SampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleAggregateArgs>(args: Subset<T, SampleAggregateArgs>): Prisma.PrismaPromise<GetSampleAggregateType<T>>

    /**
     * Group by Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleGroupByArgs['orderBy'] }
        : { orderBy?: SampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sample model
   */
  readonly fields: SampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sessionSamples<T extends Sample$sessionSamplesArgs<ExtArgs> = {}>(args?: Subset<T, Sample$sessionSamplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scores<T extends Sample$scoresArgs<ExtArgs> = {}>(args?: Subset<T, Sample$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    greenBeanGrading<T extends Sample$greenBeanGradingArgs<ExtArgs> = {}>(args?: Subset<T, Sample$greenBeanGradingArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sample model
   */
  interface SampleFieldRefs {
    readonly id: FieldRef<"Sample", 'String'>
    readonly organizationId: FieldRef<"Sample", 'String'>
    readonly name: FieldRef<"Sample", 'String'>
    readonly description: FieldRef<"Sample", 'String'>
    readonly code: FieldRef<"Sample", 'String'>
    readonly origin: FieldRef<"Sample", 'String'>
    readonly region: FieldRef<"Sample", 'String'>
    readonly farm: FieldRef<"Sample", 'String'>
    readonly producer: FieldRef<"Sample", 'String'>
    readonly variety: FieldRef<"Sample", 'String'>
    readonly altitude: FieldRef<"Sample", 'Int'>
    readonly processingMethod: FieldRef<"Sample", 'ProcessingMethod'>
    readonly harvestDate: FieldRef<"Sample", 'DateTime'>
    readonly roaster: FieldRef<"Sample", 'String'>
    readonly roastDate: FieldRef<"Sample", 'DateTime'>
    readonly roastLevel: FieldRef<"Sample", 'RoastLevel'>
    readonly moisture: FieldRef<"Sample", 'Float'>
    readonly density: FieldRef<"Sample", 'Float'>
    readonly screenSize: FieldRef<"Sample", 'String'>
    readonly notes: FieldRef<"Sample", 'String'>
    readonly imageUrl: FieldRef<"Sample", 'String'>
    readonly tags: FieldRef<"Sample", 'String[]'>
    readonly createdAt: FieldRef<"Sample", 'DateTime'>
    readonly updatedAt: FieldRef<"Sample", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sample findUnique
   */
  export type SampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample findUniqueOrThrow
   */
  export type SampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample findFirst
   */
  export type SampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample findFirstOrThrow
   */
  export type SampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample findMany
   */
  export type SampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Samples to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample create
   */
  export type SampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sample.
     */
    data: XOR<SampleCreateInput, SampleUncheckedCreateInput>
  }

  /**
   * Sample createMany
   */
  export type SampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sample createManyAndReturn
   */
  export type SampleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sample update
   */
  export type SampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sample.
     */
    data: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
    /**
     * Choose, which Sample to update.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample updateMany
   */
  export type SampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Samples.
     */
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyInput>
    /**
     * Filter which Samples to update
     */
    where?: SampleWhereInput
    /**
     * Limit how many Samples to update.
     */
    limit?: number
  }

  /**
   * Sample updateManyAndReturn
   */
  export type SampleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * The data used to update Samples.
     */
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyInput>
    /**
     * Filter which Samples to update
     */
    where?: SampleWhereInput
    /**
     * Limit how many Samples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sample upsert
   */
  export type SampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sample to update in case it exists.
     */
    where: SampleWhereUniqueInput
    /**
     * In case the Sample found by the `where` argument doesn't exist, create a new Sample with this data.
     */
    create: XOR<SampleCreateInput, SampleUncheckedCreateInput>
    /**
     * In case the Sample was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
  }

  /**
   * Sample delete
   */
  export type SampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter which Sample to delete.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample deleteMany
   */
  export type SampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Samples to delete
     */
    where?: SampleWhereInput
    /**
     * Limit how many Samples to delete.
     */
    limit?: number
  }

  /**
   * Sample.sessionSamples
   */
  export type Sample$sessionSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    where?: SessionSampleWhereInput
    orderBy?: SessionSampleOrderByWithRelationInput | SessionSampleOrderByWithRelationInput[]
    cursor?: SessionSampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionSampleScalarFieldEnum | SessionSampleScalarFieldEnum[]
  }

  /**
   * Sample.scores
   */
  export type Sample$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Sample.greenBeanGrading
   */
  export type Sample$greenBeanGradingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    where?: GreenBeanGradingWhereInput
  }

  /**
   * Sample without action
   */
  export type SampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
  }


  /**
   * Model CuppingTemplate
   */

  export type AggregateCuppingTemplate = {
    _count: CuppingTemplateCountAggregateOutputType | null
    _avg: CuppingTemplateAvgAggregateOutputType | null
    _sum: CuppingTemplateSumAggregateOutputType | null
    _min: CuppingTemplateMinAggregateOutputType | null
    _max: CuppingTemplateMaxAggregateOutputType | null
  }

  export type CuppingTemplateAvgAggregateOutputType = {
    maxScore: number | null
  }

  export type CuppingTemplateSumAggregateOutputType = {
    maxScore: number | null
  }

  export type CuppingTemplateMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    createdBy: string | null
    name: string | null
    description: string | null
    isDefault: boolean | null
    isPublic: boolean | null
    scoringSystem: $Enums.ScoringSystem | null
    maxScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CuppingTemplateMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    createdBy: string | null
    name: string | null
    description: string | null
    isDefault: boolean | null
    isPublic: boolean | null
    scoringSystem: $Enums.ScoringSystem | null
    maxScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CuppingTemplateCountAggregateOutputType = {
    id: number
    organizationId: number
    createdBy: number
    name: number
    description: number
    isDefault: number
    isPublic: number
    scoringSystem: number
    maxScore: number
    categories: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CuppingTemplateAvgAggregateInputType = {
    maxScore?: true
  }

  export type CuppingTemplateSumAggregateInputType = {
    maxScore?: true
  }

  export type CuppingTemplateMinAggregateInputType = {
    id?: true
    organizationId?: true
    createdBy?: true
    name?: true
    description?: true
    isDefault?: true
    isPublic?: true
    scoringSystem?: true
    maxScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CuppingTemplateMaxAggregateInputType = {
    id?: true
    organizationId?: true
    createdBy?: true
    name?: true
    description?: true
    isDefault?: true
    isPublic?: true
    scoringSystem?: true
    maxScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CuppingTemplateCountAggregateInputType = {
    id?: true
    organizationId?: true
    createdBy?: true
    name?: true
    description?: true
    isDefault?: true
    isPublic?: true
    scoringSystem?: true
    maxScore?: true
    categories?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CuppingTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CuppingTemplate to aggregate.
     */
    where?: CuppingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingTemplates to fetch.
     */
    orderBy?: CuppingTemplateOrderByWithRelationInput | CuppingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CuppingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CuppingTemplates
    **/
    _count?: true | CuppingTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CuppingTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CuppingTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CuppingTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CuppingTemplateMaxAggregateInputType
  }

  export type GetCuppingTemplateAggregateType<T extends CuppingTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateCuppingTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCuppingTemplate[P]>
      : GetScalarType<T[P], AggregateCuppingTemplate[P]>
  }




  export type CuppingTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingTemplateWhereInput
    orderBy?: CuppingTemplateOrderByWithAggregationInput | CuppingTemplateOrderByWithAggregationInput[]
    by: CuppingTemplateScalarFieldEnum[] | CuppingTemplateScalarFieldEnum
    having?: CuppingTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CuppingTemplateCountAggregateInputType | true
    _avg?: CuppingTemplateAvgAggregateInputType
    _sum?: CuppingTemplateSumAggregateInputType
    _min?: CuppingTemplateMinAggregateInputType
    _max?: CuppingTemplateMaxAggregateInputType
  }

  export type CuppingTemplateGroupByOutputType = {
    id: string
    organizationId: string
    createdBy: string
    name: string
    description: string | null
    isDefault: boolean
    isPublic: boolean
    scoringSystem: $Enums.ScoringSystem
    maxScore: number
    categories: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: CuppingTemplateCountAggregateOutputType | null
    _avg: CuppingTemplateAvgAggregateOutputType | null
    _sum: CuppingTemplateSumAggregateOutputType | null
    _min: CuppingTemplateMinAggregateOutputType | null
    _max: CuppingTemplateMaxAggregateOutputType | null
  }

  type GetCuppingTemplateGroupByPayload<T extends CuppingTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CuppingTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CuppingTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CuppingTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], CuppingTemplateGroupByOutputType[P]>
        }
      >
    >


  export type CuppingTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: boolean
    maxScore?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    cuppingSessions?: boolean | CuppingTemplate$cuppingSessionsArgs<ExtArgs>
    _count?: boolean | CuppingTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cuppingTemplate"]>

  export type CuppingTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: boolean
    maxScore?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cuppingTemplate"]>

  export type CuppingTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: boolean
    maxScore?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cuppingTemplate"]>

  export type CuppingTemplateSelectScalar = {
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: boolean
    maxScore?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CuppingTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "createdBy" | "name" | "description" | "isDefault" | "isPublic" | "scoringSystem" | "maxScore" | "categories" | "createdAt" | "updatedAt", ExtArgs["result"]["cuppingTemplate"]>
  export type CuppingTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    cuppingSessions?: boolean | CuppingTemplate$cuppingSessionsArgs<ExtArgs>
    _count?: boolean | CuppingTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CuppingTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CuppingTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CuppingTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CuppingTemplate"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      cuppingSessions: Prisma.$CuppingSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      createdBy: string
      name: string
      description: string | null
      isDefault: boolean
      isPublic: boolean
      scoringSystem: $Enums.ScoringSystem
      maxScore: number
      categories: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cuppingTemplate"]>
    composites: {}
  }

  type CuppingTemplateGetPayload<S extends boolean | null | undefined | CuppingTemplateDefaultArgs> = $Result.GetResult<Prisma.$CuppingTemplatePayload, S>

  type CuppingTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CuppingTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CuppingTemplateCountAggregateInputType | true
    }

  export interface CuppingTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CuppingTemplate'], meta: { name: 'CuppingTemplate' } }
    /**
     * Find zero or one CuppingTemplate that matches the filter.
     * @param {CuppingTemplateFindUniqueArgs} args - Arguments to find a CuppingTemplate
     * @example
     * // Get one CuppingTemplate
     * const cuppingTemplate = await prisma.cuppingTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CuppingTemplateFindUniqueArgs>(args: SelectSubset<T, CuppingTemplateFindUniqueArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CuppingTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CuppingTemplateFindUniqueOrThrowArgs} args - Arguments to find a CuppingTemplate
     * @example
     * // Get one CuppingTemplate
     * const cuppingTemplate = await prisma.cuppingTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CuppingTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, CuppingTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CuppingTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateFindFirstArgs} args - Arguments to find a CuppingTemplate
     * @example
     * // Get one CuppingTemplate
     * const cuppingTemplate = await prisma.cuppingTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CuppingTemplateFindFirstArgs>(args?: SelectSubset<T, CuppingTemplateFindFirstArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CuppingTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateFindFirstOrThrowArgs} args - Arguments to find a CuppingTemplate
     * @example
     * // Get one CuppingTemplate
     * const cuppingTemplate = await prisma.cuppingTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CuppingTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, CuppingTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CuppingTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CuppingTemplates
     * const cuppingTemplates = await prisma.cuppingTemplate.findMany()
     * 
     * // Get first 10 CuppingTemplates
     * const cuppingTemplates = await prisma.cuppingTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cuppingTemplateWithIdOnly = await prisma.cuppingTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CuppingTemplateFindManyArgs>(args?: SelectSubset<T, CuppingTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CuppingTemplate.
     * @param {CuppingTemplateCreateArgs} args - Arguments to create a CuppingTemplate.
     * @example
     * // Create one CuppingTemplate
     * const CuppingTemplate = await prisma.cuppingTemplate.create({
     *   data: {
     *     // ... data to create a CuppingTemplate
     *   }
     * })
     * 
     */
    create<T extends CuppingTemplateCreateArgs>(args: SelectSubset<T, CuppingTemplateCreateArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CuppingTemplates.
     * @param {CuppingTemplateCreateManyArgs} args - Arguments to create many CuppingTemplates.
     * @example
     * // Create many CuppingTemplates
     * const cuppingTemplate = await prisma.cuppingTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CuppingTemplateCreateManyArgs>(args?: SelectSubset<T, CuppingTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CuppingTemplates and returns the data saved in the database.
     * @param {CuppingTemplateCreateManyAndReturnArgs} args - Arguments to create many CuppingTemplates.
     * @example
     * // Create many CuppingTemplates
     * const cuppingTemplate = await prisma.cuppingTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CuppingTemplates and only return the `id`
     * const cuppingTemplateWithIdOnly = await prisma.cuppingTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CuppingTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, CuppingTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CuppingTemplate.
     * @param {CuppingTemplateDeleteArgs} args - Arguments to delete one CuppingTemplate.
     * @example
     * // Delete one CuppingTemplate
     * const CuppingTemplate = await prisma.cuppingTemplate.delete({
     *   where: {
     *     // ... filter to delete one CuppingTemplate
     *   }
     * })
     * 
     */
    delete<T extends CuppingTemplateDeleteArgs>(args: SelectSubset<T, CuppingTemplateDeleteArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CuppingTemplate.
     * @param {CuppingTemplateUpdateArgs} args - Arguments to update one CuppingTemplate.
     * @example
     * // Update one CuppingTemplate
     * const cuppingTemplate = await prisma.cuppingTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CuppingTemplateUpdateArgs>(args: SelectSubset<T, CuppingTemplateUpdateArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CuppingTemplates.
     * @param {CuppingTemplateDeleteManyArgs} args - Arguments to filter CuppingTemplates to delete.
     * @example
     * // Delete a few CuppingTemplates
     * const { count } = await prisma.cuppingTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CuppingTemplateDeleteManyArgs>(args?: SelectSubset<T, CuppingTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CuppingTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CuppingTemplates
     * const cuppingTemplate = await prisma.cuppingTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CuppingTemplateUpdateManyArgs>(args: SelectSubset<T, CuppingTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CuppingTemplates and returns the data updated in the database.
     * @param {CuppingTemplateUpdateManyAndReturnArgs} args - Arguments to update many CuppingTemplates.
     * @example
     * // Update many CuppingTemplates
     * const cuppingTemplate = await prisma.cuppingTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CuppingTemplates and only return the `id`
     * const cuppingTemplateWithIdOnly = await prisma.cuppingTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CuppingTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, CuppingTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CuppingTemplate.
     * @param {CuppingTemplateUpsertArgs} args - Arguments to update or create a CuppingTemplate.
     * @example
     * // Update or create a CuppingTemplate
     * const cuppingTemplate = await prisma.cuppingTemplate.upsert({
     *   create: {
     *     // ... data to create a CuppingTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CuppingTemplate we want to update
     *   }
     * })
     */
    upsert<T extends CuppingTemplateUpsertArgs>(args: SelectSubset<T, CuppingTemplateUpsertArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CuppingTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateCountArgs} args - Arguments to filter CuppingTemplates to count.
     * @example
     * // Count the number of CuppingTemplates
     * const count = await prisma.cuppingTemplate.count({
     *   where: {
     *     // ... the filter for the CuppingTemplates we want to count
     *   }
     * })
    **/
    count<T extends CuppingTemplateCountArgs>(
      args?: Subset<T, CuppingTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CuppingTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CuppingTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CuppingTemplateAggregateArgs>(args: Subset<T, CuppingTemplateAggregateArgs>): Prisma.PrismaPromise<GetCuppingTemplateAggregateType<T>>

    /**
     * Group by CuppingTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CuppingTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CuppingTemplateGroupByArgs['orderBy'] }
        : { orderBy?: CuppingTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CuppingTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCuppingTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CuppingTemplate model
   */
  readonly fields: CuppingTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CuppingTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CuppingTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cuppingSessions<T extends CuppingTemplate$cuppingSessionsArgs<ExtArgs> = {}>(args?: Subset<T, CuppingTemplate$cuppingSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CuppingTemplate model
   */
  interface CuppingTemplateFieldRefs {
    readonly id: FieldRef<"CuppingTemplate", 'String'>
    readonly organizationId: FieldRef<"CuppingTemplate", 'String'>
    readonly createdBy: FieldRef<"CuppingTemplate", 'String'>
    readonly name: FieldRef<"CuppingTemplate", 'String'>
    readonly description: FieldRef<"CuppingTemplate", 'String'>
    readonly isDefault: FieldRef<"CuppingTemplate", 'Boolean'>
    readonly isPublic: FieldRef<"CuppingTemplate", 'Boolean'>
    readonly scoringSystem: FieldRef<"CuppingTemplate", 'ScoringSystem'>
    readonly maxScore: FieldRef<"CuppingTemplate", 'Int'>
    readonly categories: FieldRef<"CuppingTemplate", 'Json'>
    readonly createdAt: FieldRef<"CuppingTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"CuppingTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CuppingTemplate findUnique
   */
  export type CuppingTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which CuppingTemplate to fetch.
     */
    where: CuppingTemplateWhereUniqueInput
  }

  /**
   * CuppingTemplate findUniqueOrThrow
   */
  export type CuppingTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which CuppingTemplate to fetch.
     */
    where: CuppingTemplateWhereUniqueInput
  }

  /**
   * CuppingTemplate findFirst
   */
  export type CuppingTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which CuppingTemplate to fetch.
     */
    where?: CuppingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingTemplates to fetch.
     */
    orderBy?: CuppingTemplateOrderByWithRelationInput | CuppingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CuppingTemplates.
     */
    cursor?: CuppingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CuppingTemplates.
     */
    distinct?: CuppingTemplateScalarFieldEnum | CuppingTemplateScalarFieldEnum[]
  }

  /**
   * CuppingTemplate findFirstOrThrow
   */
  export type CuppingTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which CuppingTemplate to fetch.
     */
    where?: CuppingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingTemplates to fetch.
     */
    orderBy?: CuppingTemplateOrderByWithRelationInput | CuppingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CuppingTemplates.
     */
    cursor?: CuppingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CuppingTemplates.
     */
    distinct?: CuppingTemplateScalarFieldEnum | CuppingTemplateScalarFieldEnum[]
  }

  /**
   * CuppingTemplate findMany
   */
  export type CuppingTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which CuppingTemplates to fetch.
     */
    where?: CuppingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingTemplates to fetch.
     */
    orderBy?: CuppingTemplateOrderByWithRelationInput | CuppingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CuppingTemplates.
     */
    cursor?: CuppingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingTemplates.
     */
    skip?: number
    distinct?: CuppingTemplateScalarFieldEnum | CuppingTemplateScalarFieldEnum[]
  }

  /**
   * CuppingTemplate create
   */
  export type CuppingTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a CuppingTemplate.
     */
    data: XOR<CuppingTemplateCreateInput, CuppingTemplateUncheckedCreateInput>
  }

  /**
   * CuppingTemplate createMany
   */
  export type CuppingTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CuppingTemplates.
     */
    data: CuppingTemplateCreateManyInput | CuppingTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CuppingTemplate createManyAndReturn
   */
  export type CuppingTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many CuppingTemplates.
     */
    data: CuppingTemplateCreateManyInput | CuppingTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CuppingTemplate update
   */
  export type CuppingTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a CuppingTemplate.
     */
    data: XOR<CuppingTemplateUpdateInput, CuppingTemplateUncheckedUpdateInput>
    /**
     * Choose, which CuppingTemplate to update.
     */
    where: CuppingTemplateWhereUniqueInput
  }

  /**
   * CuppingTemplate updateMany
   */
  export type CuppingTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CuppingTemplates.
     */
    data: XOR<CuppingTemplateUpdateManyMutationInput, CuppingTemplateUncheckedUpdateManyInput>
    /**
     * Filter which CuppingTemplates to update
     */
    where?: CuppingTemplateWhereInput
    /**
     * Limit how many CuppingTemplates to update.
     */
    limit?: number
  }

  /**
   * CuppingTemplate updateManyAndReturn
   */
  export type CuppingTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * The data used to update CuppingTemplates.
     */
    data: XOR<CuppingTemplateUpdateManyMutationInput, CuppingTemplateUncheckedUpdateManyInput>
    /**
     * Filter which CuppingTemplates to update
     */
    where?: CuppingTemplateWhereInput
    /**
     * Limit how many CuppingTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CuppingTemplate upsert
   */
  export type CuppingTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the CuppingTemplate to update in case it exists.
     */
    where: CuppingTemplateWhereUniqueInput
    /**
     * In case the CuppingTemplate found by the `where` argument doesn't exist, create a new CuppingTemplate with this data.
     */
    create: XOR<CuppingTemplateCreateInput, CuppingTemplateUncheckedCreateInput>
    /**
     * In case the CuppingTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CuppingTemplateUpdateInput, CuppingTemplateUncheckedUpdateInput>
  }

  /**
   * CuppingTemplate delete
   */
  export type CuppingTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    /**
     * Filter which CuppingTemplate to delete.
     */
    where: CuppingTemplateWhereUniqueInput
  }

  /**
   * CuppingTemplate deleteMany
   */
  export type CuppingTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CuppingTemplates to delete
     */
    where?: CuppingTemplateWhereInput
    /**
     * Limit how many CuppingTemplates to delete.
     */
    limit?: number
  }

  /**
   * CuppingTemplate.cuppingSessions
   */
  export type CuppingTemplate$cuppingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    where?: CuppingSessionWhereInput
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    cursor?: CuppingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CuppingSessionScalarFieldEnum | CuppingSessionScalarFieldEnum[]
  }

  /**
   * CuppingTemplate without action
   */
  export type CuppingTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
  }


  /**
   * Model CuppingSession
   */

  export type AggregateCuppingSession = {
    _count: CuppingSessionCountAggregateOutputType | null
    _min: CuppingSessionMinAggregateOutputType | null
    _max: CuppingSessionMaxAggregateOutputType | null
  }

  export type CuppingSessionMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    createdBy: string | null
    name: string | null
    description: string | null
    location: string | null
    templateId: string | null
    blindTasting: boolean | null
    allowComments: boolean | null
    requireCalibration: boolean | null
    status: $Enums.SessionStatus | null
    scheduledAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CuppingSessionMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    createdBy: string | null
    name: string | null
    description: string | null
    location: string | null
    templateId: string | null
    blindTasting: boolean | null
    allowComments: boolean | null
    requireCalibration: boolean | null
    status: $Enums.SessionStatus | null
    scheduledAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CuppingSessionCountAggregateOutputType = {
    id: number
    organizationId: number
    createdBy: number
    name: number
    description: number
    location: number
    templateId: number
    blindTasting: number
    allowComments: number
    requireCalibration: number
    status: number
    scheduledAt: number
    startedAt: number
    completedAt: number
    notes: number
    tags: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CuppingSessionMinAggregateInputType = {
    id?: true
    organizationId?: true
    createdBy?: true
    name?: true
    description?: true
    location?: true
    templateId?: true
    blindTasting?: true
    allowComments?: true
    requireCalibration?: true
    status?: true
    scheduledAt?: true
    startedAt?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CuppingSessionMaxAggregateInputType = {
    id?: true
    organizationId?: true
    createdBy?: true
    name?: true
    description?: true
    location?: true
    templateId?: true
    blindTasting?: true
    allowComments?: true
    requireCalibration?: true
    status?: true
    scheduledAt?: true
    startedAt?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CuppingSessionCountAggregateInputType = {
    id?: true
    organizationId?: true
    createdBy?: true
    name?: true
    description?: true
    location?: true
    templateId?: true
    blindTasting?: true
    allowComments?: true
    requireCalibration?: true
    status?: true
    scheduledAt?: true
    startedAt?: true
    completedAt?: true
    notes?: true
    tags?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CuppingSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CuppingSession to aggregate.
     */
    where?: CuppingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingSessions to fetch.
     */
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CuppingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CuppingSessions
    **/
    _count?: true | CuppingSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CuppingSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CuppingSessionMaxAggregateInputType
  }

  export type GetCuppingSessionAggregateType<T extends CuppingSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateCuppingSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCuppingSession[P]>
      : GetScalarType<T[P], AggregateCuppingSession[P]>
  }




  export type CuppingSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuppingSessionWhereInput
    orderBy?: CuppingSessionOrderByWithAggregationInput | CuppingSessionOrderByWithAggregationInput[]
    by: CuppingSessionScalarFieldEnum[] | CuppingSessionScalarFieldEnum
    having?: CuppingSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CuppingSessionCountAggregateInputType | true
    _min?: CuppingSessionMinAggregateInputType
    _max?: CuppingSessionMaxAggregateInputType
  }

  export type CuppingSessionGroupByOutputType = {
    id: string
    organizationId: string
    createdBy: string
    name: string
    description: string | null
    location: string | null
    templateId: string | null
    blindTasting: boolean
    allowComments: boolean
    requireCalibration: boolean
    status: $Enums.SessionStatus
    scheduledAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    notes: string | null
    tags: string[]
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: CuppingSessionCountAggregateOutputType | null
    _min: CuppingSessionMinAggregateOutputType | null
    _max: CuppingSessionMaxAggregateOutputType | null
  }

  type GetCuppingSessionGroupByPayload<T extends CuppingSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CuppingSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CuppingSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CuppingSessionGroupByOutputType[P]>
            : GetScalarType<T[P], CuppingSessionGroupByOutputType[P]>
        }
      >
    >


  export type CuppingSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    templateId?: boolean
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    tags?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | CuppingSession$templateArgs<ExtArgs>
    participants?: boolean | CuppingSession$participantsArgs<ExtArgs>
    samples?: boolean | CuppingSession$samplesArgs<ExtArgs>
    scores?: boolean | CuppingSession$scoresArgs<ExtArgs>
    _count?: boolean | CuppingSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cuppingSession"]>

  export type CuppingSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    templateId?: boolean
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    tags?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | CuppingSession$templateArgs<ExtArgs>
  }, ExtArgs["result"]["cuppingSession"]>

  export type CuppingSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    templateId?: boolean
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    tags?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | CuppingSession$templateArgs<ExtArgs>
  }, ExtArgs["result"]["cuppingSession"]>

  export type CuppingSessionSelectScalar = {
    id?: boolean
    organizationId?: boolean
    createdBy?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    templateId?: boolean
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    tags?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CuppingSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "createdBy" | "name" | "description" | "location" | "templateId" | "blindTasting" | "allowComments" | "requireCalibration" | "status" | "scheduledAt" | "startedAt" | "completedAt" | "notes" | "tags" | "settings" | "createdAt" | "updatedAt", ExtArgs["result"]["cuppingSession"]>
  export type CuppingSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | CuppingSession$templateArgs<ExtArgs>
    participants?: boolean | CuppingSession$participantsArgs<ExtArgs>
    samples?: boolean | CuppingSession$samplesArgs<ExtArgs>
    scores?: boolean | CuppingSession$scoresArgs<ExtArgs>
    _count?: boolean | CuppingSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CuppingSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | CuppingSession$templateArgs<ExtArgs>
  }
  export type CuppingSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | CuppingSession$templateArgs<ExtArgs>
  }

  export type $CuppingSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CuppingSession"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      template: Prisma.$CuppingTemplatePayload<ExtArgs> | null
      participants: Prisma.$SessionParticipantPayload<ExtArgs>[]
      samples: Prisma.$SessionSamplePayload<ExtArgs>[]
      scores: Prisma.$ScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      createdBy: string
      name: string
      description: string | null
      location: string | null
      templateId: string | null
      blindTasting: boolean
      allowComments: boolean
      requireCalibration: boolean
      status: $Enums.SessionStatus
      scheduledAt: Date | null
      startedAt: Date | null
      completedAt: Date | null
      notes: string | null
      tags: string[]
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cuppingSession"]>
    composites: {}
  }

  type CuppingSessionGetPayload<S extends boolean | null | undefined | CuppingSessionDefaultArgs> = $Result.GetResult<Prisma.$CuppingSessionPayload, S>

  type CuppingSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CuppingSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CuppingSessionCountAggregateInputType | true
    }

  export interface CuppingSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CuppingSession'], meta: { name: 'CuppingSession' } }
    /**
     * Find zero or one CuppingSession that matches the filter.
     * @param {CuppingSessionFindUniqueArgs} args - Arguments to find a CuppingSession
     * @example
     * // Get one CuppingSession
     * const cuppingSession = await prisma.cuppingSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CuppingSessionFindUniqueArgs>(args: SelectSubset<T, CuppingSessionFindUniqueArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CuppingSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CuppingSessionFindUniqueOrThrowArgs} args - Arguments to find a CuppingSession
     * @example
     * // Get one CuppingSession
     * const cuppingSession = await prisma.cuppingSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CuppingSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, CuppingSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CuppingSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionFindFirstArgs} args - Arguments to find a CuppingSession
     * @example
     * // Get one CuppingSession
     * const cuppingSession = await prisma.cuppingSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CuppingSessionFindFirstArgs>(args?: SelectSubset<T, CuppingSessionFindFirstArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CuppingSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionFindFirstOrThrowArgs} args - Arguments to find a CuppingSession
     * @example
     * // Get one CuppingSession
     * const cuppingSession = await prisma.cuppingSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CuppingSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, CuppingSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CuppingSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CuppingSessions
     * const cuppingSessions = await prisma.cuppingSession.findMany()
     * 
     * // Get first 10 CuppingSessions
     * const cuppingSessions = await prisma.cuppingSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cuppingSessionWithIdOnly = await prisma.cuppingSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CuppingSessionFindManyArgs>(args?: SelectSubset<T, CuppingSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CuppingSession.
     * @param {CuppingSessionCreateArgs} args - Arguments to create a CuppingSession.
     * @example
     * // Create one CuppingSession
     * const CuppingSession = await prisma.cuppingSession.create({
     *   data: {
     *     // ... data to create a CuppingSession
     *   }
     * })
     * 
     */
    create<T extends CuppingSessionCreateArgs>(args: SelectSubset<T, CuppingSessionCreateArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CuppingSessions.
     * @param {CuppingSessionCreateManyArgs} args - Arguments to create many CuppingSessions.
     * @example
     * // Create many CuppingSessions
     * const cuppingSession = await prisma.cuppingSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CuppingSessionCreateManyArgs>(args?: SelectSubset<T, CuppingSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CuppingSessions and returns the data saved in the database.
     * @param {CuppingSessionCreateManyAndReturnArgs} args - Arguments to create many CuppingSessions.
     * @example
     * // Create many CuppingSessions
     * const cuppingSession = await prisma.cuppingSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CuppingSessions and only return the `id`
     * const cuppingSessionWithIdOnly = await prisma.cuppingSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CuppingSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, CuppingSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CuppingSession.
     * @param {CuppingSessionDeleteArgs} args - Arguments to delete one CuppingSession.
     * @example
     * // Delete one CuppingSession
     * const CuppingSession = await prisma.cuppingSession.delete({
     *   where: {
     *     // ... filter to delete one CuppingSession
     *   }
     * })
     * 
     */
    delete<T extends CuppingSessionDeleteArgs>(args: SelectSubset<T, CuppingSessionDeleteArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CuppingSession.
     * @param {CuppingSessionUpdateArgs} args - Arguments to update one CuppingSession.
     * @example
     * // Update one CuppingSession
     * const cuppingSession = await prisma.cuppingSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CuppingSessionUpdateArgs>(args: SelectSubset<T, CuppingSessionUpdateArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CuppingSessions.
     * @param {CuppingSessionDeleteManyArgs} args - Arguments to filter CuppingSessions to delete.
     * @example
     * // Delete a few CuppingSessions
     * const { count } = await prisma.cuppingSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CuppingSessionDeleteManyArgs>(args?: SelectSubset<T, CuppingSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CuppingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CuppingSessions
     * const cuppingSession = await prisma.cuppingSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CuppingSessionUpdateManyArgs>(args: SelectSubset<T, CuppingSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CuppingSessions and returns the data updated in the database.
     * @param {CuppingSessionUpdateManyAndReturnArgs} args - Arguments to update many CuppingSessions.
     * @example
     * // Update many CuppingSessions
     * const cuppingSession = await prisma.cuppingSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CuppingSessions and only return the `id`
     * const cuppingSessionWithIdOnly = await prisma.cuppingSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CuppingSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, CuppingSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CuppingSession.
     * @param {CuppingSessionUpsertArgs} args - Arguments to update or create a CuppingSession.
     * @example
     * // Update or create a CuppingSession
     * const cuppingSession = await prisma.cuppingSession.upsert({
     *   create: {
     *     // ... data to create a CuppingSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CuppingSession we want to update
     *   }
     * })
     */
    upsert<T extends CuppingSessionUpsertArgs>(args: SelectSubset<T, CuppingSessionUpsertArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CuppingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionCountArgs} args - Arguments to filter CuppingSessions to count.
     * @example
     * // Count the number of CuppingSessions
     * const count = await prisma.cuppingSession.count({
     *   where: {
     *     // ... the filter for the CuppingSessions we want to count
     *   }
     * })
    **/
    count<T extends CuppingSessionCountArgs>(
      args?: Subset<T, CuppingSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CuppingSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CuppingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CuppingSessionAggregateArgs>(args: Subset<T, CuppingSessionAggregateArgs>): Prisma.PrismaPromise<GetCuppingSessionAggregateType<T>>

    /**
     * Group by CuppingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuppingSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CuppingSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CuppingSessionGroupByArgs['orderBy'] }
        : { orderBy?: CuppingSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CuppingSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCuppingSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CuppingSession model
   */
  readonly fields: CuppingSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CuppingSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CuppingSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    template<T extends CuppingSession$templateArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSession$templateArgs<ExtArgs>>): Prisma__CuppingTemplateClient<$Result.GetResult<Prisma.$CuppingTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    participants<T extends CuppingSession$participantsArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSession$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    samples<T extends CuppingSession$samplesArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSession$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scores<T extends CuppingSession$scoresArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSession$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CuppingSession model
   */
  interface CuppingSessionFieldRefs {
    readonly id: FieldRef<"CuppingSession", 'String'>
    readonly organizationId: FieldRef<"CuppingSession", 'String'>
    readonly createdBy: FieldRef<"CuppingSession", 'String'>
    readonly name: FieldRef<"CuppingSession", 'String'>
    readonly description: FieldRef<"CuppingSession", 'String'>
    readonly location: FieldRef<"CuppingSession", 'String'>
    readonly templateId: FieldRef<"CuppingSession", 'String'>
    readonly blindTasting: FieldRef<"CuppingSession", 'Boolean'>
    readonly allowComments: FieldRef<"CuppingSession", 'Boolean'>
    readonly requireCalibration: FieldRef<"CuppingSession", 'Boolean'>
    readonly status: FieldRef<"CuppingSession", 'SessionStatus'>
    readonly scheduledAt: FieldRef<"CuppingSession", 'DateTime'>
    readonly startedAt: FieldRef<"CuppingSession", 'DateTime'>
    readonly completedAt: FieldRef<"CuppingSession", 'DateTime'>
    readonly notes: FieldRef<"CuppingSession", 'String'>
    readonly tags: FieldRef<"CuppingSession", 'String[]'>
    readonly settings: FieldRef<"CuppingSession", 'Json'>
    readonly createdAt: FieldRef<"CuppingSession", 'DateTime'>
    readonly updatedAt: FieldRef<"CuppingSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CuppingSession findUnique
   */
  export type CuppingSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * Filter, which CuppingSession to fetch.
     */
    where: CuppingSessionWhereUniqueInput
  }

  /**
   * CuppingSession findUniqueOrThrow
   */
  export type CuppingSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * Filter, which CuppingSession to fetch.
     */
    where: CuppingSessionWhereUniqueInput
  }

  /**
   * CuppingSession findFirst
   */
  export type CuppingSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * Filter, which CuppingSession to fetch.
     */
    where?: CuppingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingSessions to fetch.
     */
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CuppingSessions.
     */
    cursor?: CuppingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CuppingSessions.
     */
    distinct?: CuppingSessionScalarFieldEnum | CuppingSessionScalarFieldEnum[]
  }

  /**
   * CuppingSession findFirstOrThrow
   */
  export type CuppingSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * Filter, which CuppingSession to fetch.
     */
    where?: CuppingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingSessions to fetch.
     */
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CuppingSessions.
     */
    cursor?: CuppingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CuppingSessions.
     */
    distinct?: CuppingSessionScalarFieldEnum | CuppingSessionScalarFieldEnum[]
  }

  /**
   * CuppingSession findMany
   */
  export type CuppingSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * Filter, which CuppingSessions to fetch.
     */
    where?: CuppingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuppingSessions to fetch.
     */
    orderBy?: CuppingSessionOrderByWithRelationInput | CuppingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CuppingSessions.
     */
    cursor?: CuppingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuppingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuppingSessions.
     */
    skip?: number
    distinct?: CuppingSessionScalarFieldEnum | CuppingSessionScalarFieldEnum[]
  }

  /**
   * CuppingSession create
   */
  export type CuppingSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a CuppingSession.
     */
    data: XOR<CuppingSessionCreateInput, CuppingSessionUncheckedCreateInput>
  }

  /**
   * CuppingSession createMany
   */
  export type CuppingSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CuppingSessions.
     */
    data: CuppingSessionCreateManyInput | CuppingSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CuppingSession createManyAndReturn
   */
  export type CuppingSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * The data used to create many CuppingSessions.
     */
    data: CuppingSessionCreateManyInput | CuppingSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CuppingSession update
   */
  export type CuppingSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a CuppingSession.
     */
    data: XOR<CuppingSessionUpdateInput, CuppingSessionUncheckedUpdateInput>
    /**
     * Choose, which CuppingSession to update.
     */
    where: CuppingSessionWhereUniqueInput
  }

  /**
   * CuppingSession updateMany
   */
  export type CuppingSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CuppingSessions.
     */
    data: XOR<CuppingSessionUpdateManyMutationInput, CuppingSessionUncheckedUpdateManyInput>
    /**
     * Filter which CuppingSessions to update
     */
    where?: CuppingSessionWhereInput
    /**
     * Limit how many CuppingSessions to update.
     */
    limit?: number
  }

  /**
   * CuppingSession updateManyAndReturn
   */
  export type CuppingSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * The data used to update CuppingSessions.
     */
    data: XOR<CuppingSessionUpdateManyMutationInput, CuppingSessionUncheckedUpdateManyInput>
    /**
     * Filter which CuppingSessions to update
     */
    where?: CuppingSessionWhereInput
    /**
     * Limit how many CuppingSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CuppingSession upsert
   */
  export type CuppingSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the CuppingSession to update in case it exists.
     */
    where: CuppingSessionWhereUniqueInput
    /**
     * In case the CuppingSession found by the `where` argument doesn't exist, create a new CuppingSession with this data.
     */
    create: XOR<CuppingSessionCreateInput, CuppingSessionUncheckedCreateInput>
    /**
     * In case the CuppingSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CuppingSessionUpdateInput, CuppingSessionUncheckedUpdateInput>
  }

  /**
   * CuppingSession delete
   */
  export type CuppingSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
    /**
     * Filter which CuppingSession to delete.
     */
    where: CuppingSessionWhereUniqueInput
  }

  /**
   * CuppingSession deleteMany
   */
  export type CuppingSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CuppingSessions to delete
     */
    where?: CuppingSessionWhereInput
    /**
     * Limit how many CuppingSessions to delete.
     */
    limit?: number
  }

  /**
   * CuppingSession.template
   */
  export type CuppingSession$templateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingTemplate
     */
    select?: CuppingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingTemplate
     */
    omit?: CuppingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingTemplateInclude<ExtArgs> | null
    where?: CuppingTemplateWhereInput
  }

  /**
   * CuppingSession.participants
   */
  export type CuppingSession$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    where?: SessionParticipantWhereInput
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    cursor?: SessionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * CuppingSession.samples
   */
  export type CuppingSession$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    where?: SessionSampleWhereInput
    orderBy?: SessionSampleOrderByWithRelationInput | SessionSampleOrderByWithRelationInput[]
    cursor?: SessionSampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionSampleScalarFieldEnum | SessionSampleScalarFieldEnum[]
  }

  /**
   * CuppingSession.scores
   */
  export type CuppingSession$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * CuppingSession without action
   */
  export type CuppingSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuppingSession
     */
    select?: CuppingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuppingSession
     */
    omit?: CuppingSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CuppingSessionInclude<ExtArgs> | null
  }


  /**
   * Model SessionParticipant
   */

  export type AggregateSessionParticipant = {
    _count: SessionParticipantCountAggregateOutputType | null
    _min: SessionParticipantMinAggregateOutputType | null
    _max: SessionParticipantMaxAggregateOutputType | null
  }

  export type SessionParticipantMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    role: $Enums.ParticipantRole | null
    joinedAt: Date | null
    leftAt: Date | null
    isActive: boolean | null
    isCalibrated: boolean | null
    calibratedAt: Date | null
  }

  export type SessionParticipantMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    userId: string | null
    role: $Enums.ParticipantRole | null
    joinedAt: Date | null
    leftAt: Date | null
    isActive: boolean | null
    isCalibrated: boolean | null
    calibratedAt: Date | null
  }

  export type SessionParticipantCountAggregateOutputType = {
    id: number
    sessionId: number
    userId: number
    role: number
    joinedAt: number
    leftAt: number
    isActive: number
    isCalibrated: number
    calibratedAt: number
    _all: number
  }


  export type SessionParticipantMinAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    role?: true
    joinedAt?: true
    leftAt?: true
    isActive?: true
    isCalibrated?: true
    calibratedAt?: true
  }

  export type SessionParticipantMaxAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    role?: true
    joinedAt?: true
    leftAt?: true
    isActive?: true
    isCalibrated?: true
    calibratedAt?: true
  }

  export type SessionParticipantCountAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    role?: true
    joinedAt?: true
    leftAt?: true
    isActive?: true
    isCalibrated?: true
    calibratedAt?: true
    _all?: true
  }

  export type SessionParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionParticipant to aggregate.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionParticipants
    **/
    _count?: true | SessionParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionParticipantMaxAggregateInputType
  }

  export type GetSessionParticipantAggregateType<T extends SessionParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionParticipant[P]>
      : GetScalarType<T[P], AggregateSessionParticipant[P]>
  }




  export type SessionParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionParticipantWhereInput
    orderBy?: SessionParticipantOrderByWithAggregationInput | SessionParticipantOrderByWithAggregationInput[]
    by: SessionParticipantScalarFieldEnum[] | SessionParticipantScalarFieldEnum
    having?: SessionParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionParticipantCountAggregateInputType | true
    _min?: SessionParticipantMinAggregateInputType
    _max?: SessionParticipantMaxAggregateInputType
  }

  export type SessionParticipantGroupByOutputType = {
    id: string
    sessionId: string
    userId: string
    role: $Enums.ParticipantRole
    joinedAt: Date
    leftAt: Date | null
    isActive: boolean
    isCalibrated: boolean
    calibratedAt: Date | null
    _count: SessionParticipantCountAggregateOutputType | null
    _min: SessionParticipantMinAggregateOutputType | null
    _max: SessionParticipantMaxAggregateOutputType | null
  }

  type GetSessionParticipantGroupByPayload<T extends SessionParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], SessionParticipantGroupByOutputType[P]>
        }
      >
    >


  export type SessionParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    leftAt?: boolean
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionParticipant"]>

  export type SessionParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    leftAt?: boolean
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionParticipant"]>

  export type SessionParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    leftAt?: boolean
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionParticipant"]>

  export type SessionParticipantSelectScalar = {
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    leftAt?: boolean
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: boolean
  }

  export type SessionParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "userId" | "role" | "joinedAt" | "leftAt" | "isActive" | "isCalibrated" | "calibratedAt", ExtArgs["result"]["sessionParticipant"]>
  export type SessionParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionParticipant"
    objects: {
      session: Prisma.$CuppingSessionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      userId: string
      role: $Enums.ParticipantRole
      joinedAt: Date
      leftAt: Date | null
      isActive: boolean
      isCalibrated: boolean
      calibratedAt: Date | null
    }, ExtArgs["result"]["sessionParticipant"]>
    composites: {}
  }

  type SessionParticipantGetPayload<S extends boolean | null | undefined | SessionParticipantDefaultArgs> = $Result.GetResult<Prisma.$SessionParticipantPayload, S>

  type SessionParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionParticipantCountAggregateInputType | true
    }

  export interface SessionParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionParticipant'], meta: { name: 'SessionParticipant' } }
    /**
     * Find zero or one SessionParticipant that matches the filter.
     * @param {SessionParticipantFindUniqueArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionParticipantFindUniqueArgs>(args: SelectSubset<T, SessionParticipantFindUniqueArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionParticipantFindUniqueOrThrowArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantFindFirstArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionParticipantFindFirstArgs>(args?: SelectSubset<T, SessionParticipantFindFirstArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantFindFirstOrThrowArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionParticipants
     * const sessionParticipants = await prisma.sessionParticipant.findMany()
     * 
     * // Get first 10 SessionParticipants
     * const sessionParticipants = await prisma.sessionParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionParticipantWithIdOnly = await prisma.sessionParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionParticipantFindManyArgs>(args?: SelectSubset<T, SessionParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionParticipant.
     * @param {SessionParticipantCreateArgs} args - Arguments to create a SessionParticipant.
     * @example
     * // Create one SessionParticipant
     * const SessionParticipant = await prisma.sessionParticipant.create({
     *   data: {
     *     // ... data to create a SessionParticipant
     *   }
     * })
     * 
     */
    create<T extends SessionParticipantCreateArgs>(args: SelectSubset<T, SessionParticipantCreateArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionParticipants.
     * @param {SessionParticipantCreateManyArgs} args - Arguments to create many SessionParticipants.
     * @example
     * // Create many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionParticipantCreateManyArgs>(args?: SelectSubset<T, SessionParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionParticipants and returns the data saved in the database.
     * @param {SessionParticipantCreateManyAndReturnArgs} args - Arguments to create many SessionParticipants.
     * @example
     * // Create many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionParticipants and only return the `id`
     * const sessionParticipantWithIdOnly = await prisma.sessionParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionParticipant.
     * @param {SessionParticipantDeleteArgs} args - Arguments to delete one SessionParticipant.
     * @example
     * // Delete one SessionParticipant
     * const SessionParticipant = await prisma.sessionParticipant.delete({
     *   where: {
     *     // ... filter to delete one SessionParticipant
     *   }
     * })
     * 
     */
    delete<T extends SessionParticipantDeleteArgs>(args: SelectSubset<T, SessionParticipantDeleteArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionParticipant.
     * @param {SessionParticipantUpdateArgs} args - Arguments to update one SessionParticipant.
     * @example
     * // Update one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionParticipantUpdateArgs>(args: SelectSubset<T, SessionParticipantUpdateArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionParticipants.
     * @param {SessionParticipantDeleteManyArgs} args - Arguments to filter SessionParticipants to delete.
     * @example
     * // Delete a few SessionParticipants
     * const { count } = await prisma.sessionParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionParticipantDeleteManyArgs>(args?: SelectSubset<T, SessionParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionParticipantUpdateManyArgs>(args: SelectSubset<T, SessionParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionParticipants and returns the data updated in the database.
     * @param {SessionParticipantUpdateManyAndReturnArgs} args - Arguments to update many SessionParticipants.
     * @example
     * // Update many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionParticipants and only return the `id`
     * const sessionParticipantWithIdOnly = await prisma.sessionParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionParticipant.
     * @param {SessionParticipantUpsertArgs} args - Arguments to update or create a SessionParticipant.
     * @example
     * // Update or create a SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.upsert({
     *   create: {
     *     // ... data to create a SessionParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionParticipant we want to update
     *   }
     * })
     */
    upsert<T extends SessionParticipantUpsertArgs>(args: SelectSubset<T, SessionParticipantUpsertArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantCountArgs} args - Arguments to filter SessionParticipants to count.
     * @example
     * // Count the number of SessionParticipants
     * const count = await prisma.sessionParticipant.count({
     *   where: {
     *     // ... the filter for the SessionParticipants we want to count
     *   }
     * })
    **/
    count<T extends SessionParticipantCountArgs>(
      args?: Subset<T, SessionParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionParticipantAggregateArgs>(args: Subset<T, SessionParticipantAggregateArgs>): Prisma.PrismaPromise<GetSessionParticipantAggregateType<T>>

    /**
     * Group by SessionParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionParticipantGroupByArgs['orderBy'] }
        : { orderBy?: SessionParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionParticipant model
   */
  readonly fields: SessionParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends CuppingSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSessionDefaultArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionParticipant model
   */
  interface SessionParticipantFieldRefs {
    readonly id: FieldRef<"SessionParticipant", 'String'>
    readonly sessionId: FieldRef<"SessionParticipant", 'String'>
    readonly userId: FieldRef<"SessionParticipant", 'String'>
    readonly role: FieldRef<"SessionParticipant", 'ParticipantRole'>
    readonly joinedAt: FieldRef<"SessionParticipant", 'DateTime'>
    readonly leftAt: FieldRef<"SessionParticipant", 'DateTime'>
    readonly isActive: FieldRef<"SessionParticipant", 'Boolean'>
    readonly isCalibrated: FieldRef<"SessionParticipant", 'Boolean'>
    readonly calibratedAt: FieldRef<"SessionParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionParticipant findUnique
   */
  export type SessionParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant findUniqueOrThrow
   */
  export type SessionParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant findFirst
   */
  export type SessionParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionParticipants.
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionParticipants.
     */
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * SessionParticipant findFirstOrThrow
   */
  export type SessionParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionParticipants.
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionParticipants.
     */
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * SessionParticipant findMany
   */
  export type SessionParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipants to fetch.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionParticipants.
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * SessionParticipant create
   */
  export type SessionParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionParticipant.
     */
    data: XOR<SessionParticipantCreateInput, SessionParticipantUncheckedCreateInput>
  }

  /**
   * SessionParticipant createMany
   */
  export type SessionParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionParticipants.
     */
    data: SessionParticipantCreateManyInput | SessionParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionParticipant createManyAndReturn
   */
  export type SessionParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many SessionParticipants.
     */
    data: SessionParticipantCreateManyInput | SessionParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionParticipant update
   */
  export type SessionParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionParticipant.
     */
    data: XOR<SessionParticipantUpdateInput, SessionParticipantUncheckedUpdateInput>
    /**
     * Choose, which SessionParticipant to update.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant updateMany
   */
  export type SessionParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionParticipants.
     */
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyInput>
    /**
     * Filter which SessionParticipants to update
     */
    where?: SessionParticipantWhereInput
    /**
     * Limit how many SessionParticipants to update.
     */
    limit?: number
  }

  /**
   * SessionParticipant updateManyAndReturn
   */
  export type SessionParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * The data used to update SessionParticipants.
     */
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyInput>
    /**
     * Filter which SessionParticipants to update
     */
    where?: SessionParticipantWhereInput
    /**
     * Limit how many SessionParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionParticipant upsert
   */
  export type SessionParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionParticipant to update in case it exists.
     */
    where: SessionParticipantWhereUniqueInput
    /**
     * In case the SessionParticipant found by the `where` argument doesn't exist, create a new SessionParticipant with this data.
     */
    create: XOR<SessionParticipantCreateInput, SessionParticipantUncheckedCreateInput>
    /**
     * In case the SessionParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionParticipantUpdateInput, SessionParticipantUncheckedUpdateInput>
  }

  /**
   * SessionParticipant delete
   */
  export type SessionParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter which SessionParticipant to delete.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant deleteMany
   */
  export type SessionParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionParticipants to delete
     */
    where?: SessionParticipantWhereInput
    /**
     * Limit how many SessionParticipants to delete.
     */
    limit?: number
  }

  /**
   * SessionParticipant without action
   */
  export type SessionParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
  }


  /**
   * Model SessionSample
   */

  export type AggregateSessionSample = {
    _count: SessionSampleCountAggregateOutputType | null
    _avg: SessionSampleAvgAggregateOutputType | null
    _sum: SessionSampleSumAggregateOutputType | null
    _min: SessionSampleMinAggregateOutputType | null
    _max: SessionSampleMaxAggregateOutputType | null
  }

  export type SessionSampleAvgAggregateOutputType = {
    position: number | null
    waterTemp: number | null
    steepTime: number | null
  }

  export type SessionSampleSumAggregateOutputType = {
    position: number | null
    waterTemp: number | null
    steepTime: number | null
  }

  export type SessionSampleMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    sampleId: string | null
    position: number | null
    isBlind: boolean | null
    blindCode: string | null
    grindSize: string | null
    waterTemp: number | null
    brewRatio: string | null
    steepTime: number | null
    aiSummary: string | null
    aiGeneratedAt: Date | null
    addedAt: Date | null
  }

  export type SessionSampleMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    sampleId: string | null
    position: number | null
    isBlind: boolean | null
    blindCode: string | null
    grindSize: string | null
    waterTemp: number | null
    brewRatio: string | null
    steepTime: number | null
    aiSummary: string | null
    aiGeneratedAt: Date | null
    addedAt: Date | null
  }

  export type SessionSampleCountAggregateOutputType = {
    id: number
    sessionId: number
    sampleId: number
    position: number
    isBlind: number
    blindCode: number
    grindSize: number
    waterTemp: number
    brewRatio: number
    steepTime: number
    aiSummary: number
    aiGeneratedAt: number
    addedAt: number
    _all: number
  }


  export type SessionSampleAvgAggregateInputType = {
    position?: true
    waterTemp?: true
    steepTime?: true
  }

  export type SessionSampleSumAggregateInputType = {
    position?: true
    waterTemp?: true
    steepTime?: true
  }

  export type SessionSampleMinAggregateInputType = {
    id?: true
    sessionId?: true
    sampleId?: true
    position?: true
    isBlind?: true
    blindCode?: true
    grindSize?: true
    waterTemp?: true
    brewRatio?: true
    steepTime?: true
    aiSummary?: true
    aiGeneratedAt?: true
    addedAt?: true
  }

  export type SessionSampleMaxAggregateInputType = {
    id?: true
    sessionId?: true
    sampleId?: true
    position?: true
    isBlind?: true
    blindCode?: true
    grindSize?: true
    waterTemp?: true
    brewRatio?: true
    steepTime?: true
    aiSummary?: true
    aiGeneratedAt?: true
    addedAt?: true
  }

  export type SessionSampleCountAggregateInputType = {
    id?: true
    sessionId?: true
    sampleId?: true
    position?: true
    isBlind?: true
    blindCode?: true
    grindSize?: true
    waterTemp?: true
    brewRatio?: true
    steepTime?: true
    aiSummary?: true
    aiGeneratedAt?: true
    addedAt?: true
    _all?: true
  }

  export type SessionSampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionSample to aggregate.
     */
    where?: SessionSampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSamples to fetch.
     */
    orderBy?: SessionSampleOrderByWithRelationInput | SessionSampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionSampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSamples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSamples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionSamples
    **/
    _count?: true | SessionSampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionSampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionSampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionSampleMaxAggregateInputType
  }

  export type GetSessionSampleAggregateType<T extends SessionSampleAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionSample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionSample[P]>
      : GetScalarType<T[P], AggregateSessionSample[P]>
  }




  export type SessionSampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionSampleWhereInput
    orderBy?: SessionSampleOrderByWithAggregationInput | SessionSampleOrderByWithAggregationInput[]
    by: SessionSampleScalarFieldEnum[] | SessionSampleScalarFieldEnum
    having?: SessionSampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionSampleCountAggregateInputType | true
    _avg?: SessionSampleAvgAggregateInputType
    _sum?: SessionSampleSumAggregateInputType
    _min?: SessionSampleMinAggregateInputType
    _max?: SessionSampleMaxAggregateInputType
  }

  export type SessionSampleGroupByOutputType = {
    id: string
    sessionId: string
    sampleId: string
    position: number
    isBlind: boolean
    blindCode: string | null
    grindSize: string | null
    waterTemp: number | null
    brewRatio: string | null
    steepTime: number | null
    aiSummary: string | null
    aiGeneratedAt: Date | null
    addedAt: Date
    _count: SessionSampleCountAggregateOutputType | null
    _avg: SessionSampleAvgAggregateOutputType | null
    _sum: SessionSampleSumAggregateOutputType | null
    _min: SessionSampleMinAggregateOutputType | null
    _max: SessionSampleMaxAggregateOutputType | null
  }

  type GetSessionSampleGroupByPayload<T extends SessionSampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionSampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionSampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionSampleGroupByOutputType[P]>
            : GetScalarType<T[P], SessionSampleGroupByOutputType[P]>
        }
      >
    >


  export type SessionSampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    sampleId?: boolean
    position?: boolean
    isBlind?: boolean
    blindCode?: boolean
    grindSize?: boolean
    waterTemp?: boolean
    brewRatio?: boolean
    steepTime?: boolean
    aiSummary?: boolean
    aiGeneratedAt?: boolean
    addedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    scores?: boolean | SessionSample$scoresArgs<ExtArgs>
    _count?: boolean | SessionSampleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionSample"]>

  export type SessionSampleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    sampleId?: boolean
    position?: boolean
    isBlind?: boolean
    blindCode?: boolean
    grindSize?: boolean
    waterTemp?: boolean
    brewRatio?: boolean
    steepTime?: boolean
    aiSummary?: boolean
    aiGeneratedAt?: boolean
    addedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionSample"]>

  export type SessionSampleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    sampleId?: boolean
    position?: boolean
    isBlind?: boolean
    blindCode?: boolean
    grindSize?: boolean
    waterTemp?: boolean
    brewRatio?: boolean
    steepTime?: boolean
    aiSummary?: boolean
    aiGeneratedAt?: boolean
    addedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionSample"]>

  export type SessionSampleSelectScalar = {
    id?: boolean
    sessionId?: boolean
    sampleId?: boolean
    position?: boolean
    isBlind?: boolean
    blindCode?: boolean
    grindSize?: boolean
    waterTemp?: boolean
    brewRatio?: boolean
    steepTime?: boolean
    aiSummary?: boolean
    aiGeneratedAt?: boolean
    addedAt?: boolean
  }

  export type SessionSampleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "sampleId" | "position" | "isBlind" | "blindCode" | "grindSize" | "waterTemp" | "brewRatio" | "steepTime" | "aiSummary" | "aiGeneratedAt" | "addedAt", ExtArgs["result"]["sessionSample"]>
  export type SessionSampleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    scores?: boolean | SessionSample$scoresArgs<ExtArgs>
    _count?: boolean | SessionSampleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionSampleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }
  export type SessionSampleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }

  export type $SessionSamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionSample"
    objects: {
      session: Prisma.$CuppingSessionPayload<ExtArgs>
      sample: Prisma.$SamplePayload<ExtArgs>
      scores: Prisma.$ScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      sampleId: string
      position: number
      isBlind: boolean
      blindCode: string | null
      grindSize: string | null
      waterTemp: number | null
      brewRatio: string | null
      steepTime: number | null
      aiSummary: string | null
      aiGeneratedAt: Date | null
      addedAt: Date
    }, ExtArgs["result"]["sessionSample"]>
    composites: {}
  }

  type SessionSampleGetPayload<S extends boolean | null | undefined | SessionSampleDefaultArgs> = $Result.GetResult<Prisma.$SessionSamplePayload, S>

  type SessionSampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionSampleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionSampleCountAggregateInputType | true
    }

  export interface SessionSampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionSample'], meta: { name: 'SessionSample' } }
    /**
     * Find zero or one SessionSample that matches the filter.
     * @param {SessionSampleFindUniqueArgs} args - Arguments to find a SessionSample
     * @example
     * // Get one SessionSample
     * const sessionSample = await prisma.sessionSample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionSampleFindUniqueArgs>(args: SelectSubset<T, SessionSampleFindUniqueArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionSample that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionSampleFindUniqueOrThrowArgs} args - Arguments to find a SessionSample
     * @example
     * // Get one SessionSample
     * const sessionSample = await prisma.sessionSample.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionSampleFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionSampleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionSample that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleFindFirstArgs} args - Arguments to find a SessionSample
     * @example
     * // Get one SessionSample
     * const sessionSample = await prisma.sessionSample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionSampleFindFirstArgs>(args?: SelectSubset<T, SessionSampleFindFirstArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionSample that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleFindFirstOrThrowArgs} args - Arguments to find a SessionSample
     * @example
     * // Get one SessionSample
     * const sessionSample = await prisma.sessionSample.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionSampleFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionSampleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionSamples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionSamples
     * const sessionSamples = await prisma.sessionSample.findMany()
     * 
     * // Get first 10 SessionSamples
     * const sessionSamples = await prisma.sessionSample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionSampleWithIdOnly = await prisma.sessionSample.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionSampleFindManyArgs>(args?: SelectSubset<T, SessionSampleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionSample.
     * @param {SessionSampleCreateArgs} args - Arguments to create a SessionSample.
     * @example
     * // Create one SessionSample
     * const SessionSample = await prisma.sessionSample.create({
     *   data: {
     *     // ... data to create a SessionSample
     *   }
     * })
     * 
     */
    create<T extends SessionSampleCreateArgs>(args: SelectSubset<T, SessionSampleCreateArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionSamples.
     * @param {SessionSampleCreateManyArgs} args - Arguments to create many SessionSamples.
     * @example
     * // Create many SessionSamples
     * const sessionSample = await prisma.sessionSample.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionSampleCreateManyArgs>(args?: SelectSubset<T, SessionSampleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionSamples and returns the data saved in the database.
     * @param {SessionSampleCreateManyAndReturnArgs} args - Arguments to create many SessionSamples.
     * @example
     * // Create many SessionSamples
     * const sessionSample = await prisma.sessionSample.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionSamples and only return the `id`
     * const sessionSampleWithIdOnly = await prisma.sessionSample.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionSampleCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionSampleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionSample.
     * @param {SessionSampleDeleteArgs} args - Arguments to delete one SessionSample.
     * @example
     * // Delete one SessionSample
     * const SessionSample = await prisma.sessionSample.delete({
     *   where: {
     *     // ... filter to delete one SessionSample
     *   }
     * })
     * 
     */
    delete<T extends SessionSampleDeleteArgs>(args: SelectSubset<T, SessionSampleDeleteArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionSample.
     * @param {SessionSampleUpdateArgs} args - Arguments to update one SessionSample.
     * @example
     * // Update one SessionSample
     * const sessionSample = await prisma.sessionSample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionSampleUpdateArgs>(args: SelectSubset<T, SessionSampleUpdateArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionSamples.
     * @param {SessionSampleDeleteManyArgs} args - Arguments to filter SessionSamples to delete.
     * @example
     * // Delete a few SessionSamples
     * const { count } = await prisma.sessionSample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionSampleDeleteManyArgs>(args?: SelectSubset<T, SessionSampleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionSamples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionSamples
     * const sessionSample = await prisma.sessionSample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionSampleUpdateManyArgs>(args: SelectSubset<T, SessionSampleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionSamples and returns the data updated in the database.
     * @param {SessionSampleUpdateManyAndReturnArgs} args - Arguments to update many SessionSamples.
     * @example
     * // Update many SessionSamples
     * const sessionSample = await prisma.sessionSample.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionSamples and only return the `id`
     * const sessionSampleWithIdOnly = await prisma.sessionSample.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionSampleUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionSampleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionSample.
     * @param {SessionSampleUpsertArgs} args - Arguments to update or create a SessionSample.
     * @example
     * // Update or create a SessionSample
     * const sessionSample = await prisma.sessionSample.upsert({
     *   create: {
     *     // ... data to create a SessionSample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionSample we want to update
     *   }
     * })
     */
    upsert<T extends SessionSampleUpsertArgs>(args: SelectSubset<T, SessionSampleUpsertArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionSamples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleCountArgs} args - Arguments to filter SessionSamples to count.
     * @example
     * // Count the number of SessionSamples
     * const count = await prisma.sessionSample.count({
     *   where: {
     *     // ... the filter for the SessionSamples we want to count
     *   }
     * })
    **/
    count<T extends SessionSampleCountArgs>(
      args?: Subset<T, SessionSampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionSampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionSample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionSampleAggregateArgs>(args: Subset<T, SessionSampleAggregateArgs>): Prisma.PrismaPromise<GetSessionSampleAggregateType<T>>

    /**
     * Group by SessionSample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionSampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionSampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionSampleGroupByArgs['orderBy'] }
        : { orderBy?: SessionSampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionSampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionSampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionSample model
   */
  readonly fields: SessionSampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionSample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionSampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends CuppingSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSessionDefaultArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scores<T extends SessionSample$scoresArgs<ExtArgs> = {}>(args?: Subset<T, SessionSample$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionSample model
   */
  interface SessionSampleFieldRefs {
    readonly id: FieldRef<"SessionSample", 'String'>
    readonly sessionId: FieldRef<"SessionSample", 'String'>
    readonly sampleId: FieldRef<"SessionSample", 'String'>
    readonly position: FieldRef<"SessionSample", 'Int'>
    readonly isBlind: FieldRef<"SessionSample", 'Boolean'>
    readonly blindCode: FieldRef<"SessionSample", 'String'>
    readonly grindSize: FieldRef<"SessionSample", 'String'>
    readonly waterTemp: FieldRef<"SessionSample", 'Float'>
    readonly brewRatio: FieldRef<"SessionSample", 'String'>
    readonly steepTime: FieldRef<"SessionSample", 'Int'>
    readonly aiSummary: FieldRef<"SessionSample", 'String'>
    readonly aiGeneratedAt: FieldRef<"SessionSample", 'DateTime'>
    readonly addedAt: FieldRef<"SessionSample", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionSample findUnique
   */
  export type SessionSampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * Filter, which SessionSample to fetch.
     */
    where: SessionSampleWhereUniqueInput
  }

  /**
   * SessionSample findUniqueOrThrow
   */
  export type SessionSampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * Filter, which SessionSample to fetch.
     */
    where: SessionSampleWhereUniqueInput
  }

  /**
   * SessionSample findFirst
   */
  export type SessionSampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * Filter, which SessionSample to fetch.
     */
    where?: SessionSampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSamples to fetch.
     */
    orderBy?: SessionSampleOrderByWithRelationInput | SessionSampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionSamples.
     */
    cursor?: SessionSampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSamples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSamples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionSamples.
     */
    distinct?: SessionSampleScalarFieldEnum | SessionSampleScalarFieldEnum[]
  }

  /**
   * SessionSample findFirstOrThrow
   */
  export type SessionSampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * Filter, which SessionSample to fetch.
     */
    where?: SessionSampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSamples to fetch.
     */
    orderBy?: SessionSampleOrderByWithRelationInput | SessionSampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionSamples.
     */
    cursor?: SessionSampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSamples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSamples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionSamples.
     */
    distinct?: SessionSampleScalarFieldEnum | SessionSampleScalarFieldEnum[]
  }

  /**
   * SessionSample findMany
   */
  export type SessionSampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * Filter, which SessionSamples to fetch.
     */
    where?: SessionSampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionSamples to fetch.
     */
    orderBy?: SessionSampleOrderByWithRelationInput | SessionSampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionSamples.
     */
    cursor?: SessionSampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionSamples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionSamples.
     */
    skip?: number
    distinct?: SessionSampleScalarFieldEnum | SessionSampleScalarFieldEnum[]
  }

  /**
   * SessionSample create
   */
  export type SessionSampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionSample.
     */
    data: XOR<SessionSampleCreateInput, SessionSampleUncheckedCreateInput>
  }

  /**
   * SessionSample createMany
   */
  export type SessionSampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionSamples.
     */
    data: SessionSampleCreateManyInput | SessionSampleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionSample createManyAndReturn
   */
  export type SessionSampleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * The data used to create many SessionSamples.
     */
    data: SessionSampleCreateManyInput | SessionSampleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionSample update
   */
  export type SessionSampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionSample.
     */
    data: XOR<SessionSampleUpdateInput, SessionSampleUncheckedUpdateInput>
    /**
     * Choose, which SessionSample to update.
     */
    where: SessionSampleWhereUniqueInput
  }

  /**
   * SessionSample updateMany
   */
  export type SessionSampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionSamples.
     */
    data: XOR<SessionSampleUpdateManyMutationInput, SessionSampleUncheckedUpdateManyInput>
    /**
     * Filter which SessionSamples to update
     */
    where?: SessionSampleWhereInput
    /**
     * Limit how many SessionSamples to update.
     */
    limit?: number
  }

  /**
   * SessionSample updateManyAndReturn
   */
  export type SessionSampleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * The data used to update SessionSamples.
     */
    data: XOR<SessionSampleUpdateManyMutationInput, SessionSampleUncheckedUpdateManyInput>
    /**
     * Filter which SessionSamples to update
     */
    where?: SessionSampleWhereInput
    /**
     * Limit how many SessionSamples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionSample upsert
   */
  export type SessionSampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionSample to update in case it exists.
     */
    where: SessionSampleWhereUniqueInput
    /**
     * In case the SessionSample found by the `where` argument doesn't exist, create a new SessionSample with this data.
     */
    create: XOR<SessionSampleCreateInput, SessionSampleUncheckedCreateInput>
    /**
     * In case the SessionSample was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionSampleUpdateInput, SessionSampleUncheckedUpdateInput>
  }

  /**
   * SessionSample delete
   */
  export type SessionSampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
    /**
     * Filter which SessionSample to delete.
     */
    where: SessionSampleWhereUniqueInput
  }

  /**
   * SessionSample deleteMany
   */
  export type SessionSampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionSamples to delete
     */
    where?: SessionSampleWhereInput
    /**
     * Limit how many SessionSamples to delete.
     */
    limit?: number
  }

  /**
   * SessionSample.scores
   */
  export type SessionSample$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * SessionSample without action
   */
  export type SessionSampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionSample
     */
    select?: SessionSampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionSample
     */
    omit?: SessionSampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionSampleInclude<ExtArgs> | null
  }


  /**
   * Model Score
   */

  export type AggregateScore = {
    _count: ScoreCountAggregateOutputType | null
    _avg: ScoreAvgAggregateOutputType | null
    _sum: ScoreSumAggregateOutputType | null
    _min: ScoreMinAggregateOutputType | null
    _max: ScoreMaxAggregateOutputType | null
  }

  export type ScoreAvgAggregateOutputType = {
    totalScore: number | null
    maxScore: number | null
    aroma: number | null
    flavor: number | null
    aftertaste: number | null
    acidity: number | null
    body: number | null
    balance: number | null
    sweetness: number | null
    cleanliness: number | null
    uniformity: number | null
    overall: number | null
  }

  export type ScoreSumAggregateOutputType = {
    totalScore: number | null
    maxScore: number | null
    aroma: number | null
    flavor: number | null
    aftertaste: number | null
    acidity: number | null
    body: number | null
    balance: number | null
    sweetness: number | null
    cleanliness: number | null
    uniformity: number | null
    overall: number | null
  }

  export type ScoreMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    sessionSampleId: string | null
    sampleId: string | null
    userId: string | null
    totalScore: number | null
    maxScore: number | null
    aroma: number | null
    flavor: number | null
    aftertaste: number | null
    acidity: number | null
    body: number | null
    balance: number | null
    sweetness: number | null
    cleanliness: number | null
    uniformity: number | null
    overall: number | null
    notes: string | null
    privateNotes: string | null
    voiceNotes: string | null
    voiceFileUrl: string | null
    isComplete: boolean | null
    isSubmitted: boolean | null
    submittedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScoreMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    sessionSampleId: string | null
    sampleId: string | null
    userId: string | null
    totalScore: number | null
    maxScore: number | null
    aroma: number | null
    flavor: number | null
    aftertaste: number | null
    acidity: number | null
    body: number | null
    balance: number | null
    sweetness: number | null
    cleanliness: number | null
    uniformity: number | null
    overall: number | null
    notes: string | null
    privateNotes: string | null
    voiceNotes: string | null
    voiceFileUrl: string | null
    isComplete: boolean | null
    isSubmitted: boolean | null
    submittedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScoreCountAggregateOutputType = {
    id: number
    sessionId: number
    sessionSampleId: number
    sampleId: number
    userId: number
    totalScore: number
    maxScore: number
    scores: number
    aroma: number
    flavor: number
    aftertaste: number
    acidity: number
    body: number
    balance: number
    sweetness: number
    cleanliness: number
    uniformity: number
    overall: number
    defects: number
    notes: number
    privateNotes: number
    voiceNotes: number
    voiceFileUrl: number
    isComplete: number
    isSubmitted: number
    submittedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScoreAvgAggregateInputType = {
    totalScore?: true
    maxScore?: true
    aroma?: true
    flavor?: true
    aftertaste?: true
    acidity?: true
    body?: true
    balance?: true
    sweetness?: true
    cleanliness?: true
    uniformity?: true
    overall?: true
  }

  export type ScoreSumAggregateInputType = {
    totalScore?: true
    maxScore?: true
    aroma?: true
    flavor?: true
    aftertaste?: true
    acidity?: true
    body?: true
    balance?: true
    sweetness?: true
    cleanliness?: true
    uniformity?: true
    overall?: true
  }

  export type ScoreMinAggregateInputType = {
    id?: true
    sessionId?: true
    sessionSampleId?: true
    sampleId?: true
    userId?: true
    totalScore?: true
    maxScore?: true
    aroma?: true
    flavor?: true
    aftertaste?: true
    acidity?: true
    body?: true
    balance?: true
    sweetness?: true
    cleanliness?: true
    uniformity?: true
    overall?: true
    notes?: true
    privateNotes?: true
    voiceNotes?: true
    voiceFileUrl?: true
    isComplete?: true
    isSubmitted?: true
    submittedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScoreMaxAggregateInputType = {
    id?: true
    sessionId?: true
    sessionSampleId?: true
    sampleId?: true
    userId?: true
    totalScore?: true
    maxScore?: true
    aroma?: true
    flavor?: true
    aftertaste?: true
    acidity?: true
    body?: true
    balance?: true
    sweetness?: true
    cleanliness?: true
    uniformity?: true
    overall?: true
    notes?: true
    privateNotes?: true
    voiceNotes?: true
    voiceFileUrl?: true
    isComplete?: true
    isSubmitted?: true
    submittedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScoreCountAggregateInputType = {
    id?: true
    sessionId?: true
    sessionSampleId?: true
    sampleId?: true
    userId?: true
    totalScore?: true
    maxScore?: true
    scores?: true
    aroma?: true
    flavor?: true
    aftertaste?: true
    acidity?: true
    body?: true
    balance?: true
    sweetness?: true
    cleanliness?: true
    uniformity?: true
    overall?: true
    defects?: true
    notes?: true
    privateNotes?: true
    voiceNotes?: true
    voiceFileUrl?: true
    isComplete?: true
    isSubmitted?: true
    submittedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Score to aggregate.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scores
    **/
    _count?: true | ScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreMaxAggregateInputType
  }

  export type GetScoreAggregateType<T extends ScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScore[P]>
      : GetScalarType<T[P], AggregateScore[P]>
  }




  export type ScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithAggregationInput | ScoreOrderByWithAggregationInput[]
    by: ScoreScalarFieldEnum[] | ScoreScalarFieldEnum
    having?: ScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreCountAggregateInputType | true
    _avg?: ScoreAvgAggregateInputType
    _sum?: ScoreSumAggregateInputType
    _min?: ScoreMinAggregateInputType
    _max?: ScoreMaxAggregateInputType
  }

  export type ScoreGroupByOutputType = {
    id: string
    sessionId: string
    sessionSampleId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore: number
    scores: JsonValue
    aroma: number | null
    flavor: number | null
    aftertaste: number | null
    acidity: number | null
    body: number | null
    balance: number | null
    sweetness: number | null
    cleanliness: number | null
    uniformity: number | null
    overall: number | null
    defects: JsonValue
    notes: string | null
    privateNotes: string | null
    voiceNotes: string | null
    voiceFileUrl: string | null
    isComplete: boolean
    isSubmitted: boolean
    submittedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ScoreCountAggregateOutputType | null
    _avg: ScoreAvgAggregateOutputType | null
    _sum: ScoreSumAggregateOutputType | null
    _min: ScoreMinAggregateOutputType | null
    _max: ScoreMaxAggregateOutputType | null
  }

  type GetScoreGroupByPayload<T extends ScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreGroupByOutputType[P]>
        }
      >
    >


  export type ScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    sessionSampleId?: boolean
    sampleId?: boolean
    userId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    scores?: boolean
    aroma?: boolean
    flavor?: boolean
    aftertaste?: boolean
    acidity?: boolean
    body?: boolean
    balance?: boolean
    sweetness?: boolean
    cleanliness?: boolean
    uniformity?: boolean
    overall?: boolean
    defects?: boolean
    notes?: boolean
    privateNotes?: boolean
    voiceNotes?: boolean
    voiceFileUrl?: boolean
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sessionSample?: boolean | SessionSampleDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    flavorDescriptors?: boolean | Score$flavorDescriptorsArgs<ExtArgs>
    _count?: boolean | ScoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    sessionSampleId?: boolean
    sampleId?: boolean
    userId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    scores?: boolean
    aroma?: boolean
    flavor?: boolean
    aftertaste?: boolean
    acidity?: boolean
    body?: boolean
    balance?: boolean
    sweetness?: boolean
    cleanliness?: boolean
    uniformity?: boolean
    overall?: boolean
    defects?: boolean
    notes?: boolean
    privateNotes?: boolean
    voiceNotes?: boolean
    voiceFileUrl?: boolean
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sessionSample?: boolean | SessionSampleDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    sessionSampleId?: boolean
    sampleId?: boolean
    userId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    scores?: boolean
    aroma?: boolean
    flavor?: boolean
    aftertaste?: boolean
    acidity?: boolean
    body?: boolean
    balance?: boolean
    sweetness?: boolean
    cleanliness?: boolean
    uniformity?: boolean
    overall?: boolean
    defects?: boolean
    notes?: boolean
    privateNotes?: boolean
    voiceNotes?: boolean
    voiceFileUrl?: boolean
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sessionSample?: boolean | SessionSampleDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectScalar = {
    id?: boolean
    sessionId?: boolean
    sessionSampleId?: boolean
    sampleId?: boolean
    userId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    scores?: boolean
    aroma?: boolean
    flavor?: boolean
    aftertaste?: boolean
    acidity?: boolean
    body?: boolean
    balance?: boolean
    sweetness?: boolean
    cleanliness?: boolean
    uniformity?: boolean
    overall?: boolean
    defects?: boolean
    notes?: boolean
    privateNotes?: boolean
    voiceNotes?: boolean
    voiceFileUrl?: boolean
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "sessionSampleId" | "sampleId" | "userId" | "totalScore" | "maxScore" | "scores" | "aroma" | "flavor" | "aftertaste" | "acidity" | "body" | "balance" | "sweetness" | "cleanliness" | "uniformity" | "overall" | "defects" | "notes" | "privateNotes" | "voiceNotes" | "voiceFileUrl" | "isComplete" | "isSubmitted" | "submittedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["score"]>
  export type ScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sessionSample?: boolean | SessionSampleDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    flavorDescriptors?: boolean | Score$flavorDescriptorsArgs<ExtArgs>
    _count?: boolean | ScoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sessionSample?: boolean | SessionSampleDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | CuppingSessionDefaultArgs<ExtArgs>
    sessionSample?: boolean | SessionSampleDefaultArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Score"
    objects: {
      session: Prisma.$CuppingSessionPayload<ExtArgs>
      sessionSample: Prisma.$SessionSamplePayload<ExtArgs>
      sample: Prisma.$SamplePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      flavorDescriptors: Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      sessionSampleId: string
      sampleId: string
      userId: string
      totalScore: number
      maxScore: number
      scores: Prisma.JsonValue
      aroma: number | null
      flavor: number | null
      aftertaste: number | null
      acidity: number | null
      body: number | null
      balance: number | null
      sweetness: number | null
      cleanliness: number | null
      uniformity: number | null
      overall: number | null
      defects: Prisma.JsonValue
      notes: string | null
      privateNotes: string | null
      voiceNotes: string | null
      voiceFileUrl: string | null
      isComplete: boolean
      isSubmitted: boolean
      submittedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["score"]>
    composites: {}
  }

  type ScoreGetPayload<S extends boolean | null | undefined | ScoreDefaultArgs> = $Result.GetResult<Prisma.$ScorePayload, S>

  type ScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreCountAggregateInputType | true
    }

  export interface ScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Score'], meta: { name: 'Score' } }
    /**
     * Find zero or one Score that matches the filter.
     * @param {ScoreFindUniqueArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreFindUniqueArgs>(args: SelectSubset<T, ScoreFindUniqueArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Score that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreFindUniqueOrThrowArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Score that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindFirstArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreFindFirstArgs>(args?: SelectSubset<T, ScoreFindFirstArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Score that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindFirstOrThrowArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Scores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scores
     * const scores = await prisma.score.findMany()
     * 
     * // Get first 10 Scores
     * const scores = await prisma.score.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreWithIdOnly = await prisma.score.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreFindManyArgs>(args?: SelectSubset<T, ScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Score.
     * @param {ScoreCreateArgs} args - Arguments to create a Score.
     * @example
     * // Create one Score
     * const Score = await prisma.score.create({
     *   data: {
     *     // ... data to create a Score
     *   }
     * })
     * 
     */
    create<T extends ScoreCreateArgs>(args: SelectSubset<T, ScoreCreateArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Scores.
     * @param {ScoreCreateManyArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const score = await prisma.score.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreCreateManyArgs>(args?: SelectSubset<T, ScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scores and returns the data saved in the database.
     * @param {ScoreCreateManyAndReturnArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const score = await prisma.score.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scores and only return the `id`
     * const scoreWithIdOnly = await prisma.score.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Score.
     * @param {ScoreDeleteArgs} args - Arguments to delete one Score.
     * @example
     * // Delete one Score
     * const Score = await prisma.score.delete({
     *   where: {
     *     // ... filter to delete one Score
     *   }
     * })
     * 
     */
    delete<T extends ScoreDeleteArgs>(args: SelectSubset<T, ScoreDeleteArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Score.
     * @param {ScoreUpdateArgs} args - Arguments to update one Score.
     * @example
     * // Update one Score
     * const score = await prisma.score.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreUpdateArgs>(args: SelectSubset<T, ScoreUpdateArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Scores.
     * @param {ScoreDeleteManyArgs} args - Arguments to filter Scores to delete.
     * @example
     * // Delete a few Scores
     * const { count } = await prisma.score.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreDeleteManyArgs>(args?: SelectSubset<T, ScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scores
     * const score = await prisma.score.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreUpdateManyArgs>(args: SelectSubset<T, ScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores and returns the data updated in the database.
     * @param {ScoreUpdateManyAndReturnArgs} args - Arguments to update many Scores.
     * @example
     * // Update many Scores
     * const score = await prisma.score.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Scores and only return the `id`
     * const scoreWithIdOnly = await prisma.score.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Score.
     * @param {ScoreUpsertArgs} args - Arguments to update or create a Score.
     * @example
     * // Update or create a Score
     * const score = await prisma.score.upsert({
     *   create: {
     *     // ... data to create a Score
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Score we want to update
     *   }
     * })
     */
    upsert<T extends ScoreUpsertArgs>(args: SelectSubset<T, ScoreUpsertArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCountArgs} args - Arguments to filter Scores to count.
     * @example
     * // Count the number of Scores
     * const count = await prisma.score.count({
     *   where: {
     *     // ... the filter for the Scores we want to count
     *   }
     * })
    **/
    count<T extends ScoreCountArgs>(
      args?: Subset<T, ScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreAggregateArgs>(args: Subset<T, ScoreAggregateArgs>): Prisma.PrismaPromise<GetScoreAggregateType<T>>

    /**
     * Group by Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreGroupByArgs['orderBy'] }
        : { orderBy?: ScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Score model
   */
  readonly fields: ScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Score.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends CuppingSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CuppingSessionDefaultArgs<ExtArgs>>): Prisma__CuppingSessionClient<$Result.GetResult<Prisma.$CuppingSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sessionSample<T extends SessionSampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionSampleDefaultArgs<ExtArgs>>): Prisma__SessionSampleClient<$Result.GetResult<Prisma.$SessionSamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    flavorDescriptors<T extends Score$flavorDescriptorsArgs<ExtArgs> = {}>(args?: Subset<T, Score$flavorDescriptorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Score model
   */
  interface ScoreFieldRefs {
    readonly id: FieldRef<"Score", 'String'>
    readonly sessionId: FieldRef<"Score", 'String'>
    readonly sessionSampleId: FieldRef<"Score", 'String'>
    readonly sampleId: FieldRef<"Score", 'String'>
    readonly userId: FieldRef<"Score", 'String'>
    readonly totalScore: FieldRef<"Score", 'Float'>
    readonly maxScore: FieldRef<"Score", 'Float'>
    readonly scores: FieldRef<"Score", 'Json'>
    readonly aroma: FieldRef<"Score", 'Float'>
    readonly flavor: FieldRef<"Score", 'Float'>
    readonly aftertaste: FieldRef<"Score", 'Float'>
    readonly acidity: FieldRef<"Score", 'Float'>
    readonly body: FieldRef<"Score", 'Float'>
    readonly balance: FieldRef<"Score", 'Float'>
    readonly sweetness: FieldRef<"Score", 'Float'>
    readonly cleanliness: FieldRef<"Score", 'Float'>
    readonly uniformity: FieldRef<"Score", 'Float'>
    readonly overall: FieldRef<"Score", 'Float'>
    readonly defects: FieldRef<"Score", 'Json'>
    readonly notes: FieldRef<"Score", 'String'>
    readonly privateNotes: FieldRef<"Score", 'String'>
    readonly voiceNotes: FieldRef<"Score", 'String'>
    readonly voiceFileUrl: FieldRef<"Score", 'String'>
    readonly isComplete: FieldRef<"Score", 'Boolean'>
    readonly isSubmitted: FieldRef<"Score", 'Boolean'>
    readonly submittedAt: FieldRef<"Score", 'DateTime'>
    readonly createdAt: FieldRef<"Score", 'DateTime'>
    readonly updatedAt: FieldRef<"Score", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Score findUnique
   */
  export type ScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score findUniqueOrThrow
   */
  export type ScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score findFirst
   */
  export type ScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scores.
     */
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score findFirstOrThrow
   */
  export type ScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scores.
     */
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score findMany
   */
  export type ScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Scores to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score create
   */
  export type ScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Score.
     */
    data: XOR<ScoreCreateInput, ScoreUncheckedCreateInput>
  }

  /**
   * Score createMany
   */
  export type ScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scores.
     */
    data: ScoreCreateManyInput | ScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Score createManyAndReturn
   */
  export type ScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * The data used to create many Scores.
     */
    data: ScoreCreateManyInput | ScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Score update
   */
  export type ScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Score.
     */
    data: XOR<ScoreUpdateInput, ScoreUncheckedUpdateInput>
    /**
     * Choose, which Score to update.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score updateMany
   */
  export type ScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scores.
     */
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyInput>
    /**
     * Filter which Scores to update
     */
    where?: ScoreWhereInput
    /**
     * Limit how many Scores to update.
     */
    limit?: number
  }

  /**
   * Score updateManyAndReturn
   */
  export type ScoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * The data used to update Scores.
     */
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyInput>
    /**
     * Filter which Scores to update
     */
    where?: ScoreWhereInput
    /**
     * Limit how many Scores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Score upsert
   */
  export type ScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Score to update in case it exists.
     */
    where: ScoreWhereUniqueInput
    /**
     * In case the Score found by the `where` argument doesn't exist, create a new Score with this data.
     */
    create: XOR<ScoreCreateInput, ScoreUncheckedCreateInput>
    /**
     * In case the Score was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreUpdateInput, ScoreUncheckedUpdateInput>
  }

  /**
   * Score delete
   */
  export type ScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter which Score to delete.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score deleteMany
   */
  export type ScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scores to delete
     */
    where?: ScoreWhereInput
    /**
     * Limit how many Scores to delete.
     */
    limit?: number
  }

  /**
   * Score.flavorDescriptors
   */
  export type Score$flavorDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    where?: ScoreFlavorDescriptorWhereInput
    orderBy?: ScoreFlavorDescriptorOrderByWithRelationInput | ScoreFlavorDescriptorOrderByWithRelationInput[]
    cursor?: ScoreFlavorDescriptorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreFlavorDescriptorScalarFieldEnum | ScoreFlavorDescriptorScalarFieldEnum[]
  }

  /**
   * Score without action
   */
  export type ScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
  }


  /**
   * Model FlavorDescriptor
   */

  export type AggregateFlavorDescriptor = {
    _count: FlavorDescriptorCountAggregateOutputType | null
    _min: FlavorDescriptorMinAggregateOutputType | null
    _max: FlavorDescriptorMaxAggregateOutputType | null
  }

  export type FlavorDescriptorMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: $Enums.FlavorCategory | null
    description: string | null
    isDefault: boolean | null
    organizationId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FlavorDescriptorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: $Enums.FlavorCategory | null
    description: string | null
    isDefault: boolean | null
    organizationId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FlavorDescriptorCountAggregateOutputType = {
    id: number
    name: number
    category: number
    description: number
    isDefault: number
    organizationId: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FlavorDescriptorMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    isDefault?: true
    organizationId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FlavorDescriptorMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    isDefault?: true
    organizationId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FlavorDescriptorCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    isDefault?: true
    organizationId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FlavorDescriptorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlavorDescriptor to aggregate.
     */
    where?: FlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlavorDescriptors to fetch.
     */
    orderBy?: FlavorDescriptorOrderByWithRelationInput | FlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlavorDescriptors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlavorDescriptors
    **/
    _count?: true | FlavorDescriptorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlavorDescriptorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlavorDescriptorMaxAggregateInputType
  }

  export type GetFlavorDescriptorAggregateType<T extends FlavorDescriptorAggregateArgs> = {
        [P in keyof T & keyof AggregateFlavorDescriptor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlavorDescriptor[P]>
      : GetScalarType<T[P], AggregateFlavorDescriptor[P]>
  }




  export type FlavorDescriptorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlavorDescriptorWhereInput
    orderBy?: FlavorDescriptorOrderByWithAggregationInput | FlavorDescriptorOrderByWithAggregationInput[]
    by: FlavorDescriptorScalarFieldEnum[] | FlavorDescriptorScalarFieldEnum
    having?: FlavorDescriptorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlavorDescriptorCountAggregateInputType | true
    _min?: FlavorDescriptorMinAggregateInputType
    _max?: FlavorDescriptorMaxAggregateInputType
  }

  export type FlavorDescriptorGroupByOutputType = {
    id: string
    name: string
    category: $Enums.FlavorCategory
    description: string | null
    isDefault: boolean
    organizationId: string | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: FlavorDescriptorCountAggregateOutputType | null
    _min: FlavorDescriptorMinAggregateOutputType | null
    _max: FlavorDescriptorMaxAggregateOutputType | null
  }

  type GetFlavorDescriptorGroupByPayload<T extends FlavorDescriptorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlavorDescriptorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlavorDescriptorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlavorDescriptorGroupByOutputType[P]>
            : GetScalarType<T[P], FlavorDescriptorGroupByOutputType[P]>
        }
      >
    >


  export type FlavorDescriptorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isDefault?: boolean
    organizationId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | FlavorDescriptor$organizationArgs<ExtArgs>
    creator?: boolean | FlavorDescriptor$creatorArgs<ExtArgs>
    scoreDescriptors?: boolean | FlavorDescriptor$scoreDescriptorsArgs<ExtArgs>
    _count?: boolean | FlavorDescriptorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flavorDescriptor"]>

  export type FlavorDescriptorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isDefault?: boolean
    organizationId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | FlavorDescriptor$organizationArgs<ExtArgs>
    creator?: boolean | FlavorDescriptor$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["flavorDescriptor"]>

  export type FlavorDescriptorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isDefault?: boolean
    organizationId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | FlavorDescriptor$organizationArgs<ExtArgs>
    creator?: boolean | FlavorDescriptor$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["flavorDescriptor"]>

  export type FlavorDescriptorSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isDefault?: boolean
    organizationId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FlavorDescriptorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "description" | "isDefault" | "organizationId" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["flavorDescriptor"]>
  export type FlavorDescriptorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | FlavorDescriptor$organizationArgs<ExtArgs>
    creator?: boolean | FlavorDescriptor$creatorArgs<ExtArgs>
    scoreDescriptors?: boolean | FlavorDescriptor$scoreDescriptorsArgs<ExtArgs>
    _count?: boolean | FlavorDescriptorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlavorDescriptorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | FlavorDescriptor$organizationArgs<ExtArgs>
    creator?: boolean | FlavorDescriptor$creatorArgs<ExtArgs>
  }
  export type FlavorDescriptorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | FlavorDescriptor$organizationArgs<ExtArgs>
    creator?: boolean | FlavorDescriptor$creatorArgs<ExtArgs>
  }

  export type $FlavorDescriptorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlavorDescriptor"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      creator: Prisma.$UserPayload<ExtArgs> | null
      scoreDescriptors: Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: $Enums.FlavorCategory
      description: string | null
      isDefault: boolean
      organizationId: string | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["flavorDescriptor"]>
    composites: {}
  }

  type FlavorDescriptorGetPayload<S extends boolean | null | undefined | FlavorDescriptorDefaultArgs> = $Result.GetResult<Prisma.$FlavorDescriptorPayload, S>

  type FlavorDescriptorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlavorDescriptorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlavorDescriptorCountAggregateInputType | true
    }

  export interface FlavorDescriptorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlavorDescriptor'], meta: { name: 'FlavorDescriptor' } }
    /**
     * Find zero or one FlavorDescriptor that matches the filter.
     * @param {FlavorDescriptorFindUniqueArgs} args - Arguments to find a FlavorDescriptor
     * @example
     * // Get one FlavorDescriptor
     * const flavorDescriptor = await prisma.flavorDescriptor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlavorDescriptorFindUniqueArgs>(args: SelectSubset<T, FlavorDescriptorFindUniqueArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlavorDescriptor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlavorDescriptorFindUniqueOrThrowArgs} args - Arguments to find a FlavorDescriptor
     * @example
     * // Get one FlavorDescriptor
     * const flavorDescriptor = await prisma.flavorDescriptor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlavorDescriptorFindUniqueOrThrowArgs>(args: SelectSubset<T, FlavorDescriptorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlavorDescriptor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorFindFirstArgs} args - Arguments to find a FlavorDescriptor
     * @example
     * // Get one FlavorDescriptor
     * const flavorDescriptor = await prisma.flavorDescriptor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlavorDescriptorFindFirstArgs>(args?: SelectSubset<T, FlavorDescriptorFindFirstArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlavorDescriptor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorFindFirstOrThrowArgs} args - Arguments to find a FlavorDescriptor
     * @example
     * // Get one FlavorDescriptor
     * const flavorDescriptor = await prisma.flavorDescriptor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlavorDescriptorFindFirstOrThrowArgs>(args?: SelectSubset<T, FlavorDescriptorFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlavorDescriptors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlavorDescriptors
     * const flavorDescriptors = await prisma.flavorDescriptor.findMany()
     * 
     * // Get first 10 FlavorDescriptors
     * const flavorDescriptors = await prisma.flavorDescriptor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flavorDescriptorWithIdOnly = await prisma.flavorDescriptor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlavorDescriptorFindManyArgs>(args?: SelectSubset<T, FlavorDescriptorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlavorDescriptor.
     * @param {FlavorDescriptorCreateArgs} args - Arguments to create a FlavorDescriptor.
     * @example
     * // Create one FlavorDescriptor
     * const FlavorDescriptor = await prisma.flavorDescriptor.create({
     *   data: {
     *     // ... data to create a FlavorDescriptor
     *   }
     * })
     * 
     */
    create<T extends FlavorDescriptorCreateArgs>(args: SelectSubset<T, FlavorDescriptorCreateArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlavorDescriptors.
     * @param {FlavorDescriptorCreateManyArgs} args - Arguments to create many FlavorDescriptors.
     * @example
     * // Create many FlavorDescriptors
     * const flavorDescriptor = await prisma.flavorDescriptor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlavorDescriptorCreateManyArgs>(args?: SelectSubset<T, FlavorDescriptorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlavorDescriptors and returns the data saved in the database.
     * @param {FlavorDescriptorCreateManyAndReturnArgs} args - Arguments to create many FlavorDescriptors.
     * @example
     * // Create many FlavorDescriptors
     * const flavorDescriptor = await prisma.flavorDescriptor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlavorDescriptors and only return the `id`
     * const flavorDescriptorWithIdOnly = await prisma.flavorDescriptor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlavorDescriptorCreateManyAndReturnArgs>(args?: SelectSubset<T, FlavorDescriptorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlavorDescriptor.
     * @param {FlavorDescriptorDeleteArgs} args - Arguments to delete one FlavorDescriptor.
     * @example
     * // Delete one FlavorDescriptor
     * const FlavorDescriptor = await prisma.flavorDescriptor.delete({
     *   where: {
     *     // ... filter to delete one FlavorDescriptor
     *   }
     * })
     * 
     */
    delete<T extends FlavorDescriptorDeleteArgs>(args: SelectSubset<T, FlavorDescriptorDeleteArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlavorDescriptor.
     * @param {FlavorDescriptorUpdateArgs} args - Arguments to update one FlavorDescriptor.
     * @example
     * // Update one FlavorDescriptor
     * const flavorDescriptor = await prisma.flavorDescriptor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlavorDescriptorUpdateArgs>(args: SelectSubset<T, FlavorDescriptorUpdateArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlavorDescriptors.
     * @param {FlavorDescriptorDeleteManyArgs} args - Arguments to filter FlavorDescriptors to delete.
     * @example
     * // Delete a few FlavorDescriptors
     * const { count } = await prisma.flavorDescriptor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlavorDescriptorDeleteManyArgs>(args?: SelectSubset<T, FlavorDescriptorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlavorDescriptors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlavorDescriptors
     * const flavorDescriptor = await prisma.flavorDescriptor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlavorDescriptorUpdateManyArgs>(args: SelectSubset<T, FlavorDescriptorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlavorDescriptors and returns the data updated in the database.
     * @param {FlavorDescriptorUpdateManyAndReturnArgs} args - Arguments to update many FlavorDescriptors.
     * @example
     * // Update many FlavorDescriptors
     * const flavorDescriptor = await prisma.flavorDescriptor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlavorDescriptors and only return the `id`
     * const flavorDescriptorWithIdOnly = await prisma.flavorDescriptor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlavorDescriptorUpdateManyAndReturnArgs>(args: SelectSubset<T, FlavorDescriptorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlavorDescriptor.
     * @param {FlavorDescriptorUpsertArgs} args - Arguments to update or create a FlavorDescriptor.
     * @example
     * // Update or create a FlavorDescriptor
     * const flavorDescriptor = await prisma.flavorDescriptor.upsert({
     *   create: {
     *     // ... data to create a FlavorDescriptor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlavorDescriptor we want to update
     *   }
     * })
     */
    upsert<T extends FlavorDescriptorUpsertArgs>(args: SelectSubset<T, FlavorDescriptorUpsertArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlavorDescriptors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorCountArgs} args - Arguments to filter FlavorDescriptors to count.
     * @example
     * // Count the number of FlavorDescriptors
     * const count = await prisma.flavorDescriptor.count({
     *   where: {
     *     // ... the filter for the FlavorDescriptors we want to count
     *   }
     * })
    **/
    count<T extends FlavorDescriptorCountArgs>(
      args?: Subset<T, FlavorDescriptorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlavorDescriptorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlavorDescriptor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlavorDescriptorAggregateArgs>(args: Subset<T, FlavorDescriptorAggregateArgs>): Prisma.PrismaPromise<GetFlavorDescriptorAggregateType<T>>

    /**
     * Group by FlavorDescriptor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlavorDescriptorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlavorDescriptorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlavorDescriptorGroupByArgs['orderBy'] }
        : { orderBy?: FlavorDescriptorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlavorDescriptorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlavorDescriptorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlavorDescriptor model
   */
  readonly fields: FlavorDescriptorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlavorDescriptor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlavorDescriptorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends FlavorDescriptor$organizationArgs<ExtArgs> = {}>(args?: Subset<T, FlavorDescriptor$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    creator<T extends FlavorDescriptor$creatorArgs<ExtArgs> = {}>(args?: Subset<T, FlavorDescriptor$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    scoreDescriptors<T extends FlavorDescriptor$scoreDescriptorsArgs<ExtArgs> = {}>(args?: Subset<T, FlavorDescriptor$scoreDescriptorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlavorDescriptor model
   */
  interface FlavorDescriptorFieldRefs {
    readonly id: FieldRef<"FlavorDescriptor", 'String'>
    readonly name: FieldRef<"FlavorDescriptor", 'String'>
    readonly category: FieldRef<"FlavorDescriptor", 'FlavorCategory'>
    readonly description: FieldRef<"FlavorDescriptor", 'String'>
    readonly isDefault: FieldRef<"FlavorDescriptor", 'Boolean'>
    readonly organizationId: FieldRef<"FlavorDescriptor", 'String'>
    readonly createdBy: FieldRef<"FlavorDescriptor", 'String'>
    readonly createdAt: FieldRef<"FlavorDescriptor", 'DateTime'>
    readonly updatedAt: FieldRef<"FlavorDescriptor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FlavorDescriptor findUnique
   */
  export type FlavorDescriptorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which FlavorDescriptor to fetch.
     */
    where: FlavorDescriptorWhereUniqueInput
  }

  /**
   * FlavorDescriptor findUniqueOrThrow
   */
  export type FlavorDescriptorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which FlavorDescriptor to fetch.
     */
    where: FlavorDescriptorWhereUniqueInput
  }

  /**
   * FlavorDescriptor findFirst
   */
  export type FlavorDescriptorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which FlavorDescriptor to fetch.
     */
    where?: FlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlavorDescriptors to fetch.
     */
    orderBy?: FlavorDescriptorOrderByWithRelationInput | FlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlavorDescriptors.
     */
    cursor?: FlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlavorDescriptors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlavorDescriptors.
     */
    distinct?: FlavorDescriptorScalarFieldEnum | FlavorDescriptorScalarFieldEnum[]
  }

  /**
   * FlavorDescriptor findFirstOrThrow
   */
  export type FlavorDescriptorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which FlavorDescriptor to fetch.
     */
    where?: FlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlavorDescriptors to fetch.
     */
    orderBy?: FlavorDescriptorOrderByWithRelationInput | FlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlavorDescriptors.
     */
    cursor?: FlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlavorDescriptors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlavorDescriptors.
     */
    distinct?: FlavorDescriptorScalarFieldEnum | FlavorDescriptorScalarFieldEnum[]
  }

  /**
   * FlavorDescriptor findMany
   */
  export type FlavorDescriptorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which FlavorDescriptors to fetch.
     */
    where?: FlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlavorDescriptors to fetch.
     */
    orderBy?: FlavorDescriptorOrderByWithRelationInput | FlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlavorDescriptors.
     */
    cursor?: FlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlavorDescriptors.
     */
    skip?: number
    distinct?: FlavorDescriptorScalarFieldEnum | FlavorDescriptorScalarFieldEnum[]
  }

  /**
   * FlavorDescriptor create
   */
  export type FlavorDescriptorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * The data needed to create a FlavorDescriptor.
     */
    data: XOR<FlavorDescriptorCreateInput, FlavorDescriptorUncheckedCreateInput>
  }

  /**
   * FlavorDescriptor createMany
   */
  export type FlavorDescriptorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlavorDescriptors.
     */
    data: FlavorDescriptorCreateManyInput | FlavorDescriptorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlavorDescriptor createManyAndReturn
   */
  export type FlavorDescriptorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * The data used to create many FlavorDescriptors.
     */
    data: FlavorDescriptorCreateManyInput | FlavorDescriptorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlavorDescriptor update
   */
  export type FlavorDescriptorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * The data needed to update a FlavorDescriptor.
     */
    data: XOR<FlavorDescriptorUpdateInput, FlavorDescriptorUncheckedUpdateInput>
    /**
     * Choose, which FlavorDescriptor to update.
     */
    where: FlavorDescriptorWhereUniqueInput
  }

  /**
   * FlavorDescriptor updateMany
   */
  export type FlavorDescriptorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlavorDescriptors.
     */
    data: XOR<FlavorDescriptorUpdateManyMutationInput, FlavorDescriptorUncheckedUpdateManyInput>
    /**
     * Filter which FlavorDescriptors to update
     */
    where?: FlavorDescriptorWhereInput
    /**
     * Limit how many FlavorDescriptors to update.
     */
    limit?: number
  }

  /**
   * FlavorDescriptor updateManyAndReturn
   */
  export type FlavorDescriptorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * The data used to update FlavorDescriptors.
     */
    data: XOR<FlavorDescriptorUpdateManyMutationInput, FlavorDescriptorUncheckedUpdateManyInput>
    /**
     * Filter which FlavorDescriptors to update
     */
    where?: FlavorDescriptorWhereInput
    /**
     * Limit how many FlavorDescriptors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlavorDescriptor upsert
   */
  export type FlavorDescriptorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * The filter to search for the FlavorDescriptor to update in case it exists.
     */
    where: FlavorDescriptorWhereUniqueInput
    /**
     * In case the FlavorDescriptor found by the `where` argument doesn't exist, create a new FlavorDescriptor with this data.
     */
    create: XOR<FlavorDescriptorCreateInput, FlavorDescriptorUncheckedCreateInput>
    /**
     * In case the FlavorDescriptor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlavorDescriptorUpdateInput, FlavorDescriptorUncheckedUpdateInput>
  }

  /**
   * FlavorDescriptor delete
   */
  export type FlavorDescriptorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter which FlavorDescriptor to delete.
     */
    where: FlavorDescriptorWhereUniqueInput
  }

  /**
   * FlavorDescriptor deleteMany
   */
  export type FlavorDescriptorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlavorDescriptors to delete
     */
    where?: FlavorDescriptorWhereInput
    /**
     * Limit how many FlavorDescriptors to delete.
     */
    limit?: number
  }

  /**
   * FlavorDescriptor.organization
   */
  export type FlavorDescriptor$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * FlavorDescriptor.creator
   */
  export type FlavorDescriptor$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FlavorDescriptor.scoreDescriptors
   */
  export type FlavorDescriptor$scoreDescriptorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    where?: ScoreFlavorDescriptorWhereInput
    orderBy?: ScoreFlavorDescriptorOrderByWithRelationInput | ScoreFlavorDescriptorOrderByWithRelationInput[]
    cursor?: ScoreFlavorDescriptorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreFlavorDescriptorScalarFieldEnum | ScoreFlavorDescriptorScalarFieldEnum[]
  }

  /**
   * FlavorDescriptor without action
   */
  export type FlavorDescriptorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlavorDescriptor
     */
    select?: FlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlavorDescriptor
     */
    omit?: FlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlavorDescriptorInclude<ExtArgs> | null
  }


  /**
   * Model ScoreFlavorDescriptor
   */

  export type AggregateScoreFlavorDescriptor = {
    _count: ScoreFlavorDescriptorCountAggregateOutputType | null
    _avg: ScoreFlavorDescriptorAvgAggregateOutputType | null
    _sum: ScoreFlavorDescriptorSumAggregateOutputType | null
    _min: ScoreFlavorDescriptorMinAggregateOutputType | null
    _max: ScoreFlavorDescriptorMaxAggregateOutputType | null
  }

  export type ScoreFlavorDescriptorAvgAggregateOutputType = {
    intensity: number | null
  }

  export type ScoreFlavorDescriptorSumAggregateOutputType = {
    intensity: number | null
  }

  export type ScoreFlavorDescriptorMinAggregateOutputType = {
    id: string | null
    scoreId: string | null
    flavorDescriptorId: string | null
    intensity: number | null
    createdAt: Date | null
  }

  export type ScoreFlavorDescriptorMaxAggregateOutputType = {
    id: string | null
    scoreId: string | null
    flavorDescriptorId: string | null
    intensity: number | null
    createdAt: Date | null
  }

  export type ScoreFlavorDescriptorCountAggregateOutputType = {
    id: number
    scoreId: number
    flavorDescriptorId: number
    intensity: number
    createdAt: number
    _all: number
  }


  export type ScoreFlavorDescriptorAvgAggregateInputType = {
    intensity?: true
  }

  export type ScoreFlavorDescriptorSumAggregateInputType = {
    intensity?: true
  }

  export type ScoreFlavorDescriptorMinAggregateInputType = {
    id?: true
    scoreId?: true
    flavorDescriptorId?: true
    intensity?: true
    createdAt?: true
  }

  export type ScoreFlavorDescriptorMaxAggregateInputType = {
    id?: true
    scoreId?: true
    flavorDescriptorId?: true
    intensity?: true
    createdAt?: true
  }

  export type ScoreFlavorDescriptorCountAggregateInputType = {
    id?: true
    scoreId?: true
    flavorDescriptorId?: true
    intensity?: true
    createdAt?: true
    _all?: true
  }

  export type ScoreFlavorDescriptorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreFlavorDescriptor to aggregate.
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreFlavorDescriptors to fetch.
     */
    orderBy?: ScoreFlavorDescriptorOrderByWithRelationInput | ScoreFlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreFlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreFlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreFlavorDescriptors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScoreFlavorDescriptors
    **/
    _count?: true | ScoreFlavorDescriptorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreFlavorDescriptorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreFlavorDescriptorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreFlavorDescriptorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreFlavorDescriptorMaxAggregateInputType
  }

  export type GetScoreFlavorDescriptorAggregateType<T extends ScoreFlavorDescriptorAggregateArgs> = {
        [P in keyof T & keyof AggregateScoreFlavorDescriptor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScoreFlavorDescriptor[P]>
      : GetScalarType<T[P], AggregateScoreFlavorDescriptor[P]>
  }




  export type ScoreFlavorDescriptorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreFlavorDescriptorWhereInput
    orderBy?: ScoreFlavorDescriptorOrderByWithAggregationInput | ScoreFlavorDescriptorOrderByWithAggregationInput[]
    by: ScoreFlavorDescriptorScalarFieldEnum[] | ScoreFlavorDescriptorScalarFieldEnum
    having?: ScoreFlavorDescriptorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreFlavorDescriptorCountAggregateInputType | true
    _avg?: ScoreFlavorDescriptorAvgAggregateInputType
    _sum?: ScoreFlavorDescriptorSumAggregateInputType
    _min?: ScoreFlavorDescriptorMinAggregateInputType
    _max?: ScoreFlavorDescriptorMaxAggregateInputType
  }

  export type ScoreFlavorDescriptorGroupByOutputType = {
    id: string
    scoreId: string
    flavorDescriptorId: string
    intensity: number
    createdAt: Date
    _count: ScoreFlavorDescriptorCountAggregateOutputType | null
    _avg: ScoreFlavorDescriptorAvgAggregateOutputType | null
    _sum: ScoreFlavorDescriptorSumAggregateOutputType | null
    _min: ScoreFlavorDescriptorMinAggregateOutputType | null
    _max: ScoreFlavorDescriptorMaxAggregateOutputType | null
  }

  type GetScoreFlavorDescriptorGroupByPayload<T extends ScoreFlavorDescriptorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreFlavorDescriptorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreFlavorDescriptorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreFlavorDescriptorGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreFlavorDescriptorGroupByOutputType[P]>
        }
      >
    >


  export type ScoreFlavorDescriptorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreId?: boolean
    flavorDescriptorId?: boolean
    intensity?: boolean
    createdAt?: boolean
    score?: boolean | ScoreDefaultArgs<ExtArgs>
    flavorDescriptor?: boolean | FlavorDescriptorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreFlavorDescriptor"]>

  export type ScoreFlavorDescriptorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreId?: boolean
    flavorDescriptorId?: boolean
    intensity?: boolean
    createdAt?: boolean
    score?: boolean | ScoreDefaultArgs<ExtArgs>
    flavorDescriptor?: boolean | FlavorDescriptorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreFlavorDescriptor"]>

  export type ScoreFlavorDescriptorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreId?: boolean
    flavorDescriptorId?: boolean
    intensity?: boolean
    createdAt?: boolean
    score?: boolean | ScoreDefaultArgs<ExtArgs>
    flavorDescriptor?: boolean | FlavorDescriptorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreFlavorDescriptor"]>

  export type ScoreFlavorDescriptorSelectScalar = {
    id?: boolean
    scoreId?: boolean
    flavorDescriptorId?: boolean
    intensity?: boolean
    createdAt?: boolean
  }

  export type ScoreFlavorDescriptorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scoreId" | "flavorDescriptorId" | "intensity" | "createdAt", ExtArgs["result"]["scoreFlavorDescriptor"]>
  export type ScoreFlavorDescriptorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    score?: boolean | ScoreDefaultArgs<ExtArgs>
    flavorDescriptor?: boolean | FlavorDescriptorDefaultArgs<ExtArgs>
  }
  export type ScoreFlavorDescriptorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    score?: boolean | ScoreDefaultArgs<ExtArgs>
    flavorDescriptor?: boolean | FlavorDescriptorDefaultArgs<ExtArgs>
  }
  export type ScoreFlavorDescriptorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    score?: boolean | ScoreDefaultArgs<ExtArgs>
    flavorDescriptor?: boolean | FlavorDescriptorDefaultArgs<ExtArgs>
  }

  export type $ScoreFlavorDescriptorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScoreFlavorDescriptor"
    objects: {
      score: Prisma.$ScorePayload<ExtArgs>
      flavorDescriptor: Prisma.$FlavorDescriptorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scoreId: string
      flavorDescriptorId: string
      intensity: number
      createdAt: Date
    }, ExtArgs["result"]["scoreFlavorDescriptor"]>
    composites: {}
  }

  type ScoreFlavorDescriptorGetPayload<S extends boolean | null | undefined | ScoreFlavorDescriptorDefaultArgs> = $Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload, S>

  type ScoreFlavorDescriptorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreFlavorDescriptorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreFlavorDescriptorCountAggregateInputType | true
    }

  export interface ScoreFlavorDescriptorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScoreFlavorDescriptor'], meta: { name: 'ScoreFlavorDescriptor' } }
    /**
     * Find zero or one ScoreFlavorDescriptor that matches the filter.
     * @param {ScoreFlavorDescriptorFindUniqueArgs} args - Arguments to find a ScoreFlavorDescriptor
     * @example
     * // Get one ScoreFlavorDescriptor
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreFlavorDescriptorFindUniqueArgs>(args: SelectSubset<T, ScoreFlavorDescriptorFindUniqueArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScoreFlavorDescriptor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreFlavorDescriptorFindUniqueOrThrowArgs} args - Arguments to find a ScoreFlavorDescriptor
     * @example
     * // Get one ScoreFlavorDescriptor
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreFlavorDescriptorFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreFlavorDescriptorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreFlavorDescriptor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorFindFirstArgs} args - Arguments to find a ScoreFlavorDescriptor
     * @example
     * // Get one ScoreFlavorDescriptor
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreFlavorDescriptorFindFirstArgs>(args?: SelectSubset<T, ScoreFlavorDescriptorFindFirstArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreFlavorDescriptor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorFindFirstOrThrowArgs} args - Arguments to find a ScoreFlavorDescriptor
     * @example
     * // Get one ScoreFlavorDescriptor
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreFlavorDescriptorFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreFlavorDescriptorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScoreFlavorDescriptors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScoreFlavorDescriptors
     * const scoreFlavorDescriptors = await prisma.scoreFlavorDescriptor.findMany()
     * 
     * // Get first 10 ScoreFlavorDescriptors
     * const scoreFlavorDescriptors = await prisma.scoreFlavorDescriptor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreFlavorDescriptorWithIdOnly = await prisma.scoreFlavorDescriptor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreFlavorDescriptorFindManyArgs>(args?: SelectSubset<T, ScoreFlavorDescriptorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScoreFlavorDescriptor.
     * @param {ScoreFlavorDescriptorCreateArgs} args - Arguments to create a ScoreFlavorDescriptor.
     * @example
     * // Create one ScoreFlavorDescriptor
     * const ScoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.create({
     *   data: {
     *     // ... data to create a ScoreFlavorDescriptor
     *   }
     * })
     * 
     */
    create<T extends ScoreFlavorDescriptorCreateArgs>(args: SelectSubset<T, ScoreFlavorDescriptorCreateArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScoreFlavorDescriptors.
     * @param {ScoreFlavorDescriptorCreateManyArgs} args - Arguments to create many ScoreFlavorDescriptors.
     * @example
     * // Create many ScoreFlavorDescriptors
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreFlavorDescriptorCreateManyArgs>(args?: SelectSubset<T, ScoreFlavorDescriptorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScoreFlavorDescriptors and returns the data saved in the database.
     * @param {ScoreFlavorDescriptorCreateManyAndReturnArgs} args - Arguments to create many ScoreFlavorDescriptors.
     * @example
     * // Create many ScoreFlavorDescriptors
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScoreFlavorDescriptors and only return the `id`
     * const scoreFlavorDescriptorWithIdOnly = await prisma.scoreFlavorDescriptor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreFlavorDescriptorCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreFlavorDescriptorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScoreFlavorDescriptor.
     * @param {ScoreFlavorDescriptorDeleteArgs} args - Arguments to delete one ScoreFlavorDescriptor.
     * @example
     * // Delete one ScoreFlavorDescriptor
     * const ScoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.delete({
     *   where: {
     *     // ... filter to delete one ScoreFlavorDescriptor
     *   }
     * })
     * 
     */
    delete<T extends ScoreFlavorDescriptorDeleteArgs>(args: SelectSubset<T, ScoreFlavorDescriptorDeleteArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScoreFlavorDescriptor.
     * @param {ScoreFlavorDescriptorUpdateArgs} args - Arguments to update one ScoreFlavorDescriptor.
     * @example
     * // Update one ScoreFlavorDescriptor
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreFlavorDescriptorUpdateArgs>(args: SelectSubset<T, ScoreFlavorDescriptorUpdateArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScoreFlavorDescriptors.
     * @param {ScoreFlavorDescriptorDeleteManyArgs} args - Arguments to filter ScoreFlavorDescriptors to delete.
     * @example
     * // Delete a few ScoreFlavorDescriptors
     * const { count } = await prisma.scoreFlavorDescriptor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreFlavorDescriptorDeleteManyArgs>(args?: SelectSubset<T, ScoreFlavorDescriptorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreFlavorDescriptors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScoreFlavorDescriptors
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreFlavorDescriptorUpdateManyArgs>(args: SelectSubset<T, ScoreFlavorDescriptorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreFlavorDescriptors and returns the data updated in the database.
     * @param {ScoreFlavorDescriptorUpdateManyAndReturnArgs} args - Arguments to update many ScoreFlavorDescriptors.
     * @example
     * // Update many ScoreFlavorDescriptors
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScoreFlavorDescriptors and only return the `id`
     * const scoreFlavorDescriptorWithIdOnly = await prisma.scoreFlavorDescriptor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreFlavorDescriptorUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreFlavorDescriptorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScoreFlavorDescriptor.
     * @param {ScoreFlavorDescriptorUpsertArgs} args - Arguments to update or create a ScoreFlavorDescriptor.
     * @example
     * // Update or create a ScoreFlavorDescriptor
     * const scoreFlavorDescriptor = await prisma.scoreFlavorDescriptor.upsert({
     *   create: {
     *     // ... data to create a ScoreFlavorDescriptor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScoreFlavorDescriptor we want to update
     *   }
     * })
     */
    upsert<T extends ScoreFlavorDescriptorUpsertArgs>(args: SelectSubset<T, ScoreFlavorDescriptorUpsertArgs<ExtArgs>>): Prisma__ScoreFlavorDescriptorClient<$Result.GetResult<Prisma.$ScoreFlavorDescriptorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScoreFlavorDescriptors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorCountArgs} args - Arguments to filter ScoreFlavorDescriptors to count.
     * @example
     * // Count the number of ScoreFlavorDescriptors
     * const count = await prisma.scoreFlavorDescriptor.count({
     *   where: {
     *     // ... the filter for the ScoreFlavorDescriptors we want to count
     *   }
     * })
    **/
    count<T extends ScoreFlavorDescriptorCountArgs>(
      args?: Subset<T, ScoreFlavorDescriptorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreFlavorDescriptorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScoreFlavorDescriptor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreFlavorDescriptorAggregateArgs>(args: Subset<T, ScoreFlavorDescriptorAggregateArgs>): Prisma.PrismaPromise<GetScoreFlavorDescriptorAggregateType<T>>

    /**
     * Group by ScoreFlavorDescriptor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFlavorDescriptorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreFlavorDescriptorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreFlavorDescriptorGroupByArgs['orderBy'] }
        : { orderBy?: ScoreFlavorDescriptorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreFlavorDescriptorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreFlavorDescriptorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScoreFlavorDescriptor model
   */
  readonly fields: ScoreFlavorDescriptorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScoreFlavorDescriptor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreFlavorDescriptorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    score<T extends ScoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScoreDefaultArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    flavorDescriptor<T extends FlavorDescriptorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlavorDescriptorDefaultArgs<ExtArgs>>): Prisma__FlavorDescriptorClient<$Result.GetResult<Prisma.$FlavorDescriptorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScoreFlavorDescriptor model
   */
  interface ScoreFlavorDescriptorFieldRefs {
    readonly id: FieldRef<"ScoreFlavorDescriptor", 'String'>
    readonly scoreId: FieldRef<"ScoreFlavorDescriptor", 'String'>
    readonly flavorDescriptorId: FieldRef<"ScoreFlavorDescriptor", 'String'>
    readonly intensity: FieldRef<"ScoreFlavorDescriptor", 'Int'>
    readonly createdAt: FieldRef<"ScoreFlavorDescriptor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScoreFlavorDescriptor findUnique
   */
  export type ScoreFlavorDescriptorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which ScoreFlavorDescriptor to fetch.
     */
    where: ScoreFlavorDescriptorWhereUniqueInput
  }

  /**
   * ScoreFlavorDescriptor findUniqueOrThrow
   */
  export type ScoreFlavorDescriptorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which ScoreFlavorDescriptor to fetch.
     */
    where: ScoreFlavorDescriptorWhereUniqueInput
  }

  /**
   * ScoreFlavorDescriptor findFirst
   */
  export type ScoreFlavorDescriptorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which ScoreFlavorDescriptor to fetch.
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreFlavorDescriptors to fetch.
     */
    orderBy?: ScoreFlavorDescriptorOrderByWithRelationInput | ScoreFlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreFlavorDescriptors.
     */
    cursor?: ScoreFlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreFlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreFlavorDescriptors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreFlavorDescriptors.
     */
    distinct?: ScoreFlavorDescriptorScalarFieldEnum | ScoreFlavorDescriptorScalarFieldEnum[]
  }

  /**
   * ScoreFlavorDescriptor findFirstOrThrow
   */
  export type ScoreFlavorDescriptorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which ScoreFlavorDescriptor to fetch.
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreFlavorDescriptors to fetch.
     */
    orderBy?: ScoreFlavorDescriptorOrderByWithRelationInput | ScoreFlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreFlavorDescriptors.
     */
    cursor?: ScoreFlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreFlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreFlavorDescriptors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreFlavorDescriptors.
     */
    distinct?: ScoreFlavorDescriptorScalarFieldEnum | ScoreFlavorDescriptorScalarFieldEnum[]
  }

  /**
   * ScoreFlavorDescriptor findMany
   */
  export type ScoreFlavorDescriptorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter, which ScoreFlavorDescriptors to fetch.
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreFlavorDescriptors to fetch.
     */
    orderBy?: ScoreFlavorDescriptorOrderByWithRelationInput | ScoreFlavorDescriptorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScoreFlavorDescriptors.
     */
    cursor?: ScoreFlavorDescriptorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreFlavorDescriptors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreFlavorDescriptors.
     */
    skip?: number
    distinct?: ScoreFlavorDescriptorScalarFieldEnum | ScoreFlavorDescriptorScalarFieldEnum[]
  }

  /**
   * ScoreFlavorDescriptor create
   */
  export type ScoreFlavorDescriptorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * The data needed to create a ScoreFlavorDescriptor.
     */
    data: XOR<ScoreFlavorDescriptorCreateInput, ScoreFlavorDescriptorUncheckedCreateInput>
  }

  /**
   * ScoreFlavorDescriptor createMany
   */
  export type ScoreFlavorDescriptorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScoreFlavorDescriptors.
     */
    data: ScoreFlavorDescriptorCreateManyInput | ScoreFlavorDescriptorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScoreFlavorDescriptor createManyAndReturn
   */
  export type ScoreFlavorDescriptorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * The data used to create many ScoreFlavorDescriptors.
     */
    data: ScoreFlavorDescriptorCreateManyInput | ScoreFlavorDescriptorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreFlavorDescriptor update
   */
  export type ScoreFlavorDescriptorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * The data needed to update a ScoreFlavorDescriptor.
     */
    data: XOR<ScoreFlavorDescriptorUpdateInput, ScoreFlavorDescriptorUncheckedUpdateInput>
    /**
     * Choose, which ScoreFlavorDescriptor to update.
     */
    where: ScoreFlavorDescriptorWhereUniqueInput
  }

  /**
   * ScoreFlavorDescriptor updateMany
   */
  export type ScoreFlavorDescriptorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScoreFlavorDescriptors.
     */
    data: XOR<ScoreFlavorDescriptorUpdateManyMutationInput, ScoreFlavorDescriptorUncheckedUpdateManyInput>
    /**
     * Filter which ScoreFlavorDescriptors to update
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * Limit how many ScoreFlavorDescriptors to update.
     */
    limit?: number
  }

  /**
   * ScoreFlavorDescriptor updateManyAndReturn
   */
  export type ScoreFlavorDescriptorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * The data used to update ScoreFlavorDescriptors.
     */
    data: XOR<ScoreFlavorDescriptorUpdateManyMutationInput, ScoreFlavorDescriptorUncheckedUpdateManyInput>
    /**
     * Filter which ScoreFlavorDescriptors to update
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * Limit how many ScoreFlavorDescriptors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreFlavorDescriptor upsert
   */
  export type ScoreFlavorDescriptorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * The filter to search for the ScoreFlavorDescriptor to update in case it exists.
     */
    where: ScoreFlavorDescriptorWhereUniqueInput
    /**
     * In case the ScoreFlavorDescriptor found by the `where` argument doesn't exist, create a new ScoreFlavorDescriptor with this data.
     */
    create: XOR<ScoreFlavorDescriptorCreateInput, ScoreFlavorDescriptorUncheckedCreateInput>
    /**
     * In case the ScoreFlavorDescriptor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreFlavorDescriptorUpdateInput, ScoreFlavorDescriptorUncheckedUpdateInput>
  }

  /**
   * ScoreFlavorDescriptor delete
   */
  export type ScoreFlavorDescriptorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
    /**
     * Filter which ScoreFlavorDescriptor to delete.
     */
    where: ScoreFlavorDescriptorWhereUniqueInput
  }

  /**
   * ScoreFlavorDescriptor deleteMany
   */
  export type ScoreFlavorDescriptorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreFlavorDescriptors to delete
     */
    where?: ScoreFlavorDescriptorWhereInput
    /**
     * Limit how many ScoreFlavorDescriptors to delete.
     */
    limit?: number
  }

  /**
   * ScoreFlavorDescriptor without action
   */
  export type ScoreFlavorDescriptorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreFlavorDescriptor
     */
    select?: ScoreFlavorDescriptorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreFlavorDescriptor
     */
    omit?: ScoreFlavorDescriptorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreFlavorDescriptorInclude<ExtArgs> | null
  }


  /**
   * Model GreenBeanGrading
   */

  export type AggregateGreenBeanGrading = {
    _count: GreenBeanGradingCountAggregateOutputType | null
    _avg: GreenBeanGradingAvgAggregateOutputType | null
    _sum: GreenBeanGradingSumAggregateOutputType | null
    _min: GreenBeanGradingMinAggregateOutputType | null
    _max: GreenBeanGradingMaxAggregateOutputType | null
  }

  export type GreenBeanGradingAvgAggregateOutputType = {
    primaryDefects: number | null
    secondaryDefects: number | null
    fullDefectEquivalents: number | null
    averageScreenSize: number | null
    uniformityPercentage: number | null
    moistureContent: number | null
    waterActivity: number | null
    bulkDensity: number | null
    colorScore: number | null
    uniformityScore: number | null
    qualityScore: number | null
  }

  export type GreenBeanGradingSumAggregateOutputType = {
    primaryDefects: number | null
    secondaryDefects: number | null
    fullDefectEquivalents: number | null
    averageScreenSize: number | null
    uniformityPercentage: number | null
    moistureContent: number | null
    waterActivity: number | null
    bulkDensity: number | null
    colorScore: number | null
    uniformityScore: number | null
    qualityScore: number | null
  }

  export type GreenBeanGradingMinAggregateOutputType = {
    id: string | null
    sampleId: string | null
    gradingSystem: $Enums.GradingSystem | null
    primaryDefects: number | null
    secondaryDefects: number | null
    fullDefectEquivalents: number | null
    averageScreenSize: number | null
    uniformityPercentage: number | null
    moistureContent: number | null
    waterActivity: number | null
    bulkDensity: number | null
    colorScore: number | null
    uniformityScore: number | null
    grade: string | null
    classification: $Enums.GradeClassification | null
    qualityScore: number | null
    gradedBy: string | null
    gradedAt: Date | null
    certifiedBy: string | null
    certificationDate: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GreenBeanGradingMaxAggregateOutputType = {
    id: string | null
    sampleId: string | null
    gradingSystem: $Enums.GradingSystem | null
    primaryDefects: number | null
    secondaryDefects: number | null
    fullDefectEquivalents: number | null
    averageScreenSize: number | null
    uniformityPercentage: number | null
    moistureContent: number | null
    waterActivity: number | null
    bulkDensity: number | null
    colorScore: number | null
    uniformityScore: number | null
    grade: string | null
    classification: $Enums.GradeClassification | null
    qualityScore: number | null
    gradedBy: string | null
    gradedAt: Date | null
    certifiedBy: string | null
    certificationDate: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GreenBeanGradingCountAggregateOutputType = {
    id: number
    sampleId: number
    gradingSystem: number
    primaryDefects: number
    secondaryDefects: number
    fullDefectEquivalents: number
    defectBreakdown: number
    screenSizeDistribution: number
    averageScreenSize: number
    uniformityPercentage: number
    moistureContent: number
    waterActivity: number
    bulkDensity: number
    colorScore: number
    uniformityScore: number
    grade: number
    classification: number
    qualityScore: number
    gradedBy: number
    gradedAt: number
    certifiedBy: number
    certificationDate: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GreenBeanGradingAvgAggregateInputType = {
    primaryDefects?: true
    secondaryDefects?: true
    fullDefectEquivalents?: true
    averageScreenSize?: true
    uniformityPercentage?: true
    moistureContent?: true
    waterActivity?: true
    bulkDensity?: true
    colorScore?: true
    uniformityScore?: true
    qualityScore?: true
  }

  export type GreenBeanGradingSumAggregateInputType = {
    primaryDefects?: true
    secondaryDefects?: true
    fullDefectEquivalents?: true
    averageScreenSize?: true
    uniformityPercentage?: true
    moistureContent?: true
    waterActivity?: true
    bulkDensity?: true
    colorScore?: true
    uniformityScore?: true
    qualityScore?: true
  }

  export type GreenBeanGradingMinAggregateInputType = {
    id?: true
    sampleId?: true
    gradingSystem?: true
    primaryDefects?: true
    secondaryDefects?: true
    fullDefectEquivalents?: true
    averageScreenSize?: true
    uniformityPercentage?: true
    moistureContent?: true
    waterActivity?: true
    bulkDensity?: true
    colorScore?: true
    uniformityScore?: true
    grade?: true
    classification?: true
    qualityScore?: true
    gradedBy?: true
    gradedAt?: true
    certifiedBy?: true
    certificationDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GreenBeanGradingMaxAggregateInputType = {
    id?: true
    sampleId?: true
    gradingSystem?: true
    primaryDefects?: true
    secondaryDefects?: true
    fullDefectEquivalents?: true
    averageScreenSize?: true
    uniformityPercentage?: true
    moistureContent?: true
    waterActivity?: true
    bulkDensity?: true
    colorScore?: true
    uniformityScore?: true
    grade?: true
    classification?: true
    qualityScore?: true
    gradedBy?: true
    gradedAt?: true
    certifiedBy?: true
    certificationDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GreenBeanGradingCountAggregateInputType = {
    id?: true
    sampleId?: true
    gradingSystem?: true
    primaryDefects?: true
    secondaryDefects?: true
    fullDefectEquivalents?: true
    defectBreakdown?: true
    screenSizeDistribution?: true
    averageScreenSize?: true
    uniformityPercentage?: true
    moistureContent?: true
    waterActivity?: true
    bulkDensity?: true
    colorScore?: true
    uniformityScore?: true
    grade?: true
    classification?: true
    qualityScore?: true
    gradedBy?: true
    gradedAt?: true
    certifiedBy?: true
    certificationDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GreenBeanGradingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GreenBeanGrading to aggregate.
     */
    where?: GreenBeanGradingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GreenBeanGradings to fetch.
     */
    orderBy?: GreenBeanGradingOrderByWithRelationInput | GreenBeanGradingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GreenBeanGradingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GreenBeanGradings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GreenBeanGradings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GreenBeanGradings
    **/
    _count?: true | GreenBeanGradingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GreenBeanGradingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GreenBeanGradingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GreenBeanGradingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GreenBeanGradingMaxAggregateInputType
  }

  export type GetGreenBeanGradingAggregateType<T extends GreenBeanGradingAggregateArgs> = {
        [P in keyof T & keyof AggregateGreenBeanGrading]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGreenBeanGrading[P]>
      : GetScalarType<T[P], AggregateGreenBeanGrading[P]>
  }




  export type GreenBeanGradingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GreenBeanGradingWhereInput
    orderBy?: GreenBeanGradingOrderByWithAggregationInput | GreenBeanGradingOrderByWithAggregationInput[]
    by: GreenBeanGradingScalarFieldEnum[] | GreenBeanGradingScalarFieldEnum
    having?: GreenBeanGradingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GreenBeanGradingCountAggregateInputType | true
    _avg?: GreenBeanGradingAvgAggregateInputType
    _sum?: GreenBeanGradingSumAggregateInputType
    _min?: GreenBeanGradingMinAggregateInputType
    _max?: GreenBeanGradingMaxAggregateInputType
  }

  export type GreenBeanGradingGroupByOutputType = {
    id: string
    sampleId: string
    gradingSystem: $Enums.GradingSystem
    primaryDefects: number
    secondaryDefects: number
    fullDefectEquivalents: number
    defectBreakdown: JsonValue
    screenSizeDistribution: JsonValue | null
    averageScreenSize: number | null
    uniformityPercentage: number | null
    moistureContent: number | null
    waterActivity: number | null
    bulkDensity: number | null
    colorScore: number | null
    uniformityScore: number | null
    grade: string | null
    classification: $Enums.GradeClassification | null
    qualityScore: number | null
    gradedBy: string | null
    gradedAt: Date | null
    certifiedBy: string | null
    certificationDate: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: GreenBeanGradingCountAggregateOutputType | null
    _avg: GreenBeanGradingAvgAggregateOutputType | null
    _sum: GreenBeanGradingSumAggregateOutputType | null
    _min: GreenBeanGradingMinAggregateOutputType | null
    _max: GreenBeanGradingMaxAggregateOutputType | null
  }

  type GetGreenBeanGradingGroupByPayload<T extends GreenBeanGradingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GreenBeanGradingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GreenBeanGradingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GreenBeanGradingGroupByOutputType[P]>
            : GetScalarType<T[P], GreenBeanGradingGroupByOutputType[P]>
        }
      >
    >


  export type GreenBeanGradingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    gradingSystem?: boolean
    primaryDefects?: boolean
    secondaryDefects?: boolean
    fullDefectEquivalents?: boolean
    defectBreakdown?: boolean
    screenSizeDistribution?: boolean
    averageScreenSize?: boolean
    uniformityPercentage?: boolean
    moistureContent?: boolean
    waterActivity?: boolean
    bulkDensity?: boolean
    colorScore?: boolean
    uniformityScore?: boolean
    grade?: boolean
    classification?: boolean
    qualityScore?: boolean
    gradedBy?: boolean
    gradedAt?: boolean
    certifiedBy?: boolean
    certificationDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["greenBeanGrading"]>

  export type GreenBeanGradingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    gradingSystem?: boolean
    primaryDefects?: boolean
    secondaryDefects?: boolean
    fullDefectEquivalents?: boolean
    defectBreakdown?: boolean
    screenSizeDistribution?: boolean
    averageScreenSize?: boolean
    uniformityPercentage?: boolean
    moistureContent?: boolean
    waterActivity?: boolean
    bulkDensity?: boolean
    colorScore?: boolean
    uniformityScore?: boolean
    grade?: boolean
    classification?: boolean
    qualityScore?: boolean
    gradedBy?: boolean
    gradedAt?: boolean
    certifiedBy?: boolean
    certificationDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["greenBeanGrading"]>

  export type GreenBeanGradingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    gradingSystem?: boolean
    primaryDefects?: boolean
    secondaryDefects?: boolean
    fullDefectEquivalents?: boolean
    defectBreakdown?: boolean
    screenSizeDistribution?: boolean
    averageScreenSize?: boolean
    uniformityPercentage?: boolean
    moistureContent?: boolean
    waterActivity?: boolean
    bulkDensity?: boolean
    colorScore?: boolean
    uniformityScore?: boolean
    grade?: boolean
    classification?: boolean
    qualityScore?: boolean
    gradedBy?: boolean
    gradedAt?: boolean
    certifiedBy?: boolean
    certificationDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["greenBeanGrading"]>

  export type GreenBeanGradingSelectScalar = {
    id?: boolean
    sampleId?: boolean
    gradingSystem?: boolean
    primaryDefects?: boolean
    secondaryDefects?: boolean
    fullDefectEquivalents?: boolean
    defectBreakdown?: boolean
    screenSizeDistribution?: boolean
    averageScreenSize?: boolean
    uniformityPercentage?: boolean
    moistureContent?: boolean
    waterActivity?: boolean
    bulkDensity?: boolean
    colorScore?: boolean
    uniformityScore?: boolean
    grade?: boolean
    classification?: boolean
    qualityScore?: boolean
    gradedBy?: boolean
    gradedAt?: boolean
    certifiedBy?: boolean
    certificationDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GreenBeanGradingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sampleId" | "gradingSystem" | "primaryDefects" | "secondaryDefects" | "fullDefectEquivalents" | "defectBreakdown" | "screenSizeDistribution" | "averageScreenSize" | "uniformityPercentage" | "moistureContent" | "waterActivity" | "bulkDensity" | "colorScore" | "uniformityScore" | "grade" | "classification" | "qualityScore" | "gradedBy" | "gradedAt" | "certifiedBy" | "certificationDate" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["greenBeanGrading"]>
  export type GreenBeanGradingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }
  export type GreenBeanGradingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }
  export type GreenBeanGradingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }

  export type $GreenBeanGradingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GreenBeanGrading"
    objects: {
      sample: Prisma.$SamplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sampleId: string
      gradingSystem: $Enums.GradingSystem
      primaryDefects: number
      secondaryDefects: number
      fullDefectEquivalents: number
      defectBreakdown: Prisma.JsonValue
      screenSizeDistribution: Prisma.JsonValue | null
      averageScreenSize: number | null
      uniformityPercentage: number | null
      moistureContent: number | null
      waterActivity: number | null
      bulkDensity: number | null
      colorScore: number | null
      uniformityScore: number | null
      grade: string | null
      classification: $Enums.GradeClassification | null
      qualityScore: number | null
      gradedBy: string | null
      gradedAt: Date | null
      certifiedBy: string | null
      certificationDate: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["greenBeanGrading"]>
    composites: {}
  }

  type GreenBeanGradingGetPayload<S extends boolean | null | undefined | GreenBeanGradingDefaultArgs> = $Result.GetResult<Prisma.$GreenBeanGradingPayload, S>

  type GreenBeanGradingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GreenBeanGradingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GreenBeanGradingCountAggregateInputType | true
    }

  export interface GreenBeanGradingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GreenBeanGrading'], meta: { name: 'GreenBeanGrading' } }
    /**
     * Find zero or one GreenBeanGrading that matches the filter.
     * @param {GreenBeanGradingFindUniqueArgs} args - Arguments to find a GreenBeanGrading
     * @example
     * // Get one GreenBeanGrading
     * const greenBeanGrading = await prisma.greenBeanGrading.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GreenBeanGradingFindUniqueArgs>(args: SelectSubset<T, GreenBeanGradingFindUniqueArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GreenBeanGrading that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GreenBeanGradingFindUniqueOrThrowArgs} args - Arguments to find a GreenBeanGrading
     * @example
     * // Get one GreenBeanGrading
     * const greenBeanGrading = await prisma.greenBeanGrading.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GreenBeanGradingFindUniqueOrThrowArgs>(args: SelectSubset<T, GreenBeanGradingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GreenBeanGrading that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingFindFirstArgs} args - Arguments to find a GreenBeanGrading
     * @example
     * // Get one GreenBeanGrading
     * const greenBeanGrading = await prisma.greenBeanGrading.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GreenBeanGradingFindFirstArgs>(args?: SelectSubset<T, GreenBeanGradingFindFirstArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GreenBeanGrading that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingFindFirstOrThrowArgs} args - Arguments to find a GreenBeanGrading
     * @example
     * // Get one GreenBeanGrading
     * const greenBeanGrading = await prisma.greenBeanGrading.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GreenBeanGradingFindFirstOrThrowArgs>(args?: SelectSubset<T, GreenBeanGradingFindFirstOrThrowArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GreenBeanGradings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GreenBeanGradings
     * const greenBeanGradings = await prisma.greenBeanGrading.findMany()
     * 
     * // Get first 10 GreenBeanGradings
     * const greenBeanGradings = await prisma.greenBeanGrading.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const greenBeanGradingWithIdOnly = await prisma.greenBeanGrading.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GreenBeanGradingFindManyArgs>(args?: SelectSubset<T, GreenBeanGradingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GreenBeanGrading.
     * @param {GreenBeanGradingCreateArgs} args - Arguments to create a GreenBeanGrading.
     * @example
     * // Create one GreenBeanGrading
     * const GreenBeanGrading = await prisma.greenBeanGrading.create({
     *   data: {
     *     // ... data to create a GreenBeanGrading
     *   }
     * })
     * 
     */
    create<T extends GreenBeanGradingCreateArgs>(args: SelectSubset<T, GreenBeanGradingCreateArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GreenBeanGradings.
     * @param {GreenBeanGradingCreateManyArgs} args - Arguments to create many GreenBeanGradings.
     * @example
     * // Create many GreenBeanGradings
     * const greenBeanGrading = await prisma.greenBeanGrading.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GreenBeanGradingCreateManyArgs>(args?: SelectSubset<T, GreenBeanGradingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GreenBeanGradings and returns the data saved in the database.
     * @param {GreenBeanGradingCreateManyAndReturnArgs} args - Arguments to create many GreenBeanGradings.
     * @example
     * // Create many GreenBeanGradings
     * const greenBeanGrading = await prisma.greenBeanGrading.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GreenBeanGradings and only return the `id`
     * const greenBeanGradingWithIdOnly = await prisma.greenBeanGrading.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GreenBeanGradingCreateManyAndReturnArgs>(args?: SelectSubset<T, GreenBeanGradingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GreenBeanGrading.
     * @param {GreenBeanGradingDeleteArgs} args - Arguments to delete one GreenBeanGrading.
     * @example
     * // Delete one GreenBeanGrading
     * const GreenBeanGrading = await prisma.greenBeanGrading.delete({
     *   where: {
     *     // ... filter to delete one GreenBeanGrading
     *   }
     * })
     * 
     */
    delete<T extends GreenBeanGradingDeleteArgs>(args: SelectSubset<T, GreenBeanGradingDeleteArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GreenBeanGrading.
     * @param {GreenBeanGradingUpdateArgs} args - Arguments to update one GreenBeanGrading.
     * @example
     * // Update one GreenBeanGrading
     * const greenBeanGrading = await prisma.greenBeanGrading.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GreenBeanGradingUpdateArgs>(args: SelectSubset<T, GreenBeanGradingUpdateArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GreenBeanGradings.
     * @param {GreenBeanGradingDeleteManyArgs} args - Arguments to filter GreenBeanGradings to delete.
     * @example
     * // Delete a few GreenBeanGradings
     * const { count } = await prisma.greenBeanGrading.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GreenBeanGradingDeleteManyArgs>(args?: SelectSubset<T, GreenBeanGradingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GreenBeanGradings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GreenBeanGradings
     * const greenBeanGrading = await prisma.greenBeanGrading.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GreenBeanGradingUpdateManyArgs>(args: SelectSubset<T, GreenBeanGradingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GreenBeanGradings and returns the data updated in the database.
     * @param {GreenBeanGradingUpdateManyAndReturnArgs} args - Arguments to update many GreenBeanGradings.
     * @example
     * // Update many GreenBeanGradings
     * const greenBeanGrading = await prisma.greenBeanGrading.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GreenBeanGradings and only return the `id`
     * const greenBeanGradingWithIdOnly = await prisma.greenBeanGrading.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GreenBeanGradingUpdateManyAndReturnArgs>(args: SelectSubset<T, GreenBeanGradingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GreenBeanGrading.
     * @param {GreenBeanGradingUpsertArgs} args - Arguments to update or create a GreenBeanGrading.
     * @example
     * // Update or create a GreenBeanGrading
     * const greenBeanGrading = await prisma.greenBeanGrading.upsert({
     *   create: {
     *     // ... data to create a GreenBeanGrading
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GreenBeanGrading we want to update
     *   }
     * })
     */
    upsert<T extends GreenBeanGradingUpsertArgs>(args: SelectSubset<T, GreenBeanGradingUpsertArgs<ExtArgs>>): Prisma__GreenBeanGradingClient<$Result.GetResult<Prisma.$GreenBeanGradingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GreenBeanGradings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingCountArgs} args - Arguments to filter GreenBeanGradings to count.
     * @example
     * // Count the number of GreenBeanGradings
     * const count = await prisma.greenBeanGrading.count({
     *   where: {
     *     // ... the filter for the GreenBeanGradings we want to count
     *   }
     * })
    **/
    count<T extends GreenBeanGradingCountArgs>(
      args?: Subset<T, GreenBeanGradingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GreenBeanGradingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GreenBeanGrading.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GreenBeanGradingAggregateArgs>(args: Subset<T, GreenBeanGradingAggregateArgs>): Prisma.PrismaPromise<GetGreenBeanGradingAggregateType<T>>

    /**
     * Group by GreenBeanGrading.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreenBeanGradingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GreenBeanGradingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GreenBeanGradingGroupByArgs['orderBy'] }
        : { orderBy?: GreenBeanGradingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GreenBeanGradingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGreenBeanGradingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GreenBeanGrading model
   */
  readonly fields: GreenBeanGradingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GreenBeanGrading.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GreenBeanGradingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GreenBeanGrading model
   */
  interface GreenBeanGradingFieldRefs {
    readonly id: FieldRef<"GreenBeanGrading", 'String'>
    readonly sampleId: FieldRef<"GreenBeanGrading", 'String'>
    readonly gradingSystem: FieldRef<"GreenBeanGrading", 'GradingSystem'>
    readonly primaryDefects: FieldRef<"GreenBeanGrading", 'Int'>
    readonly secondaryDefects: FieldRef<"GreenBeanGrading", 'Int'>
    readonly fullDefectEquivalents: FieldRef<"GreenBeanGrading", 'Float'>
    readonly defectBreakdown: FieldRef<"GreenBeanGrading", 'Json'>
    readonly screenSizeDistribution: FieldRef<"GreenBeanGrading", 'Json'>
    readonly averageScreenSize: FieldRef<"GreenBeanGrading", 'Float'>
    readonly uniformityPercentage: FieldRef<"GreenBeanGrading", 'Float'>
    readonly moistureContent: FieldRef<"GreenBeanGrading", 'Float'>
    readonly waterActivity: FieldRef<"GreenBeanGrading", 'Float'>
    readonly bulkDensity: FieldRef<"GreenBeanGrading", 'Float'>
    readonly colorScore: FieldRef<"GreenBeanGrading", 'Int'>
    readonly uniformityScore: FieldRef<"GreenBeanGrading", 'Int'>
    readonly grade: FieldRef<"GreenBeanGrading", 'String'>
    readonly classification: FieldRef<"GreenBeanGrading", 'GradeClassification'>
    readonly qualityScore: FieldRef<"GreenBeanGrading", 'Float'>
    readonly gradedBy: FieldRef<"GreenBeanGrading", 'String'>
    readonly gradedAt: FieldRef<"GreenBeanGrading", 'DateTime'>
    readonly certifiedBy: FieldRef<"GreenBeanGrading", 'String'>
    readonly certificationDate: FieldRef<"GreenBeanGrading", 'DateTime'>
    readonly notes: FieldRef<"GreenBeanGrading", 'String'>
    readonly createdAt: FieldRef<"GreenBeanGrading", 'DateTime'>
    readonly updatedAt: FieldRef<"GreenBeanGrading", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GreenBeanGrading findUnique
   */
  export type GreenBeanGradingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * Filter, which GreenBeanGrading to fetch.
     */
    where: GreenBeanGradingWhereUniqueInput
  }

  /**
   * GreenBeanGrading findUniqueOrThrow
   */
  export type GreenBeanGradingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * Filter, which GreenBeanGrading to fetch.
     */
    where: GreenBeanGradingWhereUniqueInput
  }

  /**
   * GreenBeanGrading findFirst
   */
  export type GreenBeanGradingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * Filter, which GreenBeanGrading to fetch.
     */
    where?: GreenBeanGradingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GreenBeanGradings to fetch.
     */
    orderBy?: GreenBeanGradingOrderByWithRelationInput | GreenBeanGradingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GreenBeanGradings.
     */
    cursor?: GreenBeanGradingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GreenBeanGradings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GreenBeanGradings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GreenBeanGradings.
     */
    distinct?: GreenBeanGradingScalarFieldEnum | GreenBeanGradingScalarFieldEnum[]
  }

  /**
   * GreenBeanGrading findFirstOrThrow
   */
  export type GreenBeanGradingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * Filter, which GreenBeanGrading to fetch.
     */
    where?: GreenBeanGradingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GreenBeanGradings to fetch.
     */
    orderBy?: GreenBeanGradingOrderByWithRelationInput | GreenBeanGradingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GreenBeanGradings.
     */
    cursor?: GreenBeanGradingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GreenBeanGradings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GreenBeanGradings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GreenBeanGradings.
     */
    distinct?: GreenBeanGradingScalarFieldEnum | GreenBeanGradingScalarFieldEnum[]
  }

  /**
   * GreenBeanGrading findMany
   */
  export type GreenBeanGradingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * Filter, which GreenBeanGradings to fetch.
     */
    where?: GreenBeanGradingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GreenBeanGradings to fetch.
     */
    orderBy?: GreenBeanGradingOrderByWithRelationInput | GreenBeanGradingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GreenBeanGradings.
     */
    cursor?: GreenBeanGradingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GreenBeanGradings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GreenBeanGradings.
     */
    skip?: number
    distinct?: GreenBeanGradingScalarFieldEnum | GreenBeanGradingScalarFieldEnum[]
  }

  /**
   * GreenBeanGrading create
   */
  export type GreenBeanGradingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * The data needed to create a GreenBeanGrading.
     */
    data: XOR<GreenBeanGradingCreateInput, GreenBeanGradingUncheckedCreateInput>
  }

  /**
   * GreenBeanGrading createMany
   */
  export type GreenBeanGradingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GreenBeanGradings.
     */
    data: GreenBeanGradingCreateManyInput | GreenBeanGradingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GreenBeanGrading createManyAndReturn
   */
  export type GreenBeanGradingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * The data used to create many GreenBeanGradings.
     */
    data: GreenBeanGradingCreateManyInput | GreenBeanGradingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GreenBeanGrading update
   */
  export type GreenBeanGradingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * The data needed to update a GreenBeanGrading.
     */
    data: XOR<GreenBeanGradingUpdateInput, GreenBeanGradingUncheckedUpdateInput>
    /**
     * Choose, which GreenBeanGrading to update.
     */
    where: GreenBeanGradingWhereUniqueInput
  }

  /**
   * GreenBeanGrading updateMany
   */
  export type GreenBeanGradingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GreenBeanGradings.
     */
    data: XOR<GreenBeanGradingUpdateManyMutationInput, GreenBeanGradingUncheckedUpdateManyInput>
    /**
     * Filter which GreenBeanGradings to update
     */
    where?: GreenBeanGradingWhereInput
    /**
     * Limit how many GreenBeanGradings to update.
     */
    limit?: number
  }

  /**
   * GreenBeanGrading updateManyAndReturn
   */
  export type GreenBeanGradingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * The data used to update GreenBeanGradings.
     */
    data: XOR<GreenBeanGradingUpdateManyMutationInput, GreenBeanGradingUncheckedUpdateManyInput>
    /**
     * Filter which GreenBeanGradings to update
     */
    where?: GreenBeanGradingWhereInput
    /**
     * Limit how many GreenBeanGradings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GreenBeanGrading upsert
   */
  export type GreenBeanGradingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * The filter to search for the GreenBeanGrading to update in case it exists.
     */
    where: GreenBeanGradingWhereUniqueInput
    /**
     * In case the GreenBeanGrading found by the `where` argument doesn't exist, create a new GreenBeanGrading with this data.
     */
    create: XOR<GreenBeanGradingCreateInput, GreenBeanGradingUncheckedCreateInput>
    /**
     * In case the GreenBeanGrading was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GreenBeanGradingUpdateInput, GreenBeanGradingUncheckedUpdateInput>
  }

  /**
   * GreenBeanGrading delete
   */
  export type GreenBeanGradingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
    /**
     * Filter which GreenBeanGrading to delete.
     */
    where: GreenBeanGradingWhereUniqueInput
  }

  /**
   * GreenBeanGrading deleteMany
   */
  export type GreenBeanGradingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GreenBeanGradings to delete
     */
    where?: GreenBeanGradingWhereInput
    /**
     * Limit how many GreenBeanGradings to delete.
     */
    limit?: number
  }

  /**
   * GreenBeanGrading without action
   */
  export type GreenBeanGradingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GreenBeanGrading
     */
    select?: GreenBeanGradingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GreenBeanGrading
     */
    omit?: GreenBeanGradingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GreenBeanGradingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    domain: 'domain',
    subdomain: 'subdomain',
    description: 'description',
    logo: 'logo',
    website: 'website',
    subscriptionStatus: 'subscriptionStatus',
    subscriptionPlan: 'subscriptionPlan',
    trialEndsAt: 'trialEndsAt',
    subscriptionEndsAt: 'subscriptionEndsAt',
    stripeCustomerId: 'stripeCustomerId',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    avatar: 'avatar',
    bio: 'bio',
    organizationId: 'organizationId',
    role: 'role',
    emailVerified: 'emailVerified',
    emailVerifiedAt: 'emailVerifiedAt',
    lastLoginAt: 'lastLoginAt',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    organizationId: 'organizationId',
    role: 'role',
    token: 'token',
    status: 'status',
    expiresAt: 'expiresAt',
    invitedBy: 'invitedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const SampleScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    description: 'description',
    code: 'code',
    origin: 'origin',
    region: 'region',
    farm: 'farm',
    producer: 'producer',
    variety: 'variety',
    altitude: 'altitude',
    processingMethod: 'processingMethod',
    harvestDate: 'harvestDate',
    roaster: 'roaster',
    roastDate: 'roastDate',
    roastLevel: 'roastLevel',
    moisture: 'moisture',
    density: 'density',
    screenSize: 'screenSize',
    notes: 'notes',
    imageUrl: 'imageUrl',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SampleScalarFieldEnum = (typeof SampleScalarFieldEnum)[keyof typeof SampleScalarFieldEnum]


  export const CuppingTemplateScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    createdBy: 'createdBy',
    name: 'name',
    description: 'description',
    isDefault: 'isDefault',
    isPublic: 'isPublic',
    scoringSystem: 'scoringSystem',
    maxScore: 'maxScore',
    categories: 'categories',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CuppingTemplateScalarFieldEnum = (typeof CuppingTemplateScalarFieldEnum)[keyof typeof CuppingTemplateScalarFieldEnum]


  export const CuppingSessionScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    createdBy: 'createdBy',
    name: 'name',
    description: 'description',
    location: 'location',
    templateId: 'templateId',
    blindTasting: 'blindTasting',
    allowComments: 'allowComments',
    requireCalibration: 'requireCalibration',
    status: 'status',
    scheduledAt: 'scheduledAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    notes: 'notes',
    tags: 'tags',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CuppingSessionScalarFieldEnum = (typeof CuppingSessionScalarFieldEnum)[keyof typeof CuppingSessionScalarFieldEnum]


  export const SessionParticipantScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    userId: 'userId',
    role: 'role',
    joinedAt: 'joinedAt',
    leftAt: 'leftAt',
    isActive: 'isActive',
    isCalibrated: 'isCalibrated',
    calibratedAt: 'calibratedAt'
  };

  export type SessionParticipantScalarFieldEnum = (typeof SessionParticipantScalarFieldEnum)[keyof typeof SessionParticipantScalarFieldEnum]


  export const SessionSampleScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    sampleId: 'sampleId',
    position: 'position',
    isBlind: 'isBlind',
    blindCode: 'blindCode',
    grindSize: 'grindSize',
    waterTemp: 'waterTemp',
    brewRatio: 'brewRatio',
    steepTime: 'steepTime',
    aiSummary: 'aiSummary',
    aiGeneratedAt: 'aiGeneratedAt',
    addedAt: 'addedAt'
  };

  export type SessionSampleScalarFieldEnum = (typeof SessionSampleScalarFieldEnum)[keyof typeof SessionSampleScalarFieldEnum]


  export const ScoreScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    sessionSampleId: 'sessionSampleId',
    sampleId: 'sampleId',
    userId: 'userId',
    totalScore: 'totalScore',
    maxScore: 'maxScore',
    scores: 'scores',
    aroma: 'aroma',
    flavor: 'flavor',
    aftertaste: 'aftertaste',
    acidity: 'acidity',
    body: 'body',
    balance: 'balance',
    sweetness: 'sweetness',
    cleanliness: 'cleanliness',
    uniformity: 'uniformity',
    overall: 'overall',
    defects: 'defects',
    notes: 'notes',
    privateNotes: 'privateNotes',
    voiceNotes: 'voiceNotes',
    voiceFileUrl: 'voiceFileUrl',
    isComplete: 'isComplete',
    isSubmitted: 'isSubmitted',
    submittedAt: 'submittedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScoreScalarFieldEnum = (typeof ScoreScalarFieldEnum)[keyof typeof ScoreScalarFieldEnum]


  export const FlavorDescriptorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    description: 'description',
    isDefault: 'isDefault',
    organizationId: 'organizationId',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FlavorDescriptorScalarFieldEnum = (typeof FlavorDescriptorScalarFieldEnum)[keyof typeof FlavorDescriptorScalarFieldEnum]


  export const ScoreFlavorDescriptorScalarFieldEnum: {
    id: 'id',
    scoreId: 'scoreId',
    flavorDescriptorId: 'flavorDescriptorId',
    intensity: 'intensity',
    createdAt: 'createdAt'
  };

  export type ScoreFlavorDescriptorScalarFieldEnum = (typeof ScoreFlavorDescriptorScalarFieldEnum)[keyof typeof ScoreFlavorDescriptorScalarFieldEnum]


  export const GreenBeanGradingScalarFieldEnum: {
    id: 'id',
    sampleId: 'sampleId',
    gradingSystem: 'gradingSystem',
    primaryDefects: 'primaryDefects',
    secondaryDefects: 'secondaryDefects',
    fullDefectEquivalents: 'fullDefectEquivalents',
    defectBreakdown: 'defectBreakdown',
    screenSizeDistribution: 'screenSizeDistribution',
    averageScreenSize: 'averageScreenSize',
    uniformityPercentage: 'uniformityPercentage',
    moistureContent: 'moistureContent',
    waterActivity: 'waterActivity',
    bulkDensity: 'bulkDensity',
    colorScore: 'colorScore',
    uniformityScore: 'uniformityScore',
    grade: 'grade',
    classification: 'classification',
    qualityScore: 'qualityScore',
    gradedBy: 'gradedBy',
    gradedAt: 'gradedAt',
    certifiedBy: 'certifiedBy',
    certificationDate: 'certificationDate',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GreenBeanGradingScalarFieldEnum = (typeof GreenBeanGradingScalarFieldEnum)[keyof typeof GreenBeanGradingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'SubscriptionPlan'
   */
  export type EnumSubscriptionPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionPlan'>
    


  /**
   * Reference to a field of type 'SubscriptionPlan[]'
   */
  export type ListEnumSubscriptionPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionPlan[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'InvitationStatus'
   */
  export type EnumInvitationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvitationStatus'>
    


  /**
   * Reference to a field of type 'InvitationStatus[]'
   */
  export type ListEnumInvitationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvitationStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ProcessingMethod'
   */
  export type EnumProcessingMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessingMethod'>
    


  /**
   * Reference to a field of type 'ProcessingMethod[]'
   */
  export type ListEnumProcessingMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessingMethod[]'>
    


  /**
   * Reference to a field of type 'RoastLevel'
   */
  export type EnumRoastLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoastLevel'>
    


  /**
   * Reference to a field of type 'RoastLevel[]'
   */
  export type ListEnumRoastLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoastLevel[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ScoringSystem'
   */
  export type EnumScoringSystemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScoringSystem'>
    


  /**
   * Reference to a field of type 'ScoringSystem[]'
   */
  export type ListEnumScoringSystemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScoringSystem[]'>
    


  /**
   * Reference to a field of type 'SessionStatus'
   */
  export type EnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus'>
    


  /**
   * Reference to a field of type 'SessionStatus[]'
   */
  export type ListEnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus[]'>
    


  /**
   * Reference to a field of type 'ParticipantRole'
   */
  export type EnumParticipantRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParticipantRole'>
    


  /**
   * Reference to a field of type 'ParticipantRole[]'
   */
  export type ListEnumParticipantRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParticipantRole[]'>
    


  /**
   * Reference to a field of type 'FlavorCategory'
   */
  export type EnumFlavorCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FlavorCategory'>
    


  /**
   * Reference to a field of type 'FlavorCategory[]'
   */
  export type ListEnumFlavorCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FlavorCategory[]'>
    


  /**
   * Reference to a field of type 'GradingSystem'
   */
  export type EnumGradingSystemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradingSystem'>
    


  /**
   * Reference to a field of type 'GradingSystem[]'
   */
  export type ListEnumGradingSystemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradingSystem[]'>
    


  /**
   * Reference to a field of type 'GradeClassification'
   */
  export type EnumGradeClassificationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeClassification'>
    


  /**
   * Reference to a field of type 'GradeClassification[]'
   */
  export type ListEnumGradeClassificationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeClassification[]'>
    
  /**
   * Deep Input Types
   */


  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    slug?: StringFilter<"Organization"> | string
    domain?: StringNullableFilter<"Organization"> | string | null
    subdomain?: StringFilter<"Organization"> | string
    description?: StringNullableFilter<"Organization"> | string | null
    logo?: StringNullableFilter<"Organization"> | string | null
    website?: StringNullableFilter<"Organization"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Organization"> | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFilter<"Organization"> | $Enums.SubscriptionPlan
    trialEndsAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    subscriptionEndsAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"Organization"> | string | null
    settings?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
    cuppingSessions?: CuppingSessionListRelationFilter
    samples?: SampleListRelationFilter
    templates?: CuppingTemplateListRelationFilter
    invitations?: InvitationListRelationFilter
    flavorDescriptors?: FlavorDescriptorListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    domain?: SortOrderInput | SortOrder
    subdomain?: SortOrder
    description?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrder
    subscriptionPlan?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    subscriptionEndsAt?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    cuppingSessions?: CuppingSessionOrderByRelationAggregateInput
    samples?: SampleOrderByRelationAggregateInput
    templates?: CuppingTemplateOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    flavorDescriptors?: FlavorDescriptorOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    domain?: string
    subdomain?: string
    stripeCustomerId?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    description?: StringNullableFilter<"Organization"> | string | null
    logo?: StringNullableFilter<"Organization"> | string | null
    website?: StringNullableFilter<"Organization"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Organization"> | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFilter<"Organization"> | $Enums.SubscriptionPlan
    trialEndsAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    subscriptionEndsAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    settings?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
    cuppingSessions?: CuppingSessionListRelationFilter
    samples?: SampleListRelationFilter
    templates?: CuppingTemplateListRelationFilter
    invitations?: InvitationListRelationFilter
    flavorDescriptors?: FlavorDescriptorListRelationFilter
  }, "id" | "slug" | "domain" | "subdomain" | "stripeCustomerId">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    domain?: SortOrderInput | SortOrder
    subdomain?: SortOrder
    description?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrder
    subscriptionPlan?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    subscriptionEndsAt?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringWithAggregatesFilter<"Organization"> | string
    domain?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    subdomain?: StringWithAggregatesFilter<"Organization"> | string
    description?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    website?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusWithAggregatesFilter<"Organization"> | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanWithAggregatesFilter<"Organization"> | $Enums.SubscriptionPlan
    trialEndsAt?: DateTimeNullableWithAggregatesFilter<"Organization"> | Date | string | null
    subscriptionEndsAt?: DateTimeNullableWithAggregatesFilter<"Organization"> | Date | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    settings?: JsonWithAggregatesFilter<"Organization">
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    organizationId?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    cuppingSessions?: CuppingSessionListRelationFilter
    scores?: ScoreListRelationFilter
    sessionParticipants?: SessionParticipantListRelationFilter
    createdTemplates?: CuppingTemplateListRelationFilter
    createdFlavorDescriptors?: FlavorDescriptorListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    cuppingSessions?: CuppingSessionOrderByRelationAggregateInput
    scores?: ScoreOrderByRelationAggregateInput
    sessionParticipants?: SessionParticipantOrderByRelationAggregateInput
    createdTemplates?: CuppingTemplateOrderByRelationAggregateInput
    createdFlavorDescriptors?: FlavorDescriptorOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    organizationId?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    cuppingSessions?: CuppingSessionListRelationFilter
    scores?: ScoreListRelationFilter
    sessionParticipants?: SessionParticipantListRelationFilter
    createdTemplates?: CuppingTemplateListRelationFilter
    createdFlavorDescriptors?: FlavorDescriptorListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    organizationId?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    preferences?: JsonWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type InvitationWhereInput = {
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    id?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    role?: EnumUserRoleFilter<"Invitation"> | $Enums.UserRole
    token?: StringFilter<"Invitation"> | string
    status?: EnumInvitationStatusFilter<"Invitation"> | $Enums.InvitationStatus
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    invitedBy?: StringFilter<"Invitation"> | string
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    updatedAt?: DateTimeFilter<"Invitation"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type InvitationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    invitedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type InvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_organizationId?: InvitationEmailOrganizationIdCompoundUniqueInput
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    email?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    role?: EnumUserRoleFilter<"Invitation"> | $Enums.UserRole
    status?: EnumInvitationStatusFilter<"Invitation"> | $Enums.InvitationStatus
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    invitedBy?: StringFilter<"Invitation"> | string
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    updatedAt?: DateTimeFilter<"Invitation"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id" | "token" | "email_organizationId">

  export type InvitationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    invitedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    OR?: InvitationScalarWhereWithAggregatesInput[]
    NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invitation"> | string
    email?: StringWithAggregatesFilter<"Invitation"> | string
    organizationId?: StringWithAggregatesFilter<"Invitation"> | string
    role?: EnumUserRoleWithAggregatesFilter<"Invitation"> | $Enums.UserRole
    token?: StringWithAggregatesFilter<"Invitation"> | string
    status?: EnumInvitationStatusWithAggregatesFilter<"Invitation"> | $Enums.InvitationStatus
    expiresAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    invitedBy?: StringWithAggregatesFilter<"Invitation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
  }

  export type SampleWhereInput = {
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    id?: StringFilter<"Sample"> | string
    organizationId?: StringFilter<"Sample"> | string
    name?: StringFilter<"Sample"> | string
    description?: StringNullableFilter<"Sample"> | string | null
    code?: StringNullableFilter<"Sample"> | string | null
    origin?: StringFilter<"Sample"> | string
    region?: StringNullableFilter<"Sample"> | string | null
    farm?: StringNullableFilter<"Sample"> | string | null
    producer?: StringNullableFilter<"Sample"> | string | null
    variety?: StringNullableFilter<"Sample"> | string | null
    altitude?: IntNullableFilter<"Sample"> | number | null
    processingMethod?: EnumProcessingMethodNullableFilter<"Sample"> | $Enums.ProcessingMethod | null
    harvestDate?: DateTimeNullableFilter<"Sample"> | Date | string | null
    roaster?: StringNullableFilter<"Sample"> | string | null
    roastDate?: DateTimeNullableFilter<"Sample"> | Date | string | null
    roastLevel?: EnumRoastLevelNullableFilter<"Sample"> | $Enums.RoastLevel | null
    moisture?: FloatNullableFilter<"Sample"> | number | null
    density?: FloatNullableFilter<"Sample"> | number | null
    screenSize?: StringNullableFilter<"Sample"> | string | null
    notes?: StringNullableFilter<"Sample"> | string | null
    imageUrl?: StringNullableFilter<"Sample"> | string | null
    tags?: StringNullableListFilter<"Sample">
    createdAt?: DateTimeFilter<"Sample"> | Date | string
    updatedAt?: DateTimeFilter<"Sample"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    sessionSamples?: SessionSampleListRelationFilter
    scores?: ScoreListRelationFilter
    greenBeanGrading?: XOR<GreenBeanGradingNullableScalarRelationFilter, GreenBeanGradingWhereInput> | null
  }

  export type SampleOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    origin?: SortOrder
    region?: SortOrderInput | SortOrder
    farm?: SortOrderInput | SortOrder
    producer?: SortOrderInput | SortOrder
    variety?: SortOrderInput | SortOrder
    altitude?: SortOrderInput | SortOrder
    processingMethod?: SortOrderInput | SortOrder
    harvestDate?: SortOrderInput | SortOrder
    roaster?: SortOrderInput | SortOrder
    roastDate?: SortOrderInput | SortOrder
    roastLevel?: SortOrderInput | SortOrder
    moisture?: SortOrderInput | SortOrder
    density?: SortOrderInput | SortOrder
    screenSize?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    sessionSamples?: SessionSampleOrderByRelationAggregateInput
    scores?: ScoreOrderByRelationAggregateInput
    greenBeanGrading?: GreenBeanGradingOrderByWithRelationInput
  }

  export type SampleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    organizationId?: StringFilter<"Sample"> | string
    name?: StringFilter<"Sample"> | string
    description?: StringNullableFilter<"Sample"> | string | null
    code?: StringNullableFilter<"Sample"> | string | null
    origin?: StringFilter<"Sample"> | string
    region?: StringNullableFilter<"Sample"> | string | null
    farm?: StringNullableFilter<"Sample"> | string | null
    producer?: StringNullableFilter<"Sample"> | string | null
    variety?: StringNullableFilter<"Sample"> | string | null
    altitude?: IntNullableFilter<"Sample"> | number | null
    processingMethod?: EnumProcessingMethodNullableFilter<"Sample"> | $Enums.ProcessingMethod | null
    harvestDate?: DateTimeNullableFilter<"Sample"> | Date | string | null
    roaster?: StringNullableFilter<"Sample"> | string | null
    roastDate?: DateTimeNullableFilter<"Sample"> | Date | string | null
    roastLevel?: EnumRoastLevelNullableFilter<"Sample"> | $Enums.RoastLevel | null
    moisture?: FloatNullableFilter<"Sample"> | number | null
    density?: FloatNullableFilter<"Sample"> | number | null
    screenSize?: StringNullableFilter<"Sample"> | string | null
    notes?: StringNullableFilter<"Sample"> | string | null
    imageUrl?: StringNullableFilter<"Sample"> | string | null
    tags?: StringNullableListFilter<"Sample">
    createdAt?: DateTimeFilter<"Sample"> | Date | string
    updatedAt?: DateTimeFilter<"Sample"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    sessionSamples?: SessionSampleListRelationFilter
    scores?: ScoreListRelationFilter
    greenBeanGrading?: XOR<GreenBeanGradingNullableScalarRelationFilter, GreenBeanGradingWhereInput> | null
  }, "id">

  export type SampleOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    origin?: SortOrder
    region?: SortOrderInput | SortOrder
    farm?: SortOrderInput | SortOrder
    producer?: SortOrderInput | SortOrder
    variety?: SortOrderInput | SortOrder
    altitude?: SortOrderInput | SortOrder
    processingMethod?: SortOrderInput | SortOrder
    harvestDate?: SortOrderInput | SortOrder
    roaster?: SortOrderInput | SortOrder
    roastDate?: SortOrderInput | SortOrder
    roastLevel?: SortOrderInput | SortOrder
    moisture?: SortOrderInput | SortOrder
    density?: SortOrderInput | SortOrder
    screenSize?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SampleCountOrderByAggregateInput
    _avg?: SampleAvgOrderByAggregateInput
    _max?: SampleMaxOrderByAggregateInput
    _min?: SampleMinOrderByAggregateInput
    _sum?: SampleSumOrderByAggregateInput
  }

  export type SampleScalarWhereWithAggregatesInput = {
    AND?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    OR?: SampleScalarWhereWithAggregatesInput[]
    NOT?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sample"> | string
    organizationId?: StringWithAggregatesFilter<"Sample"> | string
    name?: StringWithAggregatesFilter<"Sample"> | string
    description?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    code?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    origin?: StringWithAggregatesFilter<"Sample"> | string
    region?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    farm?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    producer?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    variety?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    altitude?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    processingMethod?: EnumProcessingMethodNullableWithAggregatesFilter<"Sample"> | $Enums.ProcessingMethod | null
    harvestDate?: DateTimeNullableWithAggregatesFilter<"Sample"> | Date | string | null
    roaster?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    roastDate?: DateTimeNullableWithAggregatesFilter<"Sample"> | Date | string | null
    roastLevel?: EnumRoastLevelNullableWithAggregatesFilter<"Sample"> | $Enums.RoastLevel | null
    moisture?: FloatNullableWithAggregatesFilter<"Sample"> | number | null
    density?: FloatNullableWithAggregatesFilter<"Sample"> | number | null
    screenSize?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    tags?: StringNullableListFilter<"Sample">
    createdAt?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
  }

  export type CuppingTemplateWhereInput = {
    AND?: CuppingTemplateWhereInput | CuppingTemplateWhereInput[]
    OR?: CuppingTemplateWhereInput[]
    NOT?: CuppingTemplateWhereInput | CuppingTemplateWhereInput[]
    id?: StringFilter<"CuppingTemplate"> | string
    organizationId?: StringFilter<"CuppingTemplate"> | string
    createdBy?: StringFilter<"CuppingTemplate"> | string
    name?: StringFilter<"CuppingTemplate"> | string
    description?: StringNullableFilter<"CuppingTemplate"> | string | null
    isDefault?: BoolFilter<"CuppingTemplate"> | boolean
    isPublic?: BoolFilter<"CuppingTemplate"> | boolean
    scoringSystem?: EnumScoringSystemFilter<"CuppingTemplate"> | $Enums.ScoringSystem
    maxScore?: IntFilter<"CuppingTemplate"> | number
    categories?: JsonFilter<"CuppingTemplate">
    createdAt?: DateTimeFilter<"CuppingTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"CuppingTemplate"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    cuppingSessions?: CuppingSessionListRelationFilter
  }

  export type CuppingTemplateOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    scoringSystem?: SortOrder
    maxScore?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    cuppingSessions?: CuppingSessionOrderByRelationAggregateInput
  }

  export type CuppingTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CuppingTemplateWhereInput | CuppingTemplateWhereInput[]
    OR?: CuppingTemplateWhereInput[]
    NOT?: CuppingTemplateWhereInput | CuppingTemplateWhereInput[]
    organizationId?: StringFilter<"CuppingTemplate"> | string
    createdBy?: StringFilter<"CuppingTemplate"> | string
    name?: StringFilter<"CuppingTemplate"> | string
    description?: StringNullableFilter<"CuppingTemplate"> | string | null
    isDefault?: BoolFilter<"CuppingTemplate"> | boolean
    isPublic?: BoolFilter<"CuppingTemplate"> | boolean
    scoringSystem?: EnumScoringSystemFilter<"CuppingTemplate"> | $Enums.ScoringSystem
    maxScore?: IntFilter<"CuppingTemplate"> | number
    categories?: JsonFilter<"CuppingTemplate">
    createdAt?: DateTimeFilter<"CuppingTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"CuppingTemplate"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    cuppingSessions?: CuppingSessionListRelationFilter
  }, "id">

  export type CuppingTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    scoringSystem?: SortOrder
    maxScore?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CuppingTemplateCountOrderByAggregateInput
    _avg?: CuppingTemplateAvgOrderByAggregateInput
    _max?: CuppingTemplateMaxOrderByAggregateInput
    _min?: CuppingTemplateMinOrderByAggregateInput
    _sum?: CuppingTemplateSumOrderByAggregateInput
  }

  export type CuppingTemplateScalarWhereWithAggregatesInput = {
    AND?: CuppingTemplateScalarWhereWithAggregatesInput | CuppingTemplateScalarWhereWithAggregatesInput[]
    OR?: CuppingTemplateScalarWhereWithAggregatesInput[]
    NOT?: CuppingTemplateScalarWhereWithAggregatesInput | CuppingTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CuppingTemplate"> | string
    organizationId?: StringWithAggregatesFilter<"CuppingTemplate"> | string
    createdBy?: StringWithAggregatesFilter<"CuppingTemplate"> | string
    name?: StringWithAggregatesFilter<"CuppingTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"CuppingTemplate"> | string | null
    isDefault?: BoolWithAggregatesFilter<"CuppingTemplate"> | boolean
    isPublic?: BoolWithAggregatesFilter<"CuppingTemplate"> | boolean
    scoringSystem?: EnumScoringSystemWithAggregatesFilter<"CuppingTemplate"> | $Enums.ScoringSystem
    maxScore?: IntWithAggregatesFilter<"CuppingTemplate"> | number
    categories?: JsonWithAggregatesFilter<"CuppingTemplate">
    createdAt?: DateTimeWithAggregatesFilter<"CuppingTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CuppingTemplate"> | Date | string
  }

  export type CuppingSessionWhereInput = {
    AND?: CuppingSessionWhereInput | CuppingSessionWhereInput[]
    OR?: CuppingSessionWhereInput[]
    NOT?: CuppingSessionWhereInput | CuppingSessionWhereInput[]
    id?: StringFilter<"CuppingSession"> | string
    organizationId?: StringFilter<"CuppingSession"> | string
    createdBy?: StringFilter<"CuppingSession"> | string
    name?: StringFilter<"CuppingSession"> | string
    description?: StringNullableFilter<"CuppingSession"> | string | null
    location?: StringNullableFilter<"CuppingSession"> | string | null
    templateId?: StringNullableFilter<"CuppingSession"> | string | null
    blindTasting?: BoolFilter<"CuppingSession"> | boolean
    allowComments?: BoolFilter<"CuppingSession"> | boolean
    requireCalibration?: BoolFilter<"CuppingSession"> | boolean
    status?: EnumSessionStatusFilter<"CuppingSession"> | $Enums.SessionStatus
    scheduledAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    notes?: StringNullableFilter<"CuppingSession"> | string | null
    tags?: StringNullableListFilter<"CuppingSession">
    settings?: JsonFilter<"CuppingSession">
    createdAt?: DateTimeFilter<"CuppingSession"> | Date | string
    updatedAt?: DateTimeFilter<"CuppingSession"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    template?: XOR<CuppingTemplateNullableScalarRelationFilter, CuppingTemplateWhereInput> | null
    participants?: SessionParticipantListRelationFilter
    samples?: SessionSampleListRelationFilter
    scores?: ScoreListRelationFilter
  }

  export type CuppingSessionOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    templateId?: SortOrderInput | SortOrder
    blindTasting?: SortOrder
    allowComments?: SortOrder
    requireCalibration?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    tags?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    template?: CuppingTemplateOrderByWithRelationInput
    participants?: SessionParticipantOrderByRelationAggregateInput
    samples?: SessionSampleOrderByRelationAggregateInput
    scores?: ScoreOrderByRelationAggregateInput
  }

  export type CuppingSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CuppingSessionWhereInput | CuppingSessionWhereInput[]
    OR?: CuppingSessionWhereInput[]
    NOT?: CuppingSessionWhereInput | CuppingSessionWhereInput[]
    organizationId?: StringFilter<"CuppingSession"> | string
    createdBy?: StringFilter<"CuppingSession"> | string
    name?: StringFilter<"CuppingSession"> | string
    description?: StringNullableFilter<"CuppingSession"> | string | null
    location?: StringNullableFilter<"CuppingSession"> | string | null
    templateId?: StringNullableFilter<"CuppingSession"> | string | null
    blindTasting?: BoolFilter<"CuppingSession"> | boolean
    allowComments?: BoolFilter<"CuppingSession"> | boolean
    requireCalibration?: BoolFilter<"CuppingSession"> | boolean
    status?: EnumSessionStatusFilter<"CuppingSession"> | $Enums.SessionStatus
    scheduledAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    notes?: StringNullableFilter<"CuppingSession"> | string | null
    tags?: StringNullableListFilter<"CuppingSession">
    settings?: JsonFilter<"CuppingSession">
    createdAt?: DateTimeFilter<"CuppingSession"> | Date | string
    updatedAt?: DateTimeFilter<"CuppingSession"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    template?: XOR<CuppingTemplateNullableScalarRelationFilter, CuppingTemplateWhereInput> | null
    participants?: SessionParticipantListRelationFilter
    samples?: SessionSampleListRelationFilter
    scores?: ScoreListRelationFilter
  }, "id">

  export type CuppingSessionOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    templateId?: SortOrderInput | SortOrder
    blindTasting?: SortOrder
    allowComments?: SortOrder
    requireCalibration?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    tags?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CuppingSessionCountOrderByAggregateInput
    _max?: CuppingSessionMaxOrderByAggregateInput
    _min?: CuppingSessionMinOrderByAggregateInput
  }

  export type CuppingSessionScalarWhereWithAggregatesInput = {
    AND?: CuppingSessionScalarWhereWithAggregatesInput | CuppingSessionScalarWhereWithAggregatesInput[]
    OR?: CuppingSessionScalarWhereWithAggregatesInput[]
    NOT?: CuppingSessionScalarWhereWithAggregatesInput | CuppingSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CuppingSession"> | string
    organizationId?: StringWithAggregatesFilter<"CuppingSession"> | string
    createdBy?: StringWithAggregatesFilter<"CuppingSession"> | string
    name?: StringWithAggregatesFilter<"CuppingSession"> | string
    description?: StringNullableWithAggregatesFilter<"CuppingSession"> | string | null
    location?: StringNullableWithAggregatesFilter<"CuppingSession"> | string | null
    templateId?: StringNullableWithAggregatesFilter<"CuppingSession"> | string | null
    blindTasting?: BoolWithAggregatesFilter<"CuppingSession"> | boolean
    allowComments?: BoolWithAggregatesFilter<"CuppingSession"> | boolean
    requireCalibration?: BoolWithAggregatesFilter<"CuppingSession"> | boolean
    status?: EnumSessionStatusWithAggregatesFilter<"CuppingSession"> | $Enums.SessionStatus
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"CuppingSession"> | Date | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"CuppingSession"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"CuppingSession"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"CuppingSession"> | string | null
    tags?: StringNullableListFilter<"CuppingSession">
    settings?: JsonWithAggregatesFilter<"CuppingSession">
    createdAt?: DateTimeWithAggregatesFilter<"CuppingSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CuppingSession"> | Date | string
  }

  export type SessionParticipantWhereInput = {
    AND?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    OR?: SessionParticipantWhereInput[]
    NOT?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    id?: StringFilter<"SessionParticipant"> | string
    sessionId?: StringFilter<"SessionParticipant"> | string
    userId?: StringFilter<"SessionParticipant"> | string
    role?: EnumParticipantRoleFilter<"SessionParticipant"> | $Enums.ParticipantRole
    joinedAt?: DateTimeFilter<"SessionParticipant"> | Date | string
    leftAt?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    isActive?: BoolFilter<"SessionParticipant"> | boolean
    isCalibrated?: BoolFilter<"SessionParticipant"> | boolean
    calibratedAt?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    session?: XOR<CuppingSessionScalarRelationFilter, CuppingSessionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionParticipantOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isCalibrated?: SortOrder
    calibratedAt?: SortOrderInput | SortOrder
    session?: CuppingSessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SessionParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_userId?: SessionParticipantSessionIdUserIdCompoundUniqueInput
    AND?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    OR?: SessionParticipantWhereInput[]
    NOT?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    sessionId?: StringFilter<"SessionParticipant"> | string
    userId?: StringFilter<"SessionParticipant"> | string
    role?: EnumParticipantRoleFilter<"SessionParticipant"> | $Enums.ParticipantRole
    joinedAt?: DateTimeFilter<"SessionParticipant"> | Date | string
    leftAt?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    isActive?: BoolFilter<"SessionParticipant"> | boolean
    isCalibrated?: BoolFilter<"SessionParticipant"> | boolean
    calibratedAt?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    session?: XOR<CuppingSessionScalarRelationFilter, CuppingSessionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionId_userId">

  export type SessionParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isCalibrated?: SortOrder
    calibratedAt?: SortOrderInput | SortOrder
    _count?: SessionParticipantCountOrderByAggregateInput
    _max?: SessionParticipantMaxOrderByAggregateInput
    _min?: SessionParticipantMinOrderByAggregateInput
  }

  export type SessionParticipantScalarWhereWithAggregatesInput = {
    AND?: SessionParticipantScalarWhereWithAggregatesInput | SessionParticipantScalarWhereWithAggregatesInput[]
    OR?: SessionParticipantScalarWhereWithAggregatesInput[]
    NOT?: SessionParticipantScalarWhereWithAggregatesInput | SessionParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionParticipant"> | string
    sessionId?: StringWithAggregatesFilter<"SessionParticipant"> | string
    userId?: StringWithAggregatesFilter<"SessionParticipant"> | string
    role?: EnumParticipantRoleWithAggregatesFilter<"SessionParticipant"> | $Enums.ParticipantRole
    joinedAt?: DateTimeWithAggregatesFilter<"SessionParticipant"> | Date | string
    leftAt?: DateTimeNullableWithAggregatesFilter<"SessionParticipant"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"SessionParticipant"> | boolean
    isCalibrated?: BoolWithAggregatesFilter<"SessionParticipant"> | boolean
    calibratedAt?: DateTimeNullableWithAggregatesFilter<"SessionParticipant"> | Date | string | null
  }

  export type SessionSampleWhereInput = {
    AND?: SessionSampleWhereInput | SessionSampleWhereInput[]
    OR?: SessionSampleWhereInput[]
    NOT?: SessionSampleWhereInput | SessionSampleWhereInput[]
    id?: StringFilter<"SessionSample"> | string
    sessionId?: StringFilter<"SessionSample"> | string
    sampleId?: StringFilter<"SessionSample"> | string
    position?: IntFilter<"SessionSample"> | number
    isBlind?: BoolFilter<"SessionSample"> | boolean
    blindCode?: StringNullableFilter<"SessionSample"> | string | null
    grindSize?: StringNullableFilter<"SessionSample"> | string | null
    waterTemp?: FloatNullableFilter<"SessionSample"> | number | null
    brewRatio?: StringNullableFilter<"SessionSample"> | string | null
    steepTime?: IntNullableFilter<"SessionSample"> | number | null
    aiSummary?: StringNullableFilter<"SessionSample"> | string | null
    aiGeneratedAt?: DateTimeNullableFilter<"SessionSample"> | Date | string | null
    addedAt?: DateTimeFilter<"SessionSample"> | Date | string
    session?: XOR<CuppingSessionScalarRelationFilter, CuppingSessionWhereInput>
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    scores?: ScoreListRelationFilter
  }

  export type SessionSampleOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sampleId?: SortOrder
    position?: SortOrder
    isBlind?: SortOrder
    blindCode?: SortOrderInput | SortOrder
    grindSize?: SortOrderInput | SortOrder
    waterTemp?: SortOrderInput | SortOrder
    brewRatio?: SortOrderInput | SortOrder
    steepTime?: SortOrderInput | SortOrder
    aiSummary?: SortOrderInput | SortOrder
    aiGeneratedAt?: SortOrderInput | SortOrder
    addedAt?: SortOrder
    session?: CuppingSessionOrderByWithRelationInput
    sample?: SampleOrderByWithRelationInput
    scores?: ScoreOrderByRelationAggregateInput
  }

  export type SessionSampleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_sampleId?: SessionSampleSessionIdSampleIdCompoundUniqueInput
    sessionId_position?: SessionSampleSessionIdPositionCompoundUniqueInput
    AND?: SessionSampleWhereInput | SessionSampleWhereInput[]
    OR?: SessionSampleWhereInput[]
    NOT?: SessionSampleWhereInput | SessionSampleWhereInput[]
    sessionId?: StringFilter<"SessionSample"> | string
    sampleId?: StringFilter<"SessionSample"> | string
    position?: IntFilter<"SessionSample"> | number
    isBlind?: BoolFilter<"SessionSample"> | boolean
    blindCode?: StringNullableFilter<"SessionSample"> | string | null
    grindSize?: StringNullableFilter<"SessionSample"> | string | null
    waterTemp?: FloatNullableFilter<"SessionSample"> | number | null
    brewRatio?: StringNullableFilter<"SessionSample"> | string | null
    steepTime?: IntNullableFilter<"SessionSample"> | number | null
    aiSummary?: StringNullableFilter<"SessionSample"> | string | null
    aiGeneratedAt?: DateTimeNullableFilter<"SessionSample"> | Date | string | null
    addedAt?: DateTimeFilter<"SessionSample"> | Date | string
    session?: XOR<CuppingSessionScalarRelationFilter, CuppingSessionWhereInput>
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    scores?: ScoreListRelationFilter
  }, "id" | "sessionId_sampleId" | "sessionId_position">

  export type SessionSampleOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sampleId?: SortOrder
    position?: SortOrder
    isBlind?: SortOrder
    blindCode?: SortOrderInput | SortOrder
    grindSize?: SortOrderInput | SortOrder
    waterTemp?: SortOrderInput | SortOrder
    brewRatio?: SortOrderInput | SortOrder
    steepTime?: SortOrderInput | SortOrder
    aiSummary?: SortOrderInput | SortOrder
    aiGeneratedAt?: SortOrderInput | SortOrder
    addedAt?: SortOrder
    _count?: SessionSampleCountOrderByAggregateInput
    _avg?: SessionSampleAvgOrderByAggregateInput
    _max?: SessionSampleMaxOrderByAggregateInput
    _min?: SessionSampleMinOrderByAggregateInput
    _sum?: SessionSampleSumOrderByAggregateInput
  }

  export type SessionSampleScalarWhereWithAggregatesInput = {
    AND?: SessionSampleScalarWhereWithAggregatesInput | SessionSampleScalarWhereWithAggregatesInput[]
    OR?: SessionSampleScalarWhereWithAggregatesInput[]
    NOT?: SessionSampleScalarWhereWithAggregatesInput | SessionSampleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionSample"> | string
    sessionId?: StringWithAggregatesFilter<"SessionSample"> | string
    sampleId?: StringWithAggregatesFilter<"SessionSample"> | string
    position?: IntWithAggregatesFilter<"SessionSample"> | number
    isBlind?: BoolWithAggregatesFilter<"SessionSample"> | boolean
    blindCode?: StringNullableWithAggregatesFilter<"SessionSample"> | string | null
    grindSize?: StringNullableWithAggregatesFilter<"SessionSample"> | string | null
    waterTemp?: FloatNullableWithAggregatesFilter<"SessionSample"> | number | null
    brewRatio?: StringNullableWithAggregatesFilter<"SessionSample"> | string | null
    steepTime?: IntNullableWithAggregatesFilter<"SessionSample"> | number | null
    aiSummary?: StringNullableWithAggregatesFilter<"SessionSample"> | string | null
    aiGeneratedAt?: DateTimeNullableWithAggregatesFilter<"SessionSample"> | Date | string | null
    addedAt?: DateTimeWithAggregatesFilter<"SessionSample"> | Date | string
  }

  export type ScoreWhereInput = {
    AND?: ScoreWhereInput | ScoreWhereInput[]
    OR?: ScoreWhereInput[]
    NOT?: ScoreWhereInput | ScoreWhereInput[]
    id?: StringFilter<"Score"> | string
    sessionId?: StringFilter<"Score"> | string
    sessionSampleId?: StringFilter<"Score"> | string
    sampleId?: StringFilter<"Score"> | string
    userId?: StringFilter<"Score"> | string
    totalScore?: FloatFilter<"Score"> | number
    maxScore?: FloatFilter<"Score"> | number
    scores?: JsonFilter<"Score">
    aroma?: FloatNullableFilter<"Score"> | number | null
    flavor?: FloatNullableFilter<"Score"> | number | null
    aftertaste?: FloatNullableFilter<"Score"> | number | null
    acidity?: FloatNullableFilter<"Score"> | number | null
    body?: FloatNullableFilter<"Score"> | number | null
    balance?: FloatNullableFilter<"Score"> | number | null
    sweetness?: FloatNullableFilter<"Score"> | number | null
    cleanliness?: FloatNullableFilter<"Score"> | number | null
    uniformity?: FloatNullableFilter<"Score"> | number | null
    overall?: FloatNullableFilter<"Score"> | number | null
    defects?: JsonFilter<"Score">
    notes?: StringNullableFilter<"Score"> | string | null
    privateNotes?: StringNullableFilter<"Score"> | string | null
    voiceNotes?: StringNullableFilter<"Score"> | string | null
    voiceFileUrl?: StringNullableFilter<"Score"> | string | null
    isComplete?: BoolFilter<"Score"> | boolean
    isSubmitted?: BoolFilter<"Score"> | boolean
    submittedAt?: DateTimeNullableFilter<"Score"> | Date | string | null
    createdAt?: DateTimeFilter<"Score"> | Date | string
    updatedAt?: DateTimeFilter<"Score"> | Date | string
    session?: XOR<CuppingSessionScalarRelationFilter, CuppingSessionWhereInput>
    sessionSample?: XOR<SessionSampleScalarRelationFilter, SessionSampleWhereInput>
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    flavorDescriptors?: ScoreFlavorDescriptorListRelationFilter
  }

  export type ScoreOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionSampleId?: SortOrder
    sampleId?: SortOrder
    userId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    scores?: SortOrder
    aroma?: SortOrderInput | SortOrder
    flavor?: SortOrderInput | SortOrder
    aftertaste?: SortOrderInput | SortOrder
    acidity?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    sweetness?: SortOrderInput | SortOrder
    cleanliness?: SortOrderInput | SortOrder
    uniformity?: SortOrderInput | SortOrder
    overall?: SortOrderInput | SortOrder
    defects?: SortOrder
    notes?: SortOrderInput | SortOrder
    privateNotes?: SortOrderInput | SortOrder
    voiceNotes?: SortOrderInput | SortOrder
    voiceFileUrl?: SortOrderInput | SortOrder
    isComplete?: SortOrder
    isSubmitted?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    session?: CuppingSessionOrderByWithRelationInput
    sessionSample?: SessionSampleOrderByWithRelationInput
    sample?: SampleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    flavorDescriptors?: ScoreFlavorDescriptorOrderByRelationAggregateInput
  }

  export type ScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_sampleId_userId?: ScoreSessionIdSampleIdUserIdCompoundUniqueInput
    AND?: ScoreWhereInput | ScoreWhereInput[]
    OR?: ScoreWhereInput[]
    NOT?: ScoreWhereInput | ScoreWhereInput[]
    sessionId?: StringFilter<"Score"> | string
    sessionSampleId?: StringFilter<"Score"> | string
    sampleId?: StringFilter<"Score"> | string
    userId?: StringFilter<"Score"> | string
    totalScore?: FloatFilter<"Score"> | number
    maxScore?: FloatFilter<"Score"> | number
    scores?: JsonFilter<"Score">
    aroma?: FloatNullableFilter<"Score"> | number | null
    flavor?: FloatNullableFilter<"Score"> | number | null
    aftertaste?: FloatNullableFilter<"Score"> | number | null
    acidity?: FloatNullableFilter<"Score"> | number | null
    body?: FloatNullableFilter<"Score"> | number | null
    balance?: FloatNullableFilter<"Score"> | number | null
    sweetness?: FloatNullableFilter<"Score"> | number | null
    cleanliness?: FloatNullableFilter<"Score"> | number | null
    uniformity?: FloatNullableFilter<"Score"> | number | null
    overall?: FloatNullableFilter<"Score"> | number | null
    defects?: JsonFilter<"Score">
    notes?: StringNullableFilter<"Score"> | string | null
    privateNotes?: StringNullableFilter<"Score"> | string | null
    voiceNotes?: StringNullableFilter<"Score"> | string | null
    voiceFileUrl?: StringNullableFilter<"Score"> | string | null
    isComplete?: BoolFilter<"Score"> | boolean
    isSubmitted?: BoolFilter<"Score"> | boolean
    submittedAt?: DateTimeNullableFilter<"Score"> | Date | string | null
    createdAt?: DateTimeFilter<"Score"> | Date | string
    updatedAt?: DateTimeFilter<"Score"> | Date | string
    session?: XOR<CuppingSessionScalarRelationFilter, CuppingSessionWhereInput>
    sessionSample?: XOR<SessionSampleScalarRelationFilter, SessionSampleWhereInput>
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    flavorDescriptors?: ScoreFlavorDescriptorListRelationFilter
  }, "id" | "sessionId_sampleId_userId">

  export type ScoreOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionSampleId?: SortOrder
    sampleId?: SortOrder
    userId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    scores?: SortOrder
    aroma?: SortOrderInput | SortOrder
    flavor?: SortOrderInput | SortOrder
    aftertaste?: SortOrderInput | SortOrder
    acidity?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    sweetness?: SortOrderInput | SortOrder
    cleanliness?: SortOrderInput | SortOrder
    uniformity?: SortOrderInput | SortOrder
    overall?: SortOrderInput | SortOrder
    defects?: SortOrder
    notes?: SortOrderInput | SortOrder
    privateNotes?: SortOrderInput | SortOrder
    voiceNotes?: SortOrderInput | SortOrder
    voiceFileUrl?: SortOrderInput | SortOrder
    isComplete?: SortOrder
    isSubmitted?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScoreCountOrderByAggregateInput
    _avg?: ScoreAvgOrderByAggregateInput
    _max?: ScoreMaxOrderByAggregateInput
    _min?: ScoreMinOrderByAggregateInput
    _sum?: ScoreSumOrderByAggregateInput
  }

  export type ScoreScalarWhereWithAggregatesInput = {
    AND?: ScoreScalarWhereWithAggregatesInput | ScoreScalarWhereWithAggregatesInput[]
    OR?: ScoreScalarWhereWithAggregatesInput[]
    NOT?: ScoreScalarWhereWithAggregatesInput | ScoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Score"> | string
    sessionId?: StringWithAggregatesFilter<"Score"> | string
    sessionSampleId?: StringWithAggregatesFilter<"Score"> | string
    sampleId?: StringWithAggregatesFilter<"Score"> | string
    userId?: StringWithAggregatesFilter<"Score"> | string
    totalScore?: FloatWithAggregatesFilter<"Score"> | number
    maxScore?: FloatWithAggregatesFilter<"Score"> | number
    scores?: JsonWithAggregatesFilter<"Score">
    aroma?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    flavor?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    aftertaste?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    acidity?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    body?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    balance?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    sweetness?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    cleanliness?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    uniformity?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    overall?: FloatNullableWithAggregatesFilter<"Score"> | number | null
    defects?: JsonWithAggregatesFilter<"Score">
    notes?: StringNullableWithAggregatesFilter<"Score"> | string | null
    privateNotes?: StringNullableWithAggregatesFilter<"Score"> | string | null
    voiceNotes?: StringNullableWithAggregatesFilter<"Score"> | string | null
    voiceFileUrl?: StringNullableWithAggregatesFilter<"Score"> | string | null
    isComplete?: BoolWithAggregatesFilter<"Score"> | boolean
    isSubmitted?: BoolWithAggregatesFilter<"Score"> | boolean
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Score"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Score"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Score"> | Date | string
  }

  export type FlavorDescriptorWhereInput = {
    AND?: FlavorDescriptorWhereInput | FlavorDescriptorWhereInput[]
    OR?: FlavorDescriptorWhereInput[]
    NOT?: FlavorDescriptorWhereInput | FlavorDescriptorWhereInput[]
    id?: StringFilter<"FlavorDescriptor"> | string
    name?: StringFilter<"FlavorDescriptor"> | string
    category?: EnumFlavorCategoryFilter<"FlavorDescriptor"> | $Enums.FlavorCategory
    description?: StringNullableFilter<"FlavorDescriptor"> | string | null
    isDefault?: BoolFilter<"FlavorDescriptor"> | boolean
    organizationId?: StringNullableFilter<"FlavorDescriptor"> | string | null
    createdBy?: StringNullableFilter<"FlavorDescriptor"> | string | null
    createdAt?: DateTimeFilter<"FlavorDescriptor"> | Date | string
    updatedAt?: DateTimeFilter<"FlavorDescriptor"> | Date | string
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    scoreDescriptors?: ScoreFlavorDescriptorListRelationFilter
  }

  export type FlavorDescriptorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    scoreDescriptors?: ScoreFlavorDescriptorOrderByRelationAggregateInput
  }

  export type FlavorDescriptorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_organizationId?: FlavorDescriptorNameOrganizationIdCompoundUniqueInput
    AND?: FlavorDescriptorWhereInput | FlavorDescriptorWhereInput[]
    OR?: FlavorDescriptorWhereInput[]
    NOT?: FlavorDescriptorWhereInput | FlavorDescriptorWhereInput[]
    name?: StringFilter<"FlavorDescriptor"> | string
    category?: EnumFlavorCategoryFilter<"FlavorDescriptor"> | $Enums.FlavorCategory
    description?: StringNullableFilter<"FlavorDescriptor"> | string | null
    isDefault?: BoolFilter<"FlavorDescriptor"> | boolean
    organizationId?: StringNullableFilter<"FlavorDescriptor"> | string | null
    createdBy?: StringNullableFilter<"FlavorDescriptor"> | string | null
    createdAt?: DateTimeFilter<"FlavorDescriptor"> | Date | string
    updatedAt?: DateTimeFilter<"FlavorDescriptor"> | Date | string
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    scoreDescriptors?: ScoreFlavorDescriptorListRelationFilter
  }, "id" | "name_organizationId">

  export type FlavorDescriptorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FlavorDescriptorCountOrderByAggregateInput
    _max?: FlavorDescriptorMaxOrderByAggregateInput
    _min?: FlavorDescriptorMinOrderByAggregateInput
  }

  export type FlavorDescriptorScalarWhereWithAggregatesInput = {
    AND?: FlavorDescriptorScalarWhereWithAggregatesInput | FlavorDescriptorScalarWhereWithAggregatesInput[]
    OR?: FlavorDescriptorScalarWhereWithAggregatesInput[]
    NOT?: FlavorDescriptorScalarWhereWithAggregatesInput | FlavorDescriptorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlavorDescriptor"> | string
    name?: StringWithAggregatesFilter<"FlavorDescriptor"> | string
    category?: EnumFlavorCategoryWithAggregatesFilter<"FlavorDescriptor"> | $Enums.FlavorCategory
    description?: StringNullableWithAggregatesFilter<"FlavorDescriptor"> | string | null
    isDefault?: BoolWithAggregatesFilter<"FlavorDescriptor"> | boolean
    organizationId?: StringNullableWithAggregatesFilter<"FlavorDescriptor"> | string | null
    createdBy?: StringNullableWithAggregatesFilter<"FlavorDescriptor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FlavorDescriptor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FlavorDescriptor"> | Date | string
  }

  export type ScoreFlavorDescriptorWhereInput = {
    AND?: ScoreFlavorDescriptorWhereInput | ScoreFlavorDescriptorWhereInput[]
    OR?: ScoreFlavorDescriptorWhereInput[]
    NOT?: ScoreFlavorDescriptorWhereInput | ScoreFlavorDescriptorWhereInput[]
    id?: StringFilter<"ScoreFlavorDescriptor"> | string
    scoreId?: StringFilter<"ScoreFlavorDescriptor"> | string
    flavorDescriptorId?: StringFilter<"ScoreFlavorDescriptor"> | string
    intensity?: IntFilter<"ScoreFlavorDescriptor"> | number
    createdAt?: DateTimeFilter<"ScoreFlavorDescriptor"> | Date | string
    score?: XOR<ScoreScalarRelationFilter, ScoreWhereInput>
    flavorDescriptor?: XOR<FlavorDescriptorScalarRelationFilter, FlavorDescriptorWhereInput>
  }

  export type ScoreFlavorDescriptorOrderByWithRelationInput = {
    id?: SortOrder
    scoreId?: SortOrder
    flavorDescriptorId?: SortOrder
    intensity?: SortOrder
    createdAt?: SortOrder
    score?: ScoreOrderByWithRelationInput
    flavorDescriptor?: FlavorDescriptorOrderByWithRelationInput
  }

  export type ScoreFlavorDescriptorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scoreId_flavorDescriptorId?: ScoreFlavorDescriptorScoreIdFlavorDescriptorIdCompoundUniqueInput
    AND?: ScoreFlavorDescriptorWhereInput | ScoreFlavorDescriptorWhereInput[]
    OR?: ScoreFlavorDescriptorWhereInput[]
    NOT?: ScoreFlavorDescriptorWhereInput | ScoreFlavorDescriptorWhereInput[]
    scoreId?: StringFilter<"ScoreFlavorDescriptor"> | string
    flavorDescriptorId?: StringFilter<"ScoreFlavorDescriptor"> | string
    intensity?: IntFilter<"ScoreFlavorDescriptor"> | number
    createdAt?: DateTimeFilter<"ScoreFlavorDescriptor"> | Date | string
    score?: XOR<ScoreScalarRelationFilter, ScoreWhereInput>
    flavorDescriptor?: XOR<FlavorDescriptorScalarRelationFilter, FlavorDescriptorWhereInput>
  }, "id" | "scoreId_flavorDescriptorId">

  export type ScoreFlavorDescriptorOrderByWithAggregationInput = {
    id?: SortOrder
    scoreId?: SortOrder
    flavorDescriptorId?: SortOrder
    intensity?: SortOrder
    createdAt?: SortOrder
    _count?: ScoreFlavorDescriptorCountOrderByAggregateInput
    _avg?: ScoreFlavorDescriptorAvgOrderByAggregateInput
    _max?: ScoreFlavorDescriptorMaxOrderByAggregateInput
    _min?: ScoreFlavorDescriptorMinOrderByAggregateInput
    _sum?: ScoreFlavorDescriptorSumOrderByAggregateInput
  }

  export type ScoreFlavorDescriptorScalarWhereWithAggregatesInput = {
    AND?: ScoreFlavorDescriptorScalarWhereWithAggregatesInput | ScoreFlavorDescriptorScalarWhereWithAggregatesInput[]
    OR?: ScoreFlavorDescriptorScalarWhereWithAggregatesInput[]
    NOT?: ScoreFlavorDescriptorScalarWhereWithAggregatesInput | ScoreFlavorDescriptorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScoreFlavorDescriptor"> | string
    scoreId?: StringWithAggregatesFilter<"ScoreFlavorDescriptor"> | string
    flavorDescriptorId?: StringWithAggregatesFilter<"ScoreFlavorDescriptor"> | string
    intensity?: IntWithAggregatesFilter<"ScoreFlavorDescriptor"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ScoreFlavorDescriptor"> | Date | string
  }

  export type GreenBeanGradingWhereInput = {
    AND?: GreenBeanGradingWhereInput | GreenBeanGradingWhereInput[]
    OR?: GreenBeanGradingWhereInput[]
    NOT?: GreenBeanGradingWhereInput | GreenBeanGradingWhereInput[]
    id?: StringFilter<"GreenBeanGrading"> | string
    sampleId?: StringFilter<"GreenBeanGrading"> | string
    gradingSystem?: EnumGradingSystemFilter<"GreenBeanGrading"> | $Enums.GradingSystem
    primaryDefects?: IntFilter<"GreenBeanGrading"> | number
    secondaryDefects?: IntFilter<"GreenBeanGrading"> | number
    fullDefectEquivalents?: FloatFilter<"GreenBeanGrading"> | number
    defectBreakdown?: JsonFilter<"GreenBeanGrading">
    screenSizeDistribution?: JsonNullableFilter<"GreenBeanGrading">
    averageScreenSize?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    uniformityPercentage?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    moistureContent?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    waterActivity?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    bulkDensity?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    colorScore?: IntNullableFilter<"GreenBeanGrading"> | number | null
    uniformityScore?: IntNullableFilter<"GreenBeanGrading"> | number | null
    grade?: StringNullableFilter<"GreenBeanGrading"> | string | null
    classification?: EnumGradeClassificationNullableFilter<"GreenBeanGrading"> | $Enums.GradeClassification | null
    qualityScore?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    gradedBy?: StringNullableFilter<"GreenBeanGrading"> | string | null
    gradedAt?: DateTimeNullableFilter<"GreenBeanGrading"> | Date | string | null
    certifiedBy?: StringNullableFilter<"GreenBeanGrading"> | string | null
    certificationDate?: DateTimeNullableFilter<"GreenBeanGrading"> | Date | string | null
    notes?: StringNullableFilter<"GreenBeanGrading"> | string | null
    createdAt?: DateTimeFilter<"GreenBeanGrading"> | Date | string
    updatedAt?: DateTimeFilter<"GreenBeanGrading"> | Date | string
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
  }

  export type GreenBeanGradingOrderByWithRelationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    gradingSystem?: SortOrder
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    defectBreakdown?: SortOrder
    screenSizeDistribution?: SortOrderInput | SortOrder
    averageScreenSize?: SortOrderInput | SortOrder
    uniformityPercentage?: SortOrderInput | SortOrder
    moistureContent?: SortOrderInput | SortOrder
    waterActivity?: SortOrderInput | SortOrder
    bulkDensity?: SortOrderInput | SortOrder
    colorScore?: SortOrderInput | SortOrder
    uniformityScore?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    classification?: SortOrderInput | SortOrder
    qualityScore?: SortOrderInput | SortOrder
    gradedBy?: SortOrderInput | SortOrder
    gradedAt?: SortOrderInput | SortOrder
    certifiedBy?: SortOrderInput | SortOrder
    certificationDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sample?: SampleOrderByWithRelationInput
  }

  export type GreenBeanGradingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sampleId?: string
    AND?: GreenBeanGradingWhereInput | GreenBeanGradingWhereInput[]
    OR?: GreenBeanGradingWhereInput[]
    NOT?: GreenBeanGradingWhereInput | GreenBeanGradingWhereInput[]
    gradingSystem?: EnumGradingSystemFilter<"GreenBeanGrading"> | $Enums.GradingSystem
    primaryDefects?: IntFilter<"GreenBeanGrading"> | number
    secondaryDefects?: IntFilter<"GreenBeanGrading"> | number
    fullDefectEquivalents?: FloatFilter<"GreenBeanGrading"> | number
    defectBreakdown?: JsonFilter<"GreenBeanGrading">
    screenSizeDistribution?: JsonNullableFilter<"GreenBeanGrading">
    averageScreenSize?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    uniformityPercentage?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    moistureContent?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    waterActivity?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    bulkDensity?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    colorScore?: IntNullableFilter<"GreenBeanGrading"> | number | null
    uniformityScore?: IntNullableFilter<"GreenBeanGrading"> | number | null
    grade?: StringNullableFilter<"GreenBeanGrading"> | string | null
    classification?: EnumGradeClassificationNullableFilter<"GreenBeanGrading"> | $Enums.GradeClassification | null
    qualityScore?: FloatNullableFilter<"GreenBeanGrading"> | number | null
    gradedBy?: StringNullableFilter<"GreenBeanGrading"> | string | null
    gradedAt?: DateTimeNullableFilter<"GreenBeanGrading"> | Date | string | null
    certifiedBy?: StringNullableFilter<"GreenBeanGrading"> | string | null
    certificationDate?: DateTimeNullableFilter<"GreenBeanGrading"> | Date | string | null
    notes?: StringNullableFilter<"GreenBeanGrading"> | string | null
    createdAt?: DateTimeFilter<"GreenBeanGrading"> | Date | string
    updatedAt?: DateTimeFilter<"GreenBeanGrading"> | Date | string
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
  }, "id" | "sampleId">

  export type GreenBeanGradingOrderByWithAggregationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    gradingSystem?: SortOrder
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    defectBreakdown?: SortOrder
    screenSizeDistribution?: SortOrderInput | SortOrder
    averageScreenSize?: SortOrderInput | SortOrder
    uniformityPercentage?: SortOrderInput | SortOrder
    moistureContent?: SortOrderInput | SortOrder
    waterActivity?: SortOrderInput | SortOrder
    bulkDensity?: SortOrderInput | SortOrder
    colorScore?: SortOrderInput | SortOrder
    uniformityScore?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    classification?: SortOrderInput | SortOrder
    qualityScore?: SortOrderInput | SortOrder
    gradedBy?: SortOrderInput | SortOrder
    gradedAt?: SortOrderInput | SortOrder
    certifiedBy?: SortOrderInput | SortOrder
    certificationDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GreenBeanGradingCountOrderByAggregateInput
    _avg?: GreenBeanGradingAvgOrderByAggregateInput
    _max?: GreenBeanGradingMaxOrderByAggregateInput
    _min?: GreenBeanGradingMinOrderByAggregateInput
    _sum?: GreenBeanGradingSumOrderByAggregateInput
  }

  export type GreenBeanGradingScalarWhereWithAggregatesInput = {
    AND?: GreenBeanGradingScalarWhereWithAggregatesInput | GreenBeanGradingScalarWhereWithAggregatesInput[]
    OR?: GreenBeanGradingScalarWhereWithAggregatesInput[]
    NOT?: GreenBeanGradingScalarWhereWithAggregatesInput | GreenBeanGradingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GreenBeanGrading"> | string
    sampleId?: StringWithAggregatesFilter<"GreenBeanGrading"> | string
    gradingSystem?: EnumGradingSystemWithAggregatesFilter<"GreenBeanGrading"> | $Enums.GradingSystem
    primaryDefects?: IntWithAggregatesFilter<"GreenBeanGrading"> | number
    secondaryDefects?: IntWithAggregatesFilter<"GreenBeanGrading"> | number
    fullDefectEquivalents?: FloatWithAggregatesFilter<"GreenBeanGrading"> | number
    defectBreakdown?: JsonWithAggregatesFilter<"GreenBeanGrading">
    screenSizeDistribution?: JsonNullableWithAggregatesFilter<"GreenBeanGrading">
    averageScreenSize?: FloatNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    uniformityPercentage?: FloatNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    moistureContent?: FloatNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    waterActivity?: FloatNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    bulkDensity?: FloatNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    colorScore?: IntNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    uniformityScore?: IntNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    grade?: StringNullableWithAggregatesFilter<"GreenBeanGrading"> | string | null
    classification?: EnumGradeClassificationNullableWithAggregatesFilter<"GreenBeanGrading"> | $Enums.GradeClassification | null
    qualityScore?: FloatNullableWithAggregatesFilter<"GreenBeanGrading"> | number | null
    gradedBy?: StringNullableWithAggregatesFilter<"GreenBeanGrading"> | string | null
    gradedAt?: DateTimeNullableWithAggregatesFilter<"GreenBeanGrading"> | Date | string | null
    certifiedBy?: StringNullableWithAggregatesFilter<"GreenBeanGrading"> | string | null
    certificationDate?: DateTimeNullableWithAggregatesFilter<"GreenBeanGrading"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"GreenBeanGrading"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GreenBeanGrading"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GreenBeanGrading"> | Date | string
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutOrganizationInput
    samples?: SampleCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput
    samples?: SampleUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutCreatorInput
    scores?: ScoreCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput
    scores?: ScoreUncheckedCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantUncheckedCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUncheckedUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationCreateInput = {
    id?: string
    email: string
    role?: $Enums.UserRole
    token: string
    status?: $Enums.InvitationStatus
    expiresAt: Date | string
    invitedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateInput = {
    id?: string
    email: string
    organizationId: string
    role?: $Enums.UserRole
    token: string
    status?: $Enums.InvitationStatus
    expiresAt: Date | string
    invitedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationCreateManyInput = {
    id?: string
    email: string
    organizationId: string
    role?: $Enums.UserRole
    token: string
    status?: $Enums.InvitationStatus
    expiresAt: Date | string
    invitedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleCreateInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutSamplesInput
    sessionSamples?: SessionSampleCreateNestedManyWithoutSampleInput
    scores?: ScoreCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionSamples?: SessionSampleUncheckedCreateNestedManyWithoutSampleInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutSamplesNestedInput
    sessionSamples?: SessionSampleUpdateManyWithoutSampleNestedInput
    scores?: ScoreUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionSamples?: SessionSampleUncheckedUpdateManyWithoutSampleNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutTemplatesInput
    creator: UserCreateNestedOneWithoutCreatedTemplatesInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutTemplateInput
  }

  export type CuppingTemplateUncheckedCreateInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type CuppingTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutTemplatesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedTemplatesNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutTemplateNestedInput
  }

  export type CuppingTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type CuppingTemplateCreateManyInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingSessionCreateInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCuppingSessionsInput
    creator: UserCreateNestedOneWithoutCuppingSessionsInput
    template?: CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
    samples?: SessionSampleCreateNestedManyWithoutSessionInput
    scores?: ScoreCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
    samples?: SessionSampleUncheckedCreateNestedManyWithoutSessionInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput
    creator?: UserUpdateOneRequiredWithoutCuppingSessionsNestedInput
    template?: CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUpdateManyWithoutSessionNestedInput
    scores?: ScoreUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUncheckedUpdateManyWithoutSessionNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionCreateManyInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantCreateInput = {
    id?: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
    session: CuppingSessionCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutSessionParticipantsInput
  }

  export type SessionParticipantUncheckedCreateInput = {
    id?: string
    sessionId: string
    userId: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
  }

  export type SessionParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    session?: CuppingSessionUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutSessionParticipantsNestedInput
  }

  export type SessionParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantCreateManyInput = {
    id?: string
    sessionId: string
    userId: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
  }

  export type SessionParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionSampleCreateInput = {
    id?: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutSamplesInput
    sample: SampleCreateNestedOneWithoutSessionSamplesInput
    scores?: ScoreCreateNestedManyWithoutSessionSampleInput
  }

  export type SessionSampleUncheckedCreateInput = {
    id?: string
    sessionId: string
    sampleId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionSampleInput
  }

  export type SessionSampleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutSamplesNestedInput
    sample?: SampleUpdateOneRequiredWithoutSessionSamplesNestedInput
    scores?: ScoreUpdateManyWithoutSessionSampleNestedInput
  }

  export type SessionSampleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutSessionSampleNestedInput
  }

  export type SessionSampleCreateManyInput = {
    id?: string
    sessionId: string
    sampleId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
  }

  export type SessionSampleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionSampleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCreateInput = {
    id?: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutScoresInput
    sessionSample: SessionSampleCreateNestedOneWithoutScoresInput
    sample: SampleCreateNestedOneWithoutScoresInput
    user: UserCreateNestedOneWithoutScoresInput
    flavorDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutScoreInput
  }

  export type ScoreUncheckedCreateInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutScoreInput
  }

  export type ScoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutScoresNestedInput
    sessionSample?: SessionSampleUpdateOneRequiredWithoutScoresNestedInput
    sample?: SampleUpdateOneRequiredWithoutScoresNestedInput
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
    flavorDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreNestedInput
  }

  export type ScoreCreateManyInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlavorDescriptorCreateInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    organization?: OrganizationCreateNestedOneWithoutFlavorDescriptorsInput
    creator?: UserCreateNestedOneWithoutCreatedFlavorDescriptorsInput
    scoreDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutFlavorDescriptorInput
  }

  export type FlavorDescriptorUncheckedCreateInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    organizationId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutFlavorDescriptorInput
  }

  export type FlavorDescriptorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutFlavorDescriptorsNestedInput
    creator?: UserUpdateOneWithoutCreatedFlavorDescriptorsNestedInput
    scoreDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutFlavorDescriptorNestedInput
  }

  export type FlavorDescriptorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutFlavorDescriptorNestedInput
  }

  export type FlavorDescriptorCreateManyInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    organizationId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FlavorDescriptorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlavorDescriptorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorCreateInput = {
    id?: string
    intensity?: number
    createdAt?: Date | string
    score: ScoreCreateNestedOneWithoutFlavorDescriptorsInput
    flavorDescriptor: FlavorDescriptorCreateNestedOneWithoutScoreDescriptorsInput
  }

  export type ScoreFlavorDescriptorUncheckedCreateInput = {
    id?: string
    scoreId: string
    flavorDescriptorId: string
    intensity?: number
    createdAt?: Date | string
  }

  export type ScoreFlavorDescriptorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: ScoreUpdateOneRequiredWithoutFlavorDescriptorsNestedInput
    flavorDescriptor?: FlavorDescriptorUpdateOneRequiredWithoutScoreDescriptorsNestedInput
  }

  export type ScoreFlavorDescriptorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreId?: StringFieldUpdateOperationsInput | string
    flavorDescriptorId?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorCreateManyInput = {
    id?: string
    scoreId: string
    flavorDescriptorId: string
    intensity?: number
    createdAt?: Date | string
  }

  export type ScoreFlavorDescriptorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreId?: StringFieldUpdateOperationsInput | string
    flavorDescriptorId?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GreenBeanGradingCreateInput = {
    id?: string
    gradingSystem?: $Enums.GradingSystem
    primaryDefects?: number
    secondaryDefects?: number
    fullDefectEquivalents?: number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: number | null
    uniformityPercentage?: number | null
    moistureContent?: number | null
    waterActivity?: number | null
    bulkDensity?: number | null
    colorScore?: number | null
    uniformityScore?: number | null
    grade?: string | null
    classification?: $Enums.GradeClassification | null
    qualityScore?: number | null
    gradedBy?: string | null
    gradedAt?: Date | string | null
    certifiedBy?: string | null
    certificationDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sample: SampleCreateNestedOneWithoutGreenBeanGradingInput
  }

  export type GreenBeanGradingUncheckedCreateInput = {
    id?: string
    sampleId: string
    gradingSystem?: $Enums.GradingSystem
    primaryDefects?: number
    secondaryDefects?: number
    fullDefectEquivalents?: number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: number | null
    uniformityPercentage?: number | null
    moistureContent?: number | null
    waterActivity?: number | null
    bulkDensity?: number | null
    colorScore?: number | null
    uniformityScore?: number | null
    grade?: string | null
    classification?: $Enums.GradeClassification | null
    qualityScore?: number | null
    gradedBy?: string | null
    gradedAt?: Date | string | null
    certifiedBy?: string | null
    certificationDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GreenBeanGradingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gradingSystem?: EnumGradingSystemFieldUpdateOperationsInput | $Enums.GradingSystem
    primaryDefects?: IntFieldUpdateOperationsInput | number
    secondaryDefects?: IntFieldUpdateOperationsInput | number
    fullDefectEquivalents?: FloatFieldUpdateOperationsInput | number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformityPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    moistureContent?: NullableFloatFieldUpdateOperationsInput | number | null
    waterActivity?: NullableFloatFieldUpdateOperationsInput | number | null
    bulkDensity?: NullableFloatFieldUpdateOperationsInput | number | null
    colorScore?: NullableIntFieldUpdateOperationsInput | number | null
    uniformityScore?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableEnumGradeClassificationFieldUpdateOperationsInput | $Enums.GradeClassification | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedBy?: NullableStringFieldUpdateOperationsInput | string | null
    gradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutGreenBeanGradingNestedInput
  }

  export type GreenBeanGradingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    gradingSystem?: EnumGradingSystemFieldUpdateOperationsInput | $Enums.GradingSystem
    primaryDefects?: IntFieldUpdateOperationsInput | number
    secondaryDefects?: IntFieldUpdateOperationsInput | number
    fullDefectEquivalents?: FloatFieldUpdateOperationsInput | number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformityPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    moistureContent?: NullableFloatFieldUpdateOperationsInput | number | null
    waterActivity?: NullableFloatFieldUpdateOperationsInput | number | null
    bulkDensity?: NullableFloatFieldUpdateOperationsInput | number | null
    colorScore?: NullableIntFieldUpdateOperationsInput | number | null
    uniformityScore?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableEnumGradeClassificationFieldUpdateOperationsInput | $Enums.GradeClassification | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedBy?: NullableStringFieldUpdateOperationsInput | string | null
    gradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GreenBeanGradingCreateManyInput = {
    id?: string
    sampleId: string
    gradingSystem?: $Enums.GradingSystem
    primaryDefects?: number
    secondaryDefects?: number
    fullDefectEquivalents?: number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: number | null
    uniformityPercentage?: number | null
    moistureContent?: number | null
    waterActivity?: number | null
    bulkDensity?: number | null
    colorScore?: number | null
    uniformityScore?: number | null
    grade?: string | null
    classification?: $Enums.GradeClassification | null
    qualityScore?: number | null
    gradedBy?: string | null
    gradedAt?: Date | string | null
    certifiedBy?: string | null
    certificationDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GreenBeanGradingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    gradingSystem?: EnumGradingSystemFieldUpdateOperationsInput | $Enums.GradingSystem
    primaryDefects?: IntFieldUpdateOperationsInput | number
    secondaryDefects?: IntFieldUpdateOperationsInput | number
    fullDefectEquivalents?: FloatFieldUpdateOperationsInput | number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformityPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    moistureContent?: NullableFloatFieldUpdateOperationsInput | number | null
    waterActivity?: NullableFloatFieldUpdateOperationsInput | number | null
    bulkDensity?: NullableFloatFieldUpdateOperationsInput | number | null
    colorScore?: NullableIntFieldUpdateOperationsInput | number | null
    uniformityScore?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableEnumGradeClassificationFieldUpdateOperationsInput | $Enums.GradeClassification | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedBy?: NullableStringFieldUpdateOperationsInput | string | null
    gradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GreenBeanGradingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    gradingSystem?: EnumGradingSystemFieldUpdateOperationsInput | $Enums.GradingSystem
    primaryDefects?: IntFieldUpdateOperationsInput | number
    secondaryDefects?: IntFieldUpdateOperationsInput | number
    fullDefectEquivalents?: FloatFieldUpdateOperationsInput | number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformityPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    moistureContent?: NullableFloatFieldUpdateOperationsInput | number | null
    waterActivity?: NullableFloatFieldUpdateOperationsInput | number | null
    bulkDensity?: NullableFloatFieldUpdateOperationsInput | number | null
    colorScore?: NullableIntFieldUpdateOperationsInput | number | null
    uniformityScore?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableEnumGradeClassificationFieldUpdateOperationsInput | $Enums.GradeClassification | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedBy?: NullableStringFieldUpdateOperationsInput | string | null
    gradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type EnumSubscriptionPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanFilter<$PrismaModel> | $Enums.SubscriptionPlan
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CuppingSessionListRelationFilter = {
    every?: CuppingSessionWhereInput
    some?: CuppingSessionWhereInput
    none?: CuppingSessionWhereInput
  }

  export type SampleListRelationFilter = {
    every?: SampleWhereInput
    some?: SampleWhereInput
    none?: SampleWhereInput
  }

  export type CuppingTemplateListRelationFilter = {
    every?: CuppingTemplateWhereInput
    some?: CuppingTemplateWhereInput
    none?: CuppingTemplateWhereInput
  }

  export type InvitationListRelationFilter = {
    every?: InvitationWhereInput
    some?: InvitationWhereInput
    none?: InvitationWhereInput
  }

  export type FlavorDescriptorListRelationFilter = {
    every?: FlavorDescriptorWhereInput
    some?: FlavorDescriptorWhereInput
    none?: FlavorDescriptorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CuppingSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CuppingTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlavorDescriptorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    domain?: SortOrder
    subdomain?: SortOrder
    description?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionPlan?: SortOrder
    trialEndsAt?: SortOrder
    subscriptionEndsAt?: SortOrder
    stripeCustomerId?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    domain?: SortOrder
    subdomain?: SortOrder
    description?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionPlan?: SortOrder
    trialEndsAt?: SortOrder
    subscriptionEndsAt?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    domain?: SortOrder
    subdomain?: SortOrder
    description?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionPlan?: SortOrder
    trialEndsAt?: SortOrder
    subscriptionEndsAt?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type EnumSubscriptionPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type ScoreListRelationFilter = {
    every?: ScoreWhereInput
    some?: ScoreWhereInput
    none?: ScoreWhereInput
  }

  export type SessionParticipantListRelationFilter = {
    every?: SessionParticipantWhereInput
    some?: SessionParticipantWhereInput
    none?: SessionParticipantWhereInput
  }

  export type ScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    lastLoginAt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    lastLoginAt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    lastLoginAt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumInvitationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusFilter<$PrismaModel> | $Enums.InvitationStatus
  }

  export type InvitationEmailOrganizationIdCompoundUniqueInput = {
    email: string
    organizationId: string
  }

  export type InvitationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    invitedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    invitedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    token?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    invitedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInvitationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvitationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvitationStatusFilter<$PrismaModel>
    _max?: NestedEnumInvitationStatusFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumProcessingMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingMethod | EnumProcessingMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProcessingMethodNullableFilter<$PrismaModel> | $Enums.ProcessingMethod | null
  }

  export type EnumRoastLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RoastLevel | EnumRoastLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoastLevelNullableFilter<$PrismaModel> | $Enums.RoastLevel | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type SessionSampleListRelationFilter = {
    every?: SessionSampleWhereInput
    some?: SessionSampleWhereInput
    none?: SessionSampleWhereInput
  }

  export type GreenBeanGradingNullableScalarRelationFilter = {
    is?: GreenBeanGradingWhereInput | null
    isNot?: GreenBeanGradingWhereInput | null
  }

  export type SessionSampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SampleCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    origin?: SortOrder
    region?: SortOrder
    farm?: SortOrder
    producer?: SortOrder
    variety?: SortOrder
    altitude?: SortOrder
    processingMethod?: SortOrder
    harvestDate?: SortOrder
    roaster?: SortOrder
    roastDate?: SortOrder
    roastLevel?: SortOrder
    moisture?: SortOrder
    density?: SortOrder
    screenSize?: SortOrder
    notes?: SortOrder
    imageUrl?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleAvgOrderByAggregateInput = {
    altitude?: SortOrder
    moisture?: SortOrder
    density?: SortOrder
  }

  export type SampleMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    origin?: SortOrder
    region?: SortOrder
    farm?: SortOrder
    producer?: SortOrder
    variety?: SortOrder
    altitude?: SortOrder
    processingMethod?: SortOrder
    harvestDate?: SortOrder
    roaster?: SortOrder
    roastDate?: SortOrder
    roastLevel?: SortOrder
    moisture?: SortOrder
    density?: SortOrder
    screenSize?: SortOrder
    notes?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    origin?: SortOrder
    region?: SortOrder
    farm?: SortOrder
    producer?: SortOrder
    variety?: SortOrder
    altitude?: SortOrder
    processingMethod?: SortOrder
    harvestDate?: SortOrder
    roaster?: SortOrder
    roastDate?: SortOrder
    roastLevel?: SortOrder
    moisture?: SortOrder
    density?: SortOrder
    screenSize?: SortOrder
    notes?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleSumOrderByAggregateInput = {
    altitude?: SortOrder
    moisture?: SortOrder
    density?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumProcessingMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingMethod | EnumProcessingMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProcessingMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProcessingMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProcessingMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumProcessingMethodNullableFilter<$PrismaModel>
  }

  export type EnumRoastLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoastLevel | EnumRoastLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoastLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.RoastLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoastLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumRoastLevelNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumScoringSystemFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemFilter<$PrismaModel> | $Enums.ScoringSystem
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CuppingTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    scoringSystem?: SortOrder
    maxScore?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuppingTemplateAvgOrderByAggregateInput = {
    maxScore?: SortOrder
  }

  export type CuppingTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    scoringSystem?: SortOrder
    maxScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuppingTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    scoringSystem?: SortOrder
    maxScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuppingTemplateSumOrderByAggregateInput = {
    maxScore?: SortOrder
  }

  export type EnumScoringSystemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemWithAggregatesFilter<$PrismaModel> | $Enums.ScoringSystem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScoringSystemFilter<$PrismaModel>
    _max?: NestedEnumScoringSystemFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type CuppingTemplateNullableScalarRelationFilter = {
    is?: CuppingTemplateWhereInput | null
    isNot?: CuppingTemplateWhereInput | null
  }

  export type CuppingSessionCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    templateId?: SortOrder
    blindTasting?: SortOrder
    allowComments?: SortOrder
    requireCalibration?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    tags?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuppingSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    templateId?: SortOrder
    blindTasting?: SortOrder
    allowComments?: SortOrder
    requireCalibration?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuppingSessionMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    templateId?: SortOrder
    blindTasting?: SortOrder
    allowComments?: SortOrder
    requireCalibration?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type EnumParticipantRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumParticipantRoleFilter<$PrismaModel> | $Enums.ParticipantRole
  }

  export type CuppingSessionScalarRelationFilter = {
    is?: CuppingSessionWhereInput
    isNot?: CuppingSessionWhereInput
  }

  export type SessionParticipantSessionIdUserIdCompoundUniqueInput = {
    sessionId: string
    userId: string
  }

  export type SessionParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
    isCalibrated?: SortOrder
    calibratedAt?: SortOrder
  }

  export type SessionParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
    isCalibrated?: SortOrder
    calibratedAt?: SortOrder
  }

  export type SessionParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    leftAt?: SortOrder
    isActive?: SortOrder
    isCalibrated?: SortOrder
    calibratedAt?: SortOrder
  }

  export type EnumParticipantRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumParticipantRoleWithAggregatesFilter<$PrismaModel> | $Enums.ParticipantRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParticipantRoleFilter<$PrismaModel>
    _max?: NestedEnumParticipantRoleFilter<$PrismaModel>
  }

  export type SampleScalarRelationFilter = {
    is?: SampleWhereInput
    isNot?: SampleWhereInput
  }

  export type SessionSampleSessionIdSampleIdCompoundUniqueInput = {
    sessionId: string
    sampleId: string
  }

  export type SessionSampleSessionIdPositionCompoundUniqueInput = {
    sessionId: string
    position: number
  }

  export type SessionSampleCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sampleId?: SortOrder
    position?: SortOrder
    isBlind?: SortOrder
    blindCode?: SortOrder
    grindSize?: SortOrder
    waterTemp?: SortOrder
    brewRatio?: SortOrder
    steepTime?: SortOrder
    aiSummary?: SortOrder
    aiGeneratedAt?: SortOrder
    addedAt?: SortOrder
  }

  export type SessionSampleAvgOrderByAggregateInput = {
    position?: SortOrder
    waterTemp?: SortOrder
    steepTime?: SortOrder
  }

  export type SessionSampleMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sampleId?: SortOrder
    position?: SortOrder
    isBlind?: SortOrder
    blindCode?: SortOrder
    grindSize?: SortOrder
    waterTemp?: SortOrder
    brewRatio?: SortOrder
    steepTime?: SortOrder
    aiSummary?: SortOrder
    aiGeneratedAt?: SortOrder
    addedAt?: SortOrder
  }

  export type SessionSampleMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sampleId?: SortOrder
    position?: SortOrder
    isBlind?: SortOrder
    blindCode?: SortOrder
    grindSize?: SortOrder
    waterTemp?: SortOrder
    brewRatio?: SortOrder
    steepTime?: SortOrder
    aiSummary?: SortOrder
    aiGeneratedAt?: SortOrder
    addedAt?: SortOrder
  }

  export type SessionSampleSumOrderByAggregateInput = {
    position?: SortOrder
    waterTemp?: SortOrder
    steepTime?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SessionSampleScalarRelationFilter = {
    is?: SessionSampleWhereInput
    isNot?: SessionSampleWhereInput
  }

  export type ScoreFlavorDescriptorListRelationFilter = {
    every?: ScoreFlavorDescriptorWhereInput
    some?: ScoreFlavorDescriptorWhereInput
    none?: ScoreFlavorDescriptorWhereInput
  }

  export type ScoreFlavorDescriptorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScoreSessionIdSampleIdUserIdCompoundUniqueInput = {
    sessionId: string
    sampleId: string
    userId: string
  }

  export type ScoreCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionSampleId?: SortOrder
    sampleId?: SortOrder
    userId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    scores?: SortOrder
    aroma?: SortOrder
    flavor?: SortOrder
    aftertaste?: SortOrder
    acidity?: SortOrder
    body?: SortOrder
    balance?: SortOrder
    sweetness?: SortOrder
    cleanliness?: SortOrder
    uniformity?: SortOrder
    overall?: SortOrder
    defects?: SortOrder
    notes?: SortOrder
    privateNotes?: SortOrder
    voiceNotes?: SortOrder
    voiceFileUrl?: SortOrder
    isComplete?: SortOrder
    isSubmitted?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreAvgOrderByAggregateInput = {
    totalScore?: SortOrder
    maxScore?: SortOrder
    aroma?: SortOrder
    flavor?: SortOrder
    aftertaste?: SortOrder
    acidity?: SortOrder
    body?: SortOrder
    balance?: SortOrder
    sweetness?: SortOrder
    cleanliness?: SortOrder
    uniformity?: SortOrder
    overall?: SortOrder
  }

  export type ScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionSampleId?: SortOrder
    sampleId?: SortOrder
    userId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    aroma?: SortOrder
    flavor?: SortOrder
    aftertaste?: SortOrder
    acidity?: SortOrder
    body?: SortOrder
    balance?: SortOrder
    sweetness?: SortOrder
    cleanliness?: SortOrder
    uniformity?: SortOrder
    overall?: SortOrder
    notes?: SortOrder
    privateNotes?: SortOrder
    voiceNotes?: SortOrder
    voiceFileUrl?: SortOrder
    isComplete?: SortOrder
    isSubmitted?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionSampleId?: SortOrder
    sampleId?: SortOrder
    userId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    aroma?: SortOrder
    flavor?: SortOrder
    aftertaste?: SortOrder
    acidity?: SortOrder
    body?: SortOrder
    balance?: SortOrder
    sweetness?: SortOrder
    cleanliness?: SortOrder
    uniformity?: SortOrder
    overall?: SortOrder
    notes?: SortOrder
    privateNotes?: SortOrder
    voiceNotes?: SortOrder
    voiceFileUrl?: SortOrder
    isComplete?: SortOrder
    isSubmitted?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreSumOrderByAggregateInput = {
    totalScore?: SortOrder
    maxScore?: SortOrder
    aroma?: SortOrder
    flavor?: SortOrder
    aftertaste?: SortOrder
    acidity?: SortOrder
    body?: SortOrder
    balance?: SortOrder
    sweetness?: SortOrder
    cleanliness?: SortOrder
    uniformity?: SortOrder
    overall?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumFlavorCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.FlavorCategory | EnumFlavorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFlavorCategoryFilter<$PrismaModel> | $Enums.FlavorCategory
  }

  export type OrganizationNullableScalarRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FlavorDescriptorNameOrganizationIdCompoundUniqueInput = {
    name: string
    organizationId: string
  }

  export type FlavorDescriptorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FlavorDescriptorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FlavorDescriptorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    organizationId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumFlavorCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FlavorCategory | EnumFlavorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFlavorCategoryWithAggregatesFilter<$PrismaModel> | $Enums.FlavorCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFlavorCategoryFilter<$PrismaModel>
    _max?: NestedEnumFlavorCategoryFilter<$PrismaModel>
  }

  export type ScoreScalarRelationFilter = {
    is?: ScoreWhereInput
    isNot?: ScoreWhereInput
  }

  export type FlavorDescriptorScalarRelationFilter = {
    is?: FlavorDescriptorWhereInput
    isNot?: FlavorDescriptorWhereInput
  }

  export type ScoreFlavorDescriptorScoreIdFlavorDescriptorIdCompoundUniqueInput = {
    scoreId: string
    flavorDescriptorId: string
  }

  export type ScoreFlavorDescriptorCountOrderByAggregateInput = {
    id?: SortOrder
    scoreId?: SortOrder
    flavorDescriptorId?: SortOrder
    intensity?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreFlavorDescriptorAvgOrderByAggregateInput = {
    intensity?: SortOrder
  }

  export type ScoreFlavorDescriptorMaxOrderByAggregateInput = {
    id?: SortOrder
    scoreId?: SortOrder
    flavorDescriptorId?: SortOrder
    intensity?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreFlavorDescriptorMinOrderByAggregateInput = {
    id?: SortOrder
    scoreId?: SortOrder
    flavorDescriptorId?: SortOrder
    intensity?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreFlavorDescriptorSumOrderByAggregateInput = {
    intensity?: SortOrder
  }

  export type EnumGradingSystemFilter<$PrismaModel = never> = {
    equals?: $Enums.GradingSystem | EnumGradingSystemFieldRefInput<$PrismaModel>
    in?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumGradingSystemFilter<$PrismaModel> | $Enums.GradingSystem
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumGradeClassificationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeClassification | EnumGradeClassificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGradeClassificationNullableFilter<$PrismaModel> | $Enums.GradeClassification | null
  }

  export type GreenBeanGradingCountOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    gradingSystem?: SortOrder
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    defectBreakdown?: SortOrder
    screenSizeDistribution?: SortOrder
    averageScreenSize?: SortOrder
    uniformityPercentage?: SortOrder
    moistureContent?: SortOrder
    waterActivity?: SortOrder
    bulkDensity?: SortOrder
    colorScore?: SortOrder
    uniformityScore?: SortOrder
    grade?: SortOrder
    classification?: SortOrder
    qualityScore?: SortOrder
    gradedBy?: SortOrder
    gradedAt?: SortOrder
    certifiedBy?: SortOrder
    certificationDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GreenBeanGradingAvgOrderByAggregateInput = {
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    averageScreenSize?: SortOrder
    uniformityPercentage?: SortOrder
    moistureContent?: SortOrder
    waterActivity?: SortOrder
    bulkDensity?: SortOrder
    colorScore?: SortOrder
    uniformityScore?: SortOrder
    qualityScore?: SortOrder
  }

  export type GreenBeanGradingMaxOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    gradingSystem?: SortOrder
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    averageScreenSize?: SortOrder
    uniformityPercentage?: SortOrder
    moistureContent?: SortOrder
    waterActivity?: SortOrder
    bulkDensity?: SortOrder
    colorScore?: SortOrder
    uniformityScore?: SortOrder
    grade?: SortOrder
    classification?: SortOrder
    qualityScore?: SortOrder
    gradedBy?: SortOrder
    gradedAt?: SortOrder
    certifiedBy?: SortOrder
    certificationDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GreenBeanGradingMinOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    gradingSystem?: SortOrder
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    averageScreenSize?: SortOrder
    uniformityPercentage?: SortOrder
    moistureContent?: SortOrder
    waterActivity?: SortOrder
    bulkDensity?: SortOrder
    colorScore?: SortOrder
    uniformityScore?: SortOrder
    grade?: SortOrder
    classification?: SortOrder
    qualityScore?: SortOrder
    gradedBy?: SortOrder
    gradedAt?: SortOrder
    certifiedBy?: SortOrder
    certificationDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GreenBeanGradingSumOrderByAggregateInput = {
    primaryDefects?: SortOrder
    secondaryDefects?: SortOrder
    fullDefectEquivalents?: SortOrder
    averageScreenSize?: SortOrder
    uniformityPercentage?: SortOrder
    moistureContent?: SortOrder
    waterActivity?: SortOrder
    bulkDensity?: SortOrder
    colorScore?: SortOrder
    uniformityScore?: SortOrder
    qualityScore?: SortOrder
  }

  export type EnumGradingSystemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradingSystem | EnumGradingSystemFieldRefInput<$PrismaModel>
    in?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumGradingSystemWithAggregatesFilter<$PrismaModel> | $Enums.GradingSystem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradingSystemFilter<$PrismaModel>
    _max?: NestedEnumGradingSystemFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumGradeClassificationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeClassification | EnumGradeClassificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGradeClassificationNullableWithAggregatesFilter<$PrismaModel> | $Enums.GradeClassification | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGradeClassificationNullableFilter<$PrismaModel>
    _max?: NestedEnumGradeClassificationNullableFilter<$PrismaModel>
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CuppingSessionCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CuppingSessionCreateWithoutOrganizationInput, CuppingSessionUncheckedCreateWithoutOrganizationInput> | CuppingSessionCreateWithoutOrganizationInput[] | CuppingSessionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutOrganizationInput | CuppingSessionCreateOrConnectWithoutOrganizationInput[]
    createMany?: CuppingSessionCreateManyOrganizationInputEnvelope
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
  }

  export type SampleCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<SampleCreateWithoutOrganizationInput, SampleUncheckedCreateWithoutOrganizationInput> | SampleCreateWithoutOrganizationInput[] | SampleUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOrganizationInput | SampleCreateOrConnectWithoutOrganizationInput[]
    createMany?: SampleCreateManyOrganizationInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type CuppingTemplateCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CuppingTemplateCreateWithoutOrganizationInput, CuppingTemplateUncheckedCreateWithoutOrganizationInput> | CuppingTemplateCreateWithoutOrganizationInput[] | CuppingTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutOrganizationInput | CuppingTemplateCreateOrConnectWithoutOrganizationInput[]
    createMany?: CuppingTemplateCreateManyOrganizationInputEnvelope
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type FlavorDescriptorCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<FlavorDescriptorCreateWithoutOrganizationInput, FlavorDescriptorUncheckedCreateWithoutOrganizationInput> | FlavorDescriptorCreateWithoutOrganizationInput[] | FlavorDescriptorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutOrganizationInput | FlavorDescriptorCreateOrConnectWithoutOrganizationInput[]
    createMany?: FlavorDescriptorCreateManyOrganizationInputEnvelope
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CuppingSessionCreateWithoutOrganizationInput, CuppingSessionUncheckedCreateWithoutOrganizationInput> | CuppingSessionCreateWithoutOrganizationInput[] | CuppingSessionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutOrganizationInput | CuppingSessionCreateOrConnectWithoutOrganizationInput[]
    createMany?: CuppingSessionCreateManyOrganizationInputEnvelope
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<SampleCreateWithoutOrganizationInput, SampleUncheckedCreateWithoutOrganizationInput> | SampleCreateWithoutOrganizationInput[] | SampleUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOrganizationInput | SampleCreateOrConnectWithoutOrganizationInput[]
    createMany?: SampleCreateManyOrganizationInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CuppingTemplateCreateWithoutOrganizationInput, CuppingTemplateUncheckedCreateWithoutOrganizationInput> | CuppingTemplateCreateWithoutOrganizationInput[] | CuppingTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutOrganizationInput | CuppingTemplateCreateOrConnectWithoutOrganizationInput[]
    createMany?: CuppingTemplateCreateManyOrganizationInputEnvelope
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<FlavorDescriptorCreateWithoutOrganizationInput, FlavorDescriptorUncheckedCreateWithoutOrganizationInput> | FlavorDescriptorCreateWithoutOrganizationInput[] | FlavorDescriptorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutOrganizationInput | FlavorDescriptorCreateOrConnectWithoutOrganizationInput[]
    createMany?: FlavorDescriptorCreateManyOrganizationInputEnvelope
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type EnumSubscriptionPlanFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionPlan
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CuppingSessionUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutOrganizationInput, CuppingSessionUncheckedCreateWithoutOrganizationInput> | CuppingSessionCreateWithoutOrganizationInput[] | CuppingSessionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutOrganizationInput | CuppingSessionCreateOrConnectWithoutOrganizationInput[]
    upsert?: CuppingSessionUpsertWithWhereUniqueWithoutOrganizationInput | CuppingSessionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CuppingSessionCreateManyOrganizationInputEnvelope
    set?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    disconnect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    delete?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    update?: CuppingSessionUpdateWithWhereUniqueWithoutOrganizationInput | CuppingSessionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CuppingSessionUpdateManyWithWhereWithoutOrganizationInput | CuppingSessionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
  }

  export type SampleUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<SampleCreateWithoutOrganizationInput, SampleUncheckedCreateWithoutOrganizationInput> | SampleCreateWithoutOrganizationInput[] | SampleUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOrganizationInput | SampleCreateOrConnectWithoutOrganizationInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutOrganizationInput | SampleUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: SampleCreateManyOrganizationInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutOrganizationInput | SampleUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutOrganizationInput | SampleUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type CuppingTemplateUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CuppingTemplateCreateWithoutOrganizationInput, CuppingTemplateUncheckedCreateWithoutOrganizationInput> | CuppingTemplateCreateWithoutOrganizationInput[] | CuppingTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutOrganizationInput | CuppingTemplateCreateOrConnectWithoutOrganizationInput[]
    upsert?: CuppingTemplateUpsertWithWhereUniqueWithoutOrganizationInput | CuppingTemplateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CuppingTemplateCreateManyOrganizationInputEnvelope
    set?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    disconnect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    delete?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    update?: CuppingTemplateUpdateWithWhereUniqueWithoutOrganizationInput | CuppingTemplateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CuppingTemplateUpdateManyWithWhereWithoutOrganizationInput | CuppingTemplateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CuppingTemplateScalarWhereInput | CuppingTemplateScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type FlavorDescriptorUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<FlavorDescriptorCreateWithoutOrganizationInput, FlavorDescriptorUncheckedCreateWithoutOrganizationInput> | FlavorDescriptorCreateWithoutOrganizationInput[] | FlavorDescriptorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutOrganizationInput | FlavorDescriptorCreateOrConnectWithoutOrganizationInput[]
    upsert?: FlavorDescriptorUpsertWithWhereUniqueWithoutOrganizationInput | FlavorDescriptorUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: FlavorDescriptorCreateManyOrganizationInputEnvelope
    set?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    disconnect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    delete?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    update?: FlavorDescriptorUpdateWithWhereUniqueWithoutOrganizationInput | FlavorDescriptorUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: FlavorDescriptorUpdateManyWithWhereWithoutOrganizationInput | FlavorDescriptorUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: FlavorDescriptorScalarWhereInput | FlavorDescriptorScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutOrganizationInput, CuppingSessionUncheckedCreateWithoutOrganizationInput> | CuppingSessionCreateWithoutOrganizationInput[] | CuppingSessionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutOrganizationInput | CuppingSessionCreateOrConnectWithoutOrganizationInput[]
    upsert?: CuppingSessionUpsertWithWhereUniqueWithoutOrganizationInput | CuppingSessionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CuppingSessionCreateManyOrganizationInputEnvelope
    set?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    disconnect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    delete?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    update?: CuppingSessionUpdateWithWhereUniqueWithoutOrganizationInput | CuppingSessionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CuppingSessionUpdateManyWithWhereWithoutOrganizationInput | CuppingSessionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
  }

  export type SampleUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<SampleCreateWithoutOrganizationInput, SampleUncheckedCreateWithoutOrganizationInput> | SampleCreateWithoutOrganizationInput[] | SampleUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOrganizationInput | SampleCreateOrConnectWithoutOrganizationInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutOrganizationInput | SampleUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: SampleCreateManyOrganizationInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutOrganizationInput | SampleUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutOrganizationInput | SampleUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CuppingTemplateCreateWithoutOrganizationInput, CuppingTemplateUncheckedCreateWithoutOrganizationInput> | CuppingTemplateCreateWithoutOrganizationInput[] | CuppingTemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutOrganizationInput | CuppingTemplateCreateOrConnectWithoutOrganizationInput[]
    upsert?: CuppingTemplateUpsertWithWhereUniqueWithoutOrganizationInput | CuppingTemplateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CuppingTemplateCreateManyOrganizationInputEnvelope
    set?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    disconnect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    delete?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    update?: CuppingTemplateUpdateWithWhereUniqueWithoutOrganizationInput | CuppingTemplateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CuppingTemplateUpdateManyWithWhereWithoutOrganizationInput | CuppingTemplateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CuppingTemplateScalarWhereInput | CuppingTemplateScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<FlavorDescriptorCreateWithoutOrganizationInput, FlavorDescriptorUncheckedCreateWithoutOrganizationInput> | FlavorDescriptorCreateWithoutOrganizationInput[] | FlavorDescriptorUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutOrganizationInput | FlavorDescriptorCreateOrConnectWithoutOrganizationInput[]
    upsert?: FlavorDescriptorUpsertWithWhereUniqueWithoutOrganizationInput | FlavorDescriptorUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: FlavorDescriptorCreateManyOrganizationInputEnvelope
    set?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    disconnect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    delete?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    update?: FlavorDescriptorUpdateWithWhereUniqueWithoutOrganizationInput | FlavorDescriptorUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: FlavorDescriptorUpdateManyWithWhereWithoutOrganizationInput | FlavorDescriptorUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: FlavorDescriptorScalarWhereInput | FlavorDescriptorScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type CuppingSessionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CuppingSessionCreateWithoutCreatorInput, CuppingSessionUncheckedCreateWithoutCreatorInput> | CuppingSessionCreateWithoutCreatorInput[] | CuppingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutCreatorInput | CuppingSessionCreateOrConnectWithoutCreatorInput[]
    createMany?: CuppingSessionCreateManyCreatorInputEnvelope
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
  }

  export type ScoreCreateNestedManyWithoutUserInput = {
    create?: XOR<ScoreCreateWithoutUserInput, ScoreUncheckedCreateWithoutUserInput> | ScoreCreateWithoutUserInput[] | ScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutUserInput | ScoreCreateOrConnectWithoutUserInput[]
    createMany?: ScoreCreateManyUserInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type SessionParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionParticipantCreateWithoutUserInput, SessionParticipantUncheckedCreateWithoutUserInput> | SessionParticipantCreateWithoutUserInput[] | SessionParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutUserInput | SessionParticipantCreateOrConnectWithoutUserInput[]
    createMany?: SessionParticipantCreateManyUserInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type CuppingTemplateCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CuppingTemplateCreateWithoutCreatorInput, CuppingTemplateUncheckedCreateWithoutCreatorInput> | CuppingTemplateCreateWithoutCreatorInput[] | CuppingTemplateUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutCreatorInput | CuppingTemplateCreateOrConnectWithoutCreatorInput[]
    createMany?: CuppingTemplateCreateManyCreatorInputEnvelope
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
  }

  export type FlavorDescriptorCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FlavorDescriptorCreateWithoutCreatorInput, FlavorDescriptorUncheckedCreateWithoutCreatorInput> | FlavorDescriptorCreateWithoutCreatorInput[] | FlavorDescriptorUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutCreatorInput | FlavorDescriptorCreateOrConnectWithoutCreatorInput[]
    createMany?: FlavorDescriptorCreateManyCreatorInputEnvelope
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
  }

  export type CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CuppingSessionCreateWithoutCreatorInput, CuppingSessionUncheckedCreateWithoutCreatorInput> | CuppingSessionCreateWithoutCreatorInput[] | CuppingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutCreatorInput | CuppingSessionCreateOrConnectWithoutCreatorInput[]
    createMany?: CuppingSessionCreateManyCreatorInputEnvelope
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScoreCreateWithoutUserInput, ScoreUncheckedCreateWithoutUserInput> | ScoreCreateWithoutUserInput[] | ScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutUserInput | ScoreCreateOrConnectWithoutUserInput[]
    createMany?: ScoreCreateManyUserInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type SessionParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionParticipantCreateWithoutUserInput, SessionParticipantUncheckedCreateWithoutUserInput> | SessionParticipantCreateWithoutUserInput[] | SessionParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutUserInput | SessionParticipantCreateOrConnectWithoutUserInput[]
    createMany?: SessionParticipantCreateManyUserInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CuppingTemplateCreateWithoutCreatorInput, CuppingTemplateUncheckedCreateWithoutCreatorInput> | CuppingTemplateCreateWithoutCreatorInput[] | CuppingTemplateUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutCreatorInput | CuppingTemplateCreateOrConnectWithoutCreatorInput[]
    createMany?: CuppingTemplateCreateManyCreatorInputEnvelope
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
  }

  export type FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FlavorDescriptorCreateWithoutCreatorInput, FlavorDescriptorUncheckedCreateWithoutCreatorInput> | FlavorDescriptorCreateWithoutCreatorInput[] | FlavorDescriptorUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutCreatorInput | FlavorDescriptorCreateOrConnectWithoutCreatorInput[]
    createMany?: FlavorDescriptorCreateManyCreatorInputEnvelope
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrganizationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type CuppingSessionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutCreatorInput, CuppingSessionUncheckedCreateWithoutCreatorInput> | CuppingSessionCreateWithoutCreatorInput[] | CuppingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutCreatorInput | CuppingSessionCreateOrConnectWithoutCreatorInput[]
    upsert?: CuppingSessionUpsertWithWhereUniqueWithoutCreatorInput | CuppingSessionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CuppingSessionCreateManyCreatorInputEnvelope
    set?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    disconnect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    delete?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    update?: CuppingSessionUpdateWithWhereUniqueWithoutCreatorInput | CuppingSessionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CuppingSessionUpdateManyWithWhereWithoutCreatorInput | CuppingSessionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
  }

  export type ScoreUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScoreCreateWithoutUserInput, ScoreUncheckedCreateWithoutUserInput> | ScoreCreateWithoutUserInput[] | ScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutUserInput | ScoreCreateOrConnectWithoutUserInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutUserInput | ScoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScoreCreateManyUserInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutUserInput | ScoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutUserInput | ScoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type SessionParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutUserInput, SessionParticipantUncheckedCreateWithoutUserInput> | SessionParticipantCreateWithoutUserInput[] | SessionParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutUserInput | SessionParticipantCreateOrConnectWithoutUserInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutUserInput | SessionParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionParticipantCreateManyUserInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutUserInput | SessionParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutUserInput | SessionParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type CuppingTemplateUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CuppingTemplateCreateWithoutCreatorInput, CuppingTemplateUncheckedCreateWithoutCreatorInput> | CuppingTemplateCreateWithoutCreatorInput[] | CuppingTemplateUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutCreatorInput | CuppingTemplateCreateOrConnectWithoutCreatorInput[]
    upsert?: CuppingTemplateUpsertWithWhereUniqueWithoutCreatorInput | CuppingTemplateUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CuppingTemplateCreateManyCreatorInputEnvelope
    set?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    disconnect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    delete?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    update?: CuppingTemplateUpdateWithWhereUniqueWithoutCreatorInput | CuppingTemplateUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CuppingTemplateUpdateManyWithWhereWithoutCreatorInput | CuppingTemplateUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CuppingTemplateScalarWhereInput | CuppingTemplateScalarWhereInput[]
  }

  export type FlavorDescriptorUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FlavorDescriptorCreateWithoutCreatorInput, FlavorDescriptorUncheckedCreateWithoutCreatorInput> | FlavorDescriptorCreateWithoutCreatorInput[] | FlavorDescriptorUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutCreatorInput | FlavorDescriptorCreateOrConnectWithoutCreatorInput[]
    upsert?: FlavorDescriptorUpsertWithWhereUniqueWithoutCreatorInput | FlavorDescriptorUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FlavorDescriptorCreateManyCreatorInputEnvelope
    set?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    disconnect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    delete?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    update?: FlavorDescriptorUpdateWithWhereUniqueWithoutCreatorInput | FlavorDescriptorUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FlavorDescriptorUpdateManyWithWhereWithoutCreatorInput | FlavorDescriptorUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FlavorDescriptorScalarWhereInput | FlavorDescriptorScalarWhereInput[]
  }

  export type CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutCreatorInput, CuppingSessionUncheckedCreateWithoutCreatorInput> | CuppingSessionCreateWithoutCreatorInput[] | CuppingSessionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutCreatorInput | CuppingSessionCreateOrConnectWithoutCreatorInput[]
    upsert?: CuppingSessionUpsertWithWhereUniqueWithoutCreatorInput | CuppingSessionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CuppingSessionCreateManyCreatorInputEnvelope
    set?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    disconnect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    delete?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    update?: CuppingSessionUpdateWithWhereUniqueWithoutCreatorInput | CuppingSessionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CuppingSessionUpdateManyWithWhereWithoutCreatorInput | CuppingSessionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScoreCreateWithoutUserInput, ScoreUncheckedCreateWithoutUserInput> | ScoreCreateWithoutUserInput[] | ScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutUserInput | ScoreCreateOrConnectWithoutUserInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutUserInput | ScoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScoreCreateManyUserInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutUserInput | ScoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutUserInput | ScoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type SessionParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutUserInput, SessionParticipantUncheckedCreateWithoutUserInput> | SessionParticipantCreateWithoutUserInput[] | SessionParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutUserInput | SessionParticipantCreateOrConnectWithoutUserInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutUserInput | SessionParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionParticipantCreateManyUserInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutUserInput | SessionParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutUserInput | SessionParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CuppingTemplateCreateWithoutCreatorInput, CuppingTemplateUncheckedCreateWithoutCreatorInput> | CuppingTemplateCreateWithoutCreatorInput[] | CuppingTemplateUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutCreatorInput | CuppingTemplateCreateOrConnectWithoutCreatorInput[]
    upsert?: CuppingTemplateUpsertWithWhereUniqueWithoutCreatorInput | CuppingTemplateUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CuppingTemplateCreateManyCreatorInputEnvelope
    set?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    disconnect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    delete?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    connect?: CuppingTemplateWhereUniqueInput | CuppingTemplateWhereUniqueInput[]
    update?: CuppingTemplateUpdateWithWhereUniqueWithoutCreatorInput | CuppingTemplateUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CuppingTemplateUpdateManyWithWhereWithoutCreatorInput | CuppingTemplateUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CuppingTemplateScalarWhereInput | CuppingTemplateScalarWhereInput[]
  }

  export type FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FlavorDescriptorCreateWithoutCreatorInput, FlavorDescriptorUncheckedCreateWithoutCreatorInput> | FlavorDescriptorCreateWithoutCreatorInput[] | FlavorDescriptorUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutCreatorInput | FlavorDescriptorCreateOrConnectWithoutCreatorInput[]
    upsert?: FlavorDescriptorUpsertWithWhereUniqueWithoutCreatorInput | FlavorDescriptorUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FlavorDescriptorCreateManyCreatorInputEnvelope
    set?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    disconnect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    delete?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    connect?: FlavorDescriptorWhereUniqueInput | FlavorDescriptorWhereUniqueInput[]
    update?: FlavorDescriptorUpdateWithWhereUniqueWithoutCreatorInput | FlavorDescriptorUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FlavorDescriptorUpdateManyWithWhereWithoutCreatorInput | FlavorDescriptorUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FlavorDescriptorScalarWhereInput | FlavorDescriptorScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumInvitationStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvitationStatus
  }

  export type OrganizationUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    upsert?: OrganizationUpsertWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvitationsInput, OrganizationUpdateWithoutInvitationsInput>, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type SampleCreatetagsInput = {
    set: string[]
  }

  export type OrganizationCreateNestedOneWithoutSamplesInput = {
    create?: XOR<OrganizationCreateWithoutSamplesInput, OrganizationUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutSamplesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type SessionSampleCreateNestedManyWithoutSampleInput = {
    create?: XOR<SessionSampleCreateWithoutSampleInput, SessionSampleUncheckedCreateWithoutSampleInput> | SessionSampleCreateWithoutSampleInput[] | SessionSampleUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSampleInput | SessionSampleCreateOrConnectWithoutSampleInput[]
    createMany?: SessionSampleCreateManySampleInputEnvelope
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
  }

  export type ScoreCreateNestedManyWithoutSampleInput = {
    create?: XOR<ScoreCreateWithoutSampleInput, ScoreUncheckedCreateWithoutSampleInput> | ScoreCreateWithoutSampleInput[] | ScoreUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSampleInput | ScoreCreateOrConnectWithoutSampleInput[]
    createMany?: ScoreCreateManySampleInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type GreenBeanGradingCreateNestedOneWithoutSampleInput = {
    create?: XOR<GreenBeanGradingCreateWithoutSampleInput, GreenBeanGradingUncheckedCreateWithoutSampleInput>
    connectOrCreate?: GreenBeanGradingCreateOrConnectWithoutSampleInput
    connect?: GreenBeanGradingWhereUniqueInput
  }

  export type SessionSampleUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<SessionSampleCreateWithoutSampleInput, SessionSampleUncheckedCreateWithoutSampleInput> | SessionSampleCreateWithoutSampleInput[] | SessionSampleUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSampleInput | SessionSampleCreateOrConnectWithoutSampleInput[]
    createMany?: SessionSampleCreateManySampleInputEnvelope
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<ScoreCreateWithoutSampleInput, ScoreUncheckedCreateWithoutSampleInput> | ScoreCreateWithoutSampleInput[] | ScoreUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSampleInput | ScoreCreateOrConnectWithoutSampleInput[]
    createMany?: ScoreCreateManySampleInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type GreenBeanGradingUncheckedCreateNestedOneWithoutSampleInput = {
    create?: XOR<GreenBeanGradingCreateWithoutSampleInput, GreenBeanGradingUncheckedCreateWithoutSampleInput>
    connectOrCreate?: GreenBeanGradingCreateOrConnectWithoutSampleInput
    connect?: GreenBeanGradingWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumProcessingMethodFieldUpdateOperationsInput = {
    set?: $Enums.ProcessingMethod | null
  }

  export type NullableEnumRoastLevelFieldUpdateOperationsInput = {
    set?: $Enums.RoastLevel | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SampleUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrganizationUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<OrganizationCreateWithoutSamplesInput, OrganizationUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutSamplesInput
    upsert?: OrganizationUpsertWithoutSamplesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutSamplesInput, OrganizationUpdateWithoutSamplesInput>, OrganizationUncheckedUpdateWithoutSamplesInput>
  }

  export type SessionSampleUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SessionSampleCreateWithoutSampleInput, SessionSampleUncheckedCreateWithoutSampleInput> | SessionSampleCreateWithoutSampleInput[] | SessionSampleUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSampleInput | SessionSampleCreateOrConnectWithoutSampleInput[]
    upsert?: SessionSampleUpsertWithWhereUniqueWithoutSampleInput | SessionSampleUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SessionSampleCreateManySampleInputEnvelope
    set?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    disconnect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    delete?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    update?: SessionSampleUpdateWithWhereUniqueWithoutSampleInput | SessionSampleUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SessionSampleUpdateManyWithWhereWithoutSampleInput | SessionSampleUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SessionSampleScalarWhereInput | SessionSampleScalarWhereInput[]
  }

  export type ScoreUpdateManyWithoutSampleNestedInput = {
    create?: XOR<ScoreCreateWithoutSampleInput, ScoreUncheckedCreateWithoutSampleInput> | ScoreCreateWithoutSampleInput[] | ScoreUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSampleInput | ScoreCreateOrConnectWithoutSampleInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSampleInput | ScoreUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: ScoreCreateManySampleInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSampleInput | ScoreUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSampleInput | ScoreUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type GreenBeanGradingUpdateOneWithoutSampleNestedInput = {
    create?: XOR<GreenBeanGradingCreateWithoutSampleInput, GreenBeanGradingUncheckedCreateWithoutSampleInput>
    connectOrCreate?: GreenBeanGradingCreateOrConnectWithoutSampleInput
    upsert?: GreenBeanGradingUpsertWithoutSampleInput
    disconnect?: GreenBeanGradingWhereInput | boolean
    delete?: GreenBeanGradingWhereInput | boolean
    connect?: GreenBeanGradingWhereUniqueInput
    update?: XOR<XOR<GreenBeanGradingUpdateToOneWithWhereWithoutSampleInput, GreenBeanGradingUpdateWithoutSampleInput>, GreenBeanGradingUncheckedUpdateWithoutSampleInput>
  }

  export type SessionSampleUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SessionSampleCreateWithoutSampleInput, SessionSampleUncheckedCreateWithoutSampleInput> | SessionSampleCreateWithoutSampleInput[] | SessionSampleUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSampleInput | SessionSampleCreateOrConnectWithoutSampleInput[]
    upsert?: SessionSampleUpsertWithWhereUniqueWithoutSampleInput | SessionSampleUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SessionSampleCreateManySampleInputEnvelope
    set?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    disconnect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    delete?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    update?: SessionSampleUpdateWithWhereUniqueWithoutSampleInput | SessionSampleUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SessionSampleUpdateManyWithWhereWithoutSampleInput | SessionSampleUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SessionSampleScalarWhereInput | SessionSampleScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<ScoreCreateWithoutSampleInput, ScoreUncheckedCreateWithoutSampleInput> | ScoreCreateWithoutSampleInput[] | ScoreUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSampleInput | ScoreCreateOrConnectWithoutSampleInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSampleInput | ScoreUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: ScoreCreateManySampleInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSampleInput | ScoreUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSampleInput | ScoreUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type GreenBeanGradingUncheckedUpdateOneWithoutSampleNestedInput = {
    create?: XOR<GreenBeanGradingCreateWithoutSampleInput, GreenBeanGradingUncheckedCreateWithoutSampleInput>
    connectOrCreate?: GreenBeanGradingCreateOrConnectWithoutSampleInput
    upsert?: GreenBeanGradingUpsertWithoutSampleInput
    disconnect?: GreenBeanGradingWhereInput | boolean
    delete?: GreenBeanGradingWhereInput | boolean
    connect?: GreenBeanGradingWhereUniqueInput
    update?: XOR<XOR<GreenBeanGradingUpdateToOneWithWhereWithoutSampleInput, GreenBeanGradingUpdateWithoutSampleInput>, GreenBeanGradingUncheckedUpdateWithoutSampleInput>
  }

  export type OrganizationCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTemplatesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTemplatesInput = {
    create?: XOR<UserCreateWithoutCreatedTemplatesInput, UserUncheckedCreateWithoutCreatedTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTemplatesInput
    connect?: UserWhereUniqueInput
  }

  export type CuppingSessionCreateNestedManyWithoutTemplateInput = {
    create?: XOR<CuppingSessionCreateWithoutTemplateInput, CuppingSessionUncheckedCreateWithoutTemplateInput> | CuppingSessionCreateWithoutTemplateInput[] | CuppingSessionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutTemplateInput | CuppingSessionCreateOrConnectWithoutTemplateInput[]
    createMany?: CuppingSessionCreateManyTemplateInputEnvelope
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
  }

  export type CuppingSessionUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<CuppingSessionCreateWithoutTemplateInput, CuppingSessionUncheckedCreateWithoutTemplateInput> | CuppingSessionCreateWithoutTemplateInput[] | CuppingSessionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutTemplateInput | CuppingSessionCreateOrConnectWithoutTemplateInput[]
    createMany?: CuppingSessionCreateManyTemplateInputEnvelope
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
  }

  export type EnumScoringSystemFieldUpdateOperationsInput = {
    set?: $Enums.ScoringSystem
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrganizationUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTemplatesInput
    upsert?: OrganizationUpsertWithoutTemplatesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutTemplatesInput, OrganizationUpdateWithoutTemplatesInput>, OrganizationUncheckedUpdateWithoutTemplatesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedTemplatesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTemplatesInput, UserUncheckedCreateWithoutCreatedTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTemplatesInput
    upsert?: UserUpsertWithoutCreatedTemplatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTemplatesInput, UserUpdateWithoutCreatedTemplatesInput>, UserUncheckedUpdateWithoutCreatedTemplatesInput>
  }

  export type CuppingSessionUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutTemplateInput, CuppingSessionUncheckedCreateWithoutTemplateInput> | CuppingSessionCreateWithoutTemplateInput[] | CuppingSessionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutTemplateInput | CuppingSessionCreateOrConnectWithoutTemplateInput[]
    upsert?: CuppingSessionUpsertWithWhereUniqueWithoutTemplateInput | CuppingSessionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: CuppingSessionCreateManyTemplateInputEnvelope
    set?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    disconnect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    delete?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    update?: CuppingSessionUpdateWithWhereUniqueWithoutTemplateInput | CuppingSessionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: CuppingSessionUpdateManyWithWhereWithoutTemplateInput | CuppingSessionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
  }

  export type CuppingSessionUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutTemplateInput, CuppingSessionUncheckedCreateWithoutTemplateInput> | CuppingSessionCreateWithoutTemplateInput[] | CuppingSessionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutTemplateInput | CuppingSessionCreateOrConnectWithoutTemplateInput[]
    upsert?: CuppingSessionUpsertWithWhereUniqueWithoutTemplateInput | CuppingSessionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: CuppingSessionCreateManyTemplateInputEnvelope
    set?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    disconnect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    delete?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    connect?: CuppingSessionWhereUniqueInput | CuppingSessionWhereUniqueInput[]
    update?: CuppingSessionUpdateWithWhereUniqueWithoutTemplateInput | CuppingSessionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: CuppingSessionUpdateManyWithWhereWithoutTemplateInput | CuppingSessionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
  }

  export type CuppingSessionCreatetagsInput = {
    set: string[]
  }

  export type OrganizationCreateNestedOneWithoutCuppingSessionsInput = {
    create?: XOR<OrganizationCreateWithoutCuppingSessionsInput, OrganizationUncheckedCreateWithoutCuppingSessionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCuppingSessionsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCuppingSessionsInput = {
    create?: XOR<UserCreateWithoutCuppingSessionsInput, UserUncheckedCreateWithoutCuppingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCuppingSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput = {
    create?: XOR<CuppingTemplateCreateWithoutCuppingSessionsInput, CuppingTemplateUncheckedCreateWithoutCuppingSessionsInput>
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutCuppingSessionsInput
    connect?: CuppingTemplateWhereUniqueInput
  }

  export type SessionParticipantCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type SessionSampleCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionSampleCreateWithoutSessionInput, SessionSampleUncheckedCreateWithoutSessionInput> | SessionSampleCreateWithoutSessionInput[] | SessionSampleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSessionInput | SessionSampleCreateOrConnectWithoutSessionInput[]
    createMany?: SessionSampleCreateManySessionInputEnvelope
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
  }

  export type ScoreCreateNestedManyWithoutSessionInput = {
    create?: XOR<ScoreCreateWithoutSessionInput, ScoreUncheckedCreateWithoutSessionInput> | ScoreCreateWithoutSessionInput[] | ScoreUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionInput | ScoreCreateOrConnectWithoutSessionInput[]
    createMany?: ScoreCreateManySessionInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type SessionParticipantUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type SessionSampleUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionSampleCreateWithoutSessionInput, SessionSampleUncheckedCreateWithoutSessionInput> | SessionSampleCreateWithoutSessionInput[] | SessionSampleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSessionInput | SessionSampleCreateOrConnectWithoutSessionInput[]
    createMany?: SessionSampleCreateManySessionInputEnvelope
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ScoreCreateWithoutSessionInput, ScoreUncheckedCreateWithoutSessionInput> | ScoreCreateWithoutSessionInput[] | ScoreUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionInput | ScoreCreateOrConnectWithoutSessionInput[]
    createMany?: ScoreCreateManySessionInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type EnumSessionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SessionStatus
  }

  export type CuppingSessionUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput = {
    create?: XOR<OrganizationCreateWithoutCuppingSessionsInput, OrganizationUncheckedCreateWithoutCuppingSessionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCuppingSessionsInput
    upsert?: OrganizationUpsertWithoutCuppingSessionsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutCuppingSessionsInput, OrganizationUpdateWithoutCuppingSessionsInput>, OrganizationUncheckedUpdateWithoutCuppingSessionsInput>
  }

  export type UserUpdateOneRequiredWithoutCuppingSessionsNestedInput = {
    create?: XOR<UserCreateWithoutCuppingSessionsInput, UserUncheckedCreateWithoutCuppingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCuppingSessionsInput
    upsert?: UserUpsertWithoutCuppingSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCuppingSessionsInput, UserUpdateWithoutCuppingSessionsInput>, UserUncheckedUpdateWithoutCuppingSessionsInput>
  }

  export type CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput = {
    create?: XOR<CuppingTemplateCreateWithoutCuppingSessionsInput, CuppingTemplateUncheckedCreateWithoutCuppingSessionsInput>
    connectOrCreate?: CuppingTemplateCreateOrConnectWithoutCuppingSessionsInput
    upsert?: CuppingTemplateUpsertWithoutCuppingSessionsInput
    disconnect?: CuppingTemplateWhereInput | boolean
    delete?: CuppingTemplateWhereInput | boolean
    connect?: CuppingTemplateWhereUniqueInput
    update?: XOR<XOR<CuppingTemplateUpdateToOneWithWhereWithoutCuppingSessionsInput, CuppingTemplateUpdateWithoutCuppingSessionsInput>, CuppingTemplateUncheckedUpdateWithoutCuppingSessionsInput>
  }

  export type SessionParticipantUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutSessionInput | SessionParticipantUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutSessionInput | SessionParticipantUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutSessionInput | SessionParticipantUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type SessionSampleUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionSampleCreateWithoutSessionInput, SessionSampleUncheckedCreateWithoutSessionInput> | SessionSampleCreateWithoutSessionInput[] | SessionSampleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSessionInput | SessionSampleCreateOrConnectWithoutSessionInput[]
    upsert?: SessionSampleUpsertWithWhereUniqueWithoutSessionInput | SessionSampleUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionSampleCreateManySessionInputEnvelope
    set?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    disconnect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    delete?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    update?: SessionSampleUpdateWithWhereUniqueWithoutSessionInput | SessionSampleUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionSampleUpdateManyWithWhereWithoutSessionInput | SessionSampleUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionSampleScalarWhereInput | SessionSampleScalarWhereInput[]
  }

  export type ScoreUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ScoreCreateWithoutSessionInput, ScoreUncheckedCreateWithoutSessionInput> | ScoreCreateWithoutSessionInput[] | ScoreUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionInput | ScoreCreateOrConnectWithoutSessionInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSessionInput | ScoreUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ScoreCreateManySessionInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSessionInput | ScoreUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSessionInput | ScoreUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutSessionInput | SessionParticipantUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutSessionInput | SessionParticipantUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutSessionInput | SessionParticipantUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type SessionSampleUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionSampleCreateWithoutSessionInput, SessionSampleUncheckedCreateWithoutSessionInput> | SessionSampleCreateWithoutSessionInput[] | SessionSampleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionSampleCreateOrConnectWithoutSessionInput | SessionSampleCreateOrConnectWithoutSessionInput[]
    upsert?: SessionSampleUpsertWithWhereUniqueWithoutSessionInput | SessionSampleUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionSampleCreateManySessionInputEnvelope
    set?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    disconnect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    delete?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    connect?: SessionSampleWhereUniqueInput | SessionSampleWhereUniqueInput[]
    update?: SessionSampleUpdateWithWhereUniqueWithoutSessionInput | SessionSampleUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionSampleUpdateManyWithWhereWithoutSessionInput | SessionSampleUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionSampleScalarWhereInput | SessionSampleScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ScoreCreateWithoutSessionInput, ScoreUncheckedCreateWithoutSessionInput> | ScoreCreateWithoutSessionInput[] | ScoreUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionInput | ScoreCreateOrConnectWithoutSessionInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSessionInput | ScoreUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ScoreCreateManySessionInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSessionInput | ScoreUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSessionInput | ScoreUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type CuppingSessionCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<CuppingSessionCreateWithoutParticipantsInput, CuppingSessionUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutParticipantsInput
    connect?: CuppingSessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSessionParticipantsInput = {
    create?: XOR<UserCreateWithoutSessionParticipantsInput, UserUncheckedCreateWithoutSessionParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumParticipantRoleFieldUpdateOperationsInput = {
    set?: $Enums.ParticipantRole
  }

  export type CuppingSessionUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutParticipantsInput, CuppingSessionUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutParticipantsInput
    upsert?: CuppingSessionUpsertWithoutParticipantsInput
    connect?: CuppingSessionWhereUniqueInput
    update?: XOR<XOR<CuppingSessionUpdateToOneWithWhereWithoutParticipantsInput, CuppingSessionUpdateWithoutParticipantsInput>, CuppingSessionUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutSessionParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutSessionParticipantsInput, UserUncheckedCreateWithoutSessionParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionParticipantsInput
    upsert?: UserUpsertWithoutSessionParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionParticipantsInput, UserUpdateWithoutSessionParticipantsInput>, UserUncheckedUpdateWithoutSessionParticipantsInput>
  }

  export type CuppingSessionCreateNestedOneWithoutSamplesInput = {
    create?: XOR<CuppingSessionCreateWithoutSamplesInput, CuppingSessionUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutSamplesInput
    connect?: CuppingSessionWhereUniqueInput
  }

  export type SampleCreateNestedOneWithoutSessionSamplesInput = {
    create?: XOR<SampleCreateWithoutSessionSamplesInput, SampleUncheckedCreateWithoutSessionSamplesInput>
    connectOrCreate?: SampleCreateOrConnectWithoutSessionSamplesInput
    connect?: SampleWhereUniqueInput
  }

  export type ScoreCreateNestedManyWithoutSessionSampleInput = {
    create?: XOR<ScoreCreateWithoutSessionSampleInput, ScoreUncheckedCreateWithoutSessionSampleInput> | ScoreCreateWithoutSessionSampleInput[] | ScoreUncheckedCreateWithoutSessionSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionSampleInput | ScoreCreateOrConnectWithoutSessionSampleInput[]
    createMany?: ScoreCreateManySessionSampleInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutSessionSampleInput = {
    create?: XOR<ScoreCreateWithoutSessionSampleInput, ScoreUncheckedCreateWithoutSessionSampleInput> | ScoreCreateWithoutSessionSampleInput[] | ScoreUncheckedCreateWithoutSessionSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionSampleInput | ScoreCreateOrConnectWithoutSessionSampleInput[]
    createMany?: ScoreCreateManySessionSampleInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type CuppingSessionUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutSamplesInput, CuppingSessionUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutSamplesInput
    upsert?: CuppingSessionUpsertWithoutSamplesInput
    connect?: CuppingSessionWhereUniqueInput
    update?: XOR<XOR<CuppingSessionUpdateToOneWithWhereWithoutSamplesInput, CuppingSessionUpdateWithoutSamplesInput>, CuppingSessionUncheckedUpdateWithoutSamplesInput>
  }

  export type SampleUpdateOneRequiredWithoutSessionSamplesNestedInput = {
    create?: XOR<SampleCreateWithoutSessionSamplesInput, SampleUncheckedCreateWithoutSessionSamplesInput>
    connectOrCreate?: SampleCreateOrConnectWithoutSessionSamplesInput
    upsert?: SampleUpsertWithoutSessionSamplesInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutSessionSamplesInput, SampleUpdateWithoutSessionSamplesInput>, SampleUncheckedUpdateWithoutSessionSamplesInput>
  }

  export type ScoreUpdateManyWithoutSessionSampleNestedInput = {
    create?: XOR<ScoreCreateWithoutSessionSampleInput, ScoreUncheckedCreateWithoutSessionSampleInput> | ScoreCreateWithoutSessionSampleInput[] | ScoreUncheckedCreateWithoutSessionSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionSampleInput | ScoreCreateOrConnectWithoutSessionSampleInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSessionSampleInput | ScoreUpsertWithWhereUniqueWithoutSessionSampleInput[]
    createMany?: ScoreCreateManySessionSampleInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSessionSampleInput | ScoreUpdateWithWhereUniqueWithoutSessionSampleInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSessionSampleInput | ScoreUpdateManyWithWhereWithoutSessionSampleInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutSessionSampleNestedInput = {
    create?: XOR<ScoreCreateWithoutSessionSampleInput, ScoreUncheckedCreateWithoutSessionSampleInput> | ScoreCreateWithoutSessionSampleInput[] | ScoreUncheckedCreateWithoutSessionSampleInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSessionSampleInput | ScoreCreateOrConnectWithoutSessionSampleInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSessionSampleInput | ScoreUpsertWithWhereUniqueWithoutSessionSampleInput[]
    createMany?: ScoreCreateManySessionSampleInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSessionSampleInput | ScoreUpdateWithWhereUniqueWithoutSessionSampleInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSessionSampleInput | ScoreUpdateManyWithWhereWithoutSessionSampleInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type CuppingSessionCreateNestedOneWithoutScoresInput = {
    create?: XOR<CuppingSessionCreateWithoutScoresInput, CuppingSessionUncheckedCreateWithoutScoresInput>
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutScoresInput
    connect?: CuppingSessionWhereUniqueInput
  }

  export type SessionSampleCreateNestedOneWithoutScoresInput = {
    create?: XOR<SessionSampleCreateWithoutScoresInput, SessionSampleUncheckedCreateWithoutScoresInput>
    connectOrCreate?: SessionSampleCreateOrConnectWithoutScoresInput
    connect?: SessionSampleWhereUniqueInput
  }

  export type SampleCreateNestedOneWithoutScoresInput = {
    create?: XOR<SampleCreateWithoutScoresInput, SampleUncheckedCreateWithoutScoresInput>
    connectOrCreate?: SampleCreateOrConnectWithoutScoresInput
    connect?: SampleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutScoresInput = {
    create?: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoresInput
    connect?: UserWhereUniqueInput
  }

  export type ScoreFlavorDescriptorCreateNestedManyWithoutScoreInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutScoreInput, ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput> | ScoreFlavorDescriptorCreateWithoutScoreInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput | ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput[]
    createMany?: ScoreFlavorDescriptorCreateManyScoreInputEnvelope
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
  }

  export type ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutScoreInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutScoreInput, ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput> | ScoreFlavorDescriptorCreateWithoutScoreInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput | ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput[]
    createMany?: ScoreFlavorDescriptorCreateManyScoreInputEnvelope
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CuppingSessionUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<CuppingSessionCreateWithoutScoresInput, CuppingSessionUncheckedCreateWithoutScoresInput>
    connectOrCreate?: CuppingSessionCreateOrConnectWithoutScoresInput
    upsert?: CuppingSessionUpsertWithoutScoresInput
    connect?: CuppingSessionWhereUniqueInput
    update?: XOR<XOR<CuppingSessionUpdateToOneWithWhereWithoutScoresInput, CuppingSessionUpdateWithoutScoresInput>, CuppingSessionUncheckedUpdateWithoutScoresInput>
  }

  export type SessionSampleUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<SessionSampleCreateWithoutScoresInput, SessionSampleUncheckedCreateWithoutScoresInput>
    connectOrCreate?: SessionSampleCreateOrConnectWithoutScoresInput
    upsert?: SessionSampleUpsertWithoutScoresInput
    connect?: SessionSampleWhereUniqueInput
    update?: XOR<XOR<SessionSampleUpdateToOneWithWhereWithoutScoresInput, SessionSampleUpdateWithoutScoresInput>, SessionSampleUncheckedUpdateWithoutScoresInput>
  }

  export type SampleUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<SampleCreateWithoutScoresInput, SampleUncheckedCreateWithoutScoresInput>
    connectOrCreate?: SampleCreateOrConnectWithoutScoresInput
    upsert?: SampleUpsertWithoutScoresInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutScoresInput, SampleUpdateWithoutScoresInput>, SampleUncheckedUpdateWithoutScoresInput>
  }

  export type UserUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoresInput
    upsert?: UserUpsertWithoutScoresInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScoresInput, UserUpdateWithoutScoresInput>, UserUncheckedUpdateWithoutScoresInput>
  }

  export type ScoreFlavorDescriptorUpdateManyWithoutScoreNestedInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutScoreInput, ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput> | ScoreFlavorDescriptorCreateWithoutScoreInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput | ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput[]
    upsert?: ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutScoreInput | ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutScoreInput[]
    createMany?: ScoreFlavorDescriptorCreateManyScoreInputEnvelope
    set?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    disconnect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    delete?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    update?: ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutScoreInput | ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutScoreInput[]
    updateMany?: ScoreFlavorDescriptorUpdateManyWithWhereWithoutScoreInput | ScoreFlavorDescriptorUpdateManyWithWhereWithoutScoreInput[]
    deleteMany?: ScoreFlavorDescriptorScalarWhereInput | ScoreFlavorDescriptorScalarWhereInput[]
  }

  export type ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreNestedInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutScoreInput, ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput> | ScoreFlavorDescriptorCreateWithoutScoreInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput | ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput[]
    upsert?: ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutScoreInput | ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutScoreInput[]
    createMany?: ScoreFlavorDescriptorCreateManyScoreInputEnvelope
    set?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    disconnect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    delete?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    update?: ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutScoreInput | ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutScoreInput[]
    updateMany?: ScoreFlavorDescriptorUpdateManyWithWhereWithoutScoreInput | ScoreFlavorDescriptorUpdateManyWithWhereWithoutScoreInput[]
    deleteMany?: ScoreFlavorDescriptorScalarWhereInput | ScoreFlavorDescriptorScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutFlavorDescriptorsInput = {
    create?: XOR<OrganizationCreateWithoutFlavorDescriptorsInput, OrganizationUncheckedCreateWithoutFlavorDescriptorsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutFlavorDescriptorsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedFlavorDescriptorsInput = {
    create?: XOR<UserCreateWithoutCreatedFlavorDescriptorsInput, UserUncheckedCreateWithoutCreatedFlavorDescriptorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFlavorDescriptorsInput
    connect?: UserWhereUniqueInput
  }

  export type ScoreFlavorDescriptorCreateNestedManyWithoutFlavorDescriptorInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput> | ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput | ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput[]
    createMany?: ScoreFlavorDescriptorCreateManyFlavorDescriptorInputEnvelope
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
  }

  export type ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutFlavorDescriptorInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput> | ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput | ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput[]
    createMany?: ScoreFlavorDescriptorCreateManyFlavorDescriptorInputEnvelope
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
  }

  export type EnumFlavorCategoryFieldUpdateOperationsInput = {
    set?: $Enums.FlavorCategory
  }

  export type OrganizationUpdateOneWithoutFlavorDescriptorsNestedInput = {
    create?: XOR<OrganizationCreateWithoutFlavorDescriptorsInput, OrganizationUncheckedCreateWithoutFlavorDescriptorsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutFlavorDescriptorsInput
    upsert?: OrganizationUpsertWithoutFlavorDescriptorsInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutFlavorDescriptorsInput, OrganizationUpdateWithoutFlavorDescriptorsInput>, OrganizationUncheckedUpdateWithoutFlavorDescriptorsInput>
  }

  export type UserUpdateOneWithoutCreatedFlavorDescriptorsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedFlavorDescriptorsInput, UserUncheckedCreateWithoutCreatedFlavorDescriptorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFlavorDescriptorsInput
    upsert?: UserUpsertWithoutCreatedFlavorDescriptorsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedFlavorDescriptorsInput, UserUpdateWithoutCreatedFlavorDescriptorsInput>, UserUncheckedUpdateWithoutCreatedFlavorDescriptorsInput>
  }

  export type ScoreFlavorDescriptorUpdateManyWithoutFlavorDescriptorNestedInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput> | ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput | ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput[]
    upsert?: ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutFlavorDescriptorInput | ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutFlavorDescriptorInput[]
    createMany?: ScoreFlavorDescriptorCreateManyFlavorDescriptorInputEnvelope
    set?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    disconnect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    delete?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    update?: ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutFlavorDescriptorInput | ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutFlavorDescriptorInput[]
    updateMany?: ScoreFlavorDescriptorUpdateManyWithWhereWithoutFlavorDescriptorInput | ScoreFlavorDescriptorUpdateManyWithWhereWithoutFlavorDescriptorInput[]
    deleteMany?: ScoreFlavorDescriptorScalarWhereInput | ScoreFlavorDescriptorScalarWhereInput[]
  }

  export type ScoreFlavorDescriptorUncheckedUpdateManyWithoutFlavorDescriptorNestedInput = {
    create?: XOR<ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput> | ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput[] | ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput[]
    connectOrCreate?: ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput | ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput[]
    upsert?: ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutFlavorDescriptorInput | ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutFlavorDescriptorInput[]
    createMany?: ScoreFlavorDescriptorCreateManyFlavorDescriptorInputEnvelope
    set?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    disconnect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    delete?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    connect?: ScoreFlavorDescriptorWhereUniqueInput | ScoreFlavorDescriptorWhereUniqueInput[]
    update?: ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutFlavorDescriptorInput | ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutFlavorDescriptorInput[]
    updateMany?: ScoreFlavorDescriptorUpdateManyWithWhereWithoutFlavorDescriptorInput | ScoreFlavorDescriptorUpdateManyWithWhereWithoutFlavorDescriptorInput[]
    deleteMany?: ScoreFlavorDescriptorScalarWhereInput | ScoreFlavorDescriptorScalarWhereInput[]
  }

  export type ScoreCreateNestedOneWithoutFlavorDescriptorsInput = {
    create?: XOR<ScoreCreateWithoutFlavorDescriptorsInput, ScoreUncheckedCreateWithoutFlavorDescriptorsInput>
    connectOrCreate?: ScoreCreateOrConnectWithoutFlavorDescriptorsInput
    connect?: ScoreWhereUniqueInput
  }

  export type FlavorDescriptorCreateNestedOneWithoutScoreDescriptorsInput = {
    create?: XOR<FlavorDescriptorCreateWithoutScoreDescriptorsInput, FlavorDescriptorUncheckedCreateWithoutScoreDescriptorsInput>
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutScoreDescriptorsInput
    connect?: FlavorDescriptorWhereUniqueInput
  }

  export type ScoreUpdateOneRequiredWithoutFlavorDescriptorsNestedInput = {
    create?: XOR<ScoreCreateWithoutFlavorDescriptorsInput, ScoreUncheckedCreateWithoutFlavorDescriptorsInput>
    connectOrCreate?: ScoreCreateOrConnectWithoutFlavorDescriptorsInput
    upsert?: ScoreUpsertWithoutFlavorDescriptorsInput
    connect?: ScoreWhereUniqueInput
    update?: XOR<XOR<ScoreUpdateToOneWithWhereWithoutFlavorDescriptorsInput, ScoreUpdateWithoutFlavorDescriptorsInput>, ScoreUncheckedUpdateWithoutFlavorDescriptorsInput>
  }

  export type FlavorDescriptorUpdateOneRequiredWithoutScoreDescriptorsNestedInput = {
    create?: XOR<FlavorDescriptorCreateWithoutScoreDescriptorsInput, FlavorDescriptorUncheckedCreateWithoutScoreDescriptorsInput>
    connectOrCreate?: FlavorDescriptorCreateOrConnectWithoutScoreDescriptorsInput
    upsert?: FlavorDescriptorUpsertWithoutScoreDescriptorsInput
    connect?: FlavorDescriptorWhereUniqueInput
    update?: XOR<XOR<FlavorDescriptorUpdateToOneWithWhereWithoutScoreDescriptorsInput, FlavorDescriptorUpdateWithoutScoreDescriptorsInput>, FlavorDescriptorUncheckedUpdateWithoutScoreDescriptorsInput>
  }

  export type SampleCreateNestedOneWithoutGreenBeanGradingInput = {
    create?: XOR<SampleCreateWithoutGreenBeanGradingInput, SampleUncheckedCreateWithoutGreenBeanGradingInput>
    connectOrCreate?: SampleCreateOrConnectWithoutGreenBeanGradingInput
    connect?: SampleWhereUniqueInput
  }

  export type EnumGradingSystemFieldUpdateOperationsInput = {
    set?: $Enums.GradingSystem
  }

  export type NullableEnumGradeClassificationFieldUpdateOperationsInput = {
    set?: $Enums.GradeClassification | null
  }

  export type SampleUpdateOneRequiredWithoutGreenBeanGradingNestedInput = {
    create?: XOR<SampleCreateWithoutGreenBeanGradingInput, SampleUncheckedCreateWithoutGreenBeanGradingInput>
    connectOrCreate?: SampleCreateOrConnectWithoutGreenBeanGradingInput
    upsert?: SampleUpsertWithoutGreenBeanGradingInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutGreenBeanGradingInput, SampleUpdateWithoutGreenBeanGradingInput>, SampleUncheckedUpdateWithoutGreenBeanGradingInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumSubscriptionPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanFilter<$PrismaModel> | $Enums.SubscriptionPlan
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumInvitationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusFilter<$PrismaModel> | $Enums.InvitationStatus
  }

  export type NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvitationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvitationStatusFilter<$PrismaModel>
    _max?: NestedEnumInvitationStatusFilter<$PrismaModel>
  }

  export type NestedEnumProcessingMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingMethod | EnumProcessingMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProcessingMethodNullableFilter<$PrismaModel> | $Enums.ProcessingMethod | null
  }

  export type NestedEnumRoastLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RoastLevel | EnumRoastLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoastLevelNullableFilter<$PrismaModel> | $Enums.RoastLevel | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumProcessingMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingMethod | EnumProcessingMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProcessingMethod[] | ListEnumProcessingMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProcessingMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProcessingMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProcessingMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumProcessingMethodNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoastLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoastLevel | EnumRoastLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoastLevel[] | ListEnumRoastLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoastLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.RoastLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoastLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumRoastLevelNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumScoringSystemFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemFilter<$PrismaModel> | $Enums.ScoringSystem
  }

  export type NestedEnumScoringSystemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemWithAggregatesFilter<$PrismaModel> | $Enums.ScoringSystem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScoringSystemFilter<$PrismaModel>
    _max?: NestedEnumScoringSystemFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type NestedEnumParticipantRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumParticipantRoleFilter<$PrismaModel> | $Enums.ParticipantRole
  }

  export type NestedEnumParticipantRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParticipantRole | EnumParticipantRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParticipantRole[] | ListEnumParticipantRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumParticipantRoleWithAggregatesFilter<$PrismaModel> | $Enums.ParticipantRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParticipantRoleFilter<$PrismaModel>
    _max?: NestedEnumParticipantRoleFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumFlavorCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.FlavorCategory | EnumFlavorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFlavorCategoryFilter<$PrismaModel> | $Enums.FlavorCategory
  }

  export type NestedEnumFlavorCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FlavorCategory | EnumFlavorCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlavorCategory[] | ListEnumFlavorCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFlavorCategoryWithAggregatesFilter<$PrismaModel> | $Enums.FlavorCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFlavorCategoryFilter<$PrismaModel>
    _max?: NestedEnumFlavorCategoryFilter<$PrismaModel>
  }

  export type NestedEnumGradingSystemFilter<$PrismaModel = never> = {
    equals?: $Enums.GradingSystem | EnumGradingSystemFieldRefInput<$PrismaModel>
    in?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumGradingSystemFilter<$PrismaModel> | $Enums.GradingSystem
  }

  export type NestedEnumGradeClassificationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeClassification | EnumGradeClassificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGradeClassificationNullableFilter<$PrismaModel> | $Enums.GradeClassification | null
  }

  export type NestedEnumGradingSystemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradingSystem | EnumGradingSystemFieldRefInput<$PrismaModel>
    in?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradingSystem[] | ListEnumGradingSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumGradingSystemWithAggregatesFilter<$PrismaModel> | $Enums.GradingSystem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradingSystemFilter<$PrismaModel>
    _max?: NestedEnumGradingSystemFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumGradeClassificationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeClassification | EnumGradeClassificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.GradeClassification[] | ListEnumGradeClassificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGradeClassificationNullableWithAggregatesFilter<$PrismaModel> | $Enums.GradeClassification | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGradeClassificationNullableFilter<$PrismaModel>
    _max?: NestedEnumGradeClassificationNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutCreatorInput
    scores?: ScoreCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput
    scores?: ScoreUncheckedCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantUncheckedCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CuppingSessionCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCuppingSessionsInput
    template?: CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
    samples?: SessionSampleCreateNestedManyWithoutSessionInput
    scores?: ScoreCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateWithoutOrganizationInput = {
    id?: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
    samples?: SessionSampleUncheckedCreateNestedManyWithoutSessionInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionCreateOrConnectWithoutOrganizationInput = {
    where: CuppingSessionWhereUniqueInput
    create: XOR<CuppingSessionCreateWithoutOrganizationInput, CuppingSessionUncheckedCreateWithoutOrganizationInput>
  }

  export type CuppingSessionCreateManyOrganizationInputEnvelope = {
    data: CuppingSessionCreateManyOrganizationInput | CuppingSessionCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type SampleCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionSamples?: SessionSampleCreateNestedManyWithoutSampleInput
    scores?: ScoreCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionSamples?: SessionSampleUncheckedCreateNestedManyWithoutSampleInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutOrganizationInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutOrganizationInput, SampleUncheckedCreateWithoutOrganizationInput>
  }

  export type SampleCreateManyOrganizationInputEnvelope = {
    data: SampleCreateManyOrganizationInput | SampleCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CuppingTemplateCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedTemplatesInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutTemplateInput
  }

  export type CuppingTemplateUncheckedCreateWithoutOrganizationInput = {
    id?: string
    createdBy: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type CuppingTemplateCreateOrConnectWithoutOrganizationInput = {
    where: CuppingTemplateWhereUniqueInput
    create: XOR<CuppingTemplateCreateWithoutOrganizationInput, CuppingTemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type CuppingTemplateCreateManyOrganizationInputEnvelope = {
    data: CuppingTemplateCreateManyOrganizationInput | CuppingTemplateCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.UserRole
    token: string
    status?: $Enums.InvitationStatus
    expiresAt: Date | string
    invitedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationUncheckedCreateWithoutOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.UserRole
    token: string
    status?: $Enums.InvitationStatus
    expiresAt: Date | string
    invitedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationCreateOrConnectWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type InvitationCreateManyOrganizationInputEnvelope = {
    data: InvitationCreateManyOrganizationInput | InvitationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type FlavorDescriptorCreateWithoutOrganizationInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedFlavorDescriptorsInput
    scoreDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutFlavorDescriptorInput
  }

  export type FlavorDescriptorUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutFlavorDescriptorInput
  }

  export type FlavorDescriptorCreateOrConnectWithoutOrganizationInput = {
    where: FlavorDescriptorWhereUniqueInput
    create: XOR<FlavorDescriptorCreateWithoutOrganizationInput, FlavorDescriptorUncheckedCreateWithoutOrganizationInput>
  }

  export type FlavorDescriptorCreateManyOrganizationInputEnvelope = {
    data: FlavorDescriptorCreateManyOrganizationInput | FlavorDescriptorCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    organizationId?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type CuppingSessionUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CuppingSessionWhereUniqueInput
    update: XOR<CuppingSessionUpdateWithoutOrganizationInput, CuppingSessionUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CuppingSessionCreateWithoutOrganizationInput, CuppingSessionUncheckedCreateWithoutOrganizationInput>
  }

  export type CuppingSessionUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CuppingSessionWhereUniqueInput
    data: XOR<CuppingSessionUpdateWithoutOrganizationInput, CuppingSessionUncheckedUpdateWithoutOrganizationInput>
  }

  export type CuppingSessionUpdateManyWithWhereWithoutOrganizationInput = {
    where: CuppingSessionScalarWhereInput
    data: XOR<CuppingSessionUpdateManyMutationInput, CuppingSessionUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type CuppingSessionScalarWhereInput = {
    AND?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
    OR?: CuppingSessionScalarWhereInput[]
    NOT?: CuppingSessionScalarWhereInput | CuppingSessionScalarWhereInput[]
    id?: StringFilter<"CuppingSession"> | string
    organizationId?: StringFilter<"CuppingSession"> | string
    createdBy?: StringFilter<"CuppingSession"> | string
    name?: StringFilter<"CuppingSession"> | string
    description?: StringNullableFilter<"CuppingSession"> | string | null
    location?: StringNullableFilter<"CuppingSession"> | string | null
    templateId?: StringNullableFilter<"CuppingSession"> | string | null
    blindTasting?: BoolFilter<"CuppingSession"> | boolean
    allowComments?: BoolFilter<"CuppingSession"> | boolean
    requireCalibration?: BoolFilter<"CuppingSession"> | boolean
    status?: EnumSessionStatusFilter<"CuppingSession"> | $Enums.SessionStatus
    scheduledAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"CuppingSession"> | Date | string | null
    notes?: StringNullableFilter<"CuppingSession"> | string | null
    tags?: StringNullableListFilter<"CuppingSession">
    settings?: JsonFilter<"CuppingSession">
    createdAt?: DateTimeFilter<"CuppingSession"> | Date | string
    updatedAt?: DateTimeFilter<"CuppingSession"> | Date | string
  }

  export type SampleUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutOrganizationInput, SampleUncheckedUpdateWithoutOrganizationInput>
    create: XOR<SampleCreateWithoutOrganizationInput, SampleUncheckedCreateWithoutOrganizationInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutOrganizationInput, SampleUncheckedUpdateWithoutOrganizationInput>
  }

  export type SampleUpdateManyWithWhereWithoutOrganizationInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type SampleScalarWhereInput = {
    AND?: SampleScalarWhereInput | SampleScalarWhereInput[]
    OR?: SampleScalarWhereInput[]
    NOT?: SampleScalarWhereInput | SampleScalarWhereInput[]
    id?: StringFilter<"Sample"> | string
    organizationId?: StringFilter<"Sample"> | string
    name?: StringFilter<"Sample"> | string
    description?: StringNullableFilter<"Sample"> | string | null
    code?: StringNullableFilter<"Sample"> | string | null
    origin?: StringFilter<"Sample"> | string
    region?: StringNullableFilter<"Sample"> | string | null
    farm?: StringNullableFilter<"Sample"> | string | null
    producer?: StringNullableFilter<"Sample"> | string | null
    variety?: StringNullableFilter<"Sample"> | string | null
    altitude?: IntNullableFilter<"Sample"> | number | null
    processingMethod?: EnumProcessingMethodNullableFilter<"Sample"> | $Enums.ProcessingMethod | null
    harvestDate?: DateTimeNullableFilter<"Sample"> | Date | string | null
    roaster?: StringNullableFilter<"Sample"> | string | null
    roastDate?: DateTimeNullableFilter<"Sample"> | Date | string | null
    roastLevel?: EnumRoastLevelNullableFilter<"Sample"> | $Enums.RoastLevel | null
    moisture?: FloatNullableFilter<"Sample"> | number | null
    density?: FloatNullableFilter<"Sample"> | number | null
    screenSize?: StringNullableFilter<"Sample"> | string | null
    notes?: StringNullableFilter<"Sample"> | string | null
    imageUrl?: StringNullableFilter<"Sample"> | string | null
    tags?: StringNullableListFilter<"Sample">
    createdAt?: DateTimeFilter<"Sample"> | Date | string
    updatedAt?: DateTimeFilter<"Sample"> | Date | string
  }

  export type CuppingTemplateUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CuppingTemplateWhereUniqueInput
    update: XOR<CuppingTemplateUpdateWithoutOrganizationInput, CuppingTemplateUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CuppingTemplateCreateWithoutOrganizationInput, CuppingTemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type CuppingTemplateUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CuppingTemplateWhereUniqueInput
    data: XOR<CuppingTemplateUpdateWithoutOrganizationInput, CuppingTemplateUncheckedUpdateWithoutOrganizationInput>
  }

  export type CuppingTemplateUpdateManyWithWhereWithoutOrganizationInput = {
    where: CuppingTemplateScalarWhereInput
    data: XOR<CuppingTemplateUpdateManyMutationInput, CuppingTemplateUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type CuppingTemplateScalarWhereInput = {
    AND?: CuppingTemplateScalarWhereInput | CuppingTemplateScalarWhereInput[]
    OR?: CuppingTemplateScalarWhereInput[]
    NOT?: CuppingTemplateScalarWhereInput | CuppingTemplateScalarWhereInput[]
    id?: StringFilter<"CuppingTemplate"> | string
    organizationId?: StringFilter<"CuppingTemplate"> | string
    createdBy?: StringFilter<"CuppingTemplate"> | string
    name?: StringFilter<"CuppingTemplate"> | string
    description?: StringNullableFilter<"CuppingTemplate"> | string | null
    isDefault?: BoolFilter<"CuppingTemplate"> | boolean
    isPublic?: BoolFilter<"CuppingTemplate"> | boolean
    scoringSystem?: EnumScoringSystemFilter<"CuppingTemplate"> | $Enums.ScoringSystem
    maxScore?: IntFilter<"CuppingTemplate"> | number
    categories?: JsonFilter<"CuppingTemplate">
    createdAt?: DateTimeFilter<"CuppingTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"CuppingTemplate"> | Date | string
  }

  export type InvitationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
  }

  export type InvitationUpdateManyWithWhereWithoutOrganizationInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type InvitationScalarWhereInput = {
    AND?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    OR?: InvitationScalarWhereInput[]
    NOT?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    id?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    role?: EnumUserRoleFilter<"Invitation"> | $Enums.UserRole
    token?: StringFilter<"Invitation"> | string
    status?: EnumInvitationStatusFilter<"Invitation"> | $Enums.InvitationStatus
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    invitedBy?: StringFilter<"Invitation"> | string
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    updatedAt?: DateTimeFilter<"Invitation"> | Date | string
  }

  export type FlavorDescriptorUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: FlavorDescriptorWhereUniqueInput
    update: XOR<FlavorDescriptorUpdateWithoutOrganizationInput, FlavorDescriptorUncheckedUpdateWithoutOrganizationInput>
    create: XOR<FlavorDescriptorCreateWithoutOrganizationInput, FlavorDescriptorUncheckedCreateWithoutOrganizationInput>
  }

  export type FlavorDescriptorUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: FlavorDescriptorWhereUniqueInput
    data: XOR<FlavorDescriptorUpdateWithoutOrganizationInput, FlavorDescriptorUncheckedUpdateWithoutOrganizationInput>
  }

  export type FlavorDescriptorUpdateManyWithWhereWithoutOrganizationInput = {
    where: FlavorDescriptorScalarWhereInput
    data: XOR<FlavorDescriptorUpdateManyMutationInput, FlavorDescriptorUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type FlavorDescriptorScalarWhereInput = {
    AND?: FlavorDescriptorScalarWhereInput | FlavorDescriptorScalarWhereInput[]
    OR?: FlavorDescriptorScalarWhereInput[]
    NOT?: FlavorDescriptorScalarWhereInput | FlavorDescriptorScalarWhereInput[]
    id?: StringFilter<"FlavorDescriptor"> | string
    name?: StringFilter<"FlavorDescriptor"> | string
    category?: EnumFlavorCategoryFilter<"FlavorDescriptor"> | $Enums.FlavorCategory
    description?: StringNullableFilter<"FlavorDescriptor"> | string | null
    isDefault?: BoolFilter<"FlavorDescriptor"> | boolean
    organizationId?: StringNullableFilter<"FlavorDescriptor"> | string | null
    createdBy?: StringNullableFilter<"FlavorDescriptor"> | string | null
    createdAt?: DateTimeFilter<"FlavorDescriptor"> | Date | string
    updatedAt?: DateTimeFilter<"FlavorDescriptor"> | Date | string
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutOrganizationInput
    samples?: SampleCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput
    samples?: SampleUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type CuppingSessionCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCuppingSessionsInput
    template?: CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
    samples?: SessionSampleCreateNestedManyWithoutSessionInput
    scores?: ScoreCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateWithoutCreatorInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
    samples?: SessionSampleUncheckedCreateNestedManyWithoutSessionInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionCreateOrConnectWithoutCreatorInput = {
    where: CuppingSessionWhereUniqueInput
    create: XOR<CuppingSessionCreateWithoutCreatorInput, CuppingSessionUncheckedCreateWithoutCreatorInput>
  }

  export type CuppingSessionCreateManyCreatorInputEnvelope = {
    data: CuppingSessionCreateManyCreatorInput | CuppingSessionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCreateWithoutUserInput = {
    id?: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutScoresInput
    sessionSample: SessionSampleCreateNestedOneWithoutScoresInput
    sample: SampleCreateNestedOneWithoutScoresInput
    flavorDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutScoreInput
  }

  export type ScoreUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    sampleId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutScoreInput
  }

  export type ScoreCreateOrConnectWithoutUserInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutUserInput, ScoreUncheckedCreateWithoutUserInput>
  }

  export type ScoreCreateManyUserInputEnvelope = {
    data: ScoreCreateManyUserInput | ScoreCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionParticipantCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
    session: CuppingSessionCreateNestedOneWithoutParticipantsInput
  }

  export type SessionParticipantUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
  }

  export type SessionParticipantCreateOrConnectWithoutUserInput = {
    where: SessionParticipantWhereUniqueInput
    create: XOR<SessionParticipantCreateWithoutUserInput, SessionParticipantUncheckedCreateWithoutUserInput>
  }

  export type SessionParticipantCreateManyUserInputEnvelope = {
    data: SessionParticipantCreateManyUserInput | SessionParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CuppingTemplateCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutTemplatesInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutTemplateInput
  }

  export type CuppingTemplateUncheckedCreateWithoutCreatorInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type CuppingTemplateCreateOrConnectWithoutCreatorInput = {
    where: CuppingTemplateWhereUniqueInput
    create: XOR<CuppingTemplateCreateWithoutCreatorInput, CuppingTemplateUncheckedCreateWithoutCreatorInput>
  }

  export type CuppingTemplateCreateManyCreatorInputEnvelope = {
    data: CuppingTemplateCreateManyCreatorInput | CuppingTemplateCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type FlavorDescriptorCreateWithoutCreatorInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    organization?: OrganizationCreateNestedOneWithoutFlavorDescriptorsInput
    scoreDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutFlavorDescriptorInput
  }

  export type FlavorDescriptorUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    organizationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutFlavorDescriptorInput
  }

  export type FlavorDescriptorCreateOrConnectWithoutCreatorInput = {
    where: FlavorDescriptorWhereUniqueInput
    create: XOR<FlavorDescriptorCreateWithoutCreatorInput, FlavorDescriptorUncheckedCreateWithoutCreatorInput>
  }

  export type FlavorDescriptorCreateManyCreatorInputEnvelope = {
    data: FlavorDescriptorCreateManyCreatorInput | FlavorDescriptorCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type CuppingSessionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CuppingSessionWhereUniqueInput
    update: XOR<CuppingSessionUpdateWithoutCreatorInput, CuppingSessionUncheckedUpdateWithoutCreatorInput>
    create: XOR<CuppingSessionCreateWithoutCreatorInput, CuppingSessionUncheckedCreateWithoutCreatorInput>
  }

  export type CuppingSessionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CuppingSessionWhereUniqueInput
    data: XOR<CuppingSessionUpdateWithoutCreatorInput, CuppingSessionUncheckedUpdateWithoutCreatorInput>
  }

  export type CuppingSessionUpdateManyWithWhereWithoutCreatorInput = {
    where: CuppingSessionScalarWhereInput
    data: XOR<CuppingSessionUpdateManyMutationInput, CuppingSessionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ScoreUpsertWithWhereUniqueWithoutUserInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutUserInput, ScoreUncheckedUpdateWithoutUserInput>
    create: XOR<ScoreCreateWithoutUserInput, ScoreUncheckedCreateWithoutUserInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutUserInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutUserInput, ScoreUncheckedUpdateWithoutUserInput>
  }

  export type ScoreUpdateManyWithWhereWithoutUserInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutUserInput>
  }

  export type ScoreScalarWhereInput = {
    AND?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
    OR?: ScoreScalarWhereInput[]
    NOT?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
    id?: StringFilter<"Score"> | string
    sessionId?: StringFilter<"Score"> | string
    sessionSampleId?: StringFilter<"Score"> | string
    sampleId?: StringFilter<"Score"> | string
    userId?: StringFilter<"Score"> | string
    totalScore?: FloatFilter<"Score"> | number
    maxScore?: FloatFilter<"Score"> | number
    scores?: JsonFilter<"Score">
    aroma?: FloatNullableFilter<"Score"> | number | null
    flavor?: FloatNullableFilter<"Score"> | number | null
    aftertaste?: FloatNullableFilter<"Score"> | number | null
    acidity?: FloatNullableFilter<"Score"> | number | null
    body?: FloatNullableFilter<"Score"> | number | null
    balance?: FloatNullableFilter<"Score"> | number | null
    sweetness?: FloatNullableFilter<"Score"> | number | null
    cleanliness?: FloatNullableFilter<"Score"> | number | null
    uniformity?: FloatNullableFilter<"Score"> | number | null
    overall?: FloatNullableFilter<"Score"> | number | null
    defects?: JsonFilter<"Score">
    notes?: StringNullableFilter<"Score"> | string | null
    privateNotes?: StringNullableFilter<"Score"> | string | null
    voiceNotes?: StringNullableFilter<"Score"> | string | null
    voiceFileUrl?: StringNullableFilter<"Score"> | string | null
    isComplete?: BoolFilter<"Score"> | boolean
    isSubmitted?: BoolFilter<"Score"> | boolean
    submittedAt?: DateTimeNullableFilter<"Score"> | Date | string | null
    createdAt?: DateTimeFilter<"Score"> | Date | string
    updatedAt?: DateTimeFilter<"Score"> | Date | string
  }

  export type SessionParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionParticipantWhereUniqueInput
    update: XOR<SessionParticipantUpdateWithoutUserInput, SessionParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<SessionParticipantCreateWithoutUserInput, SessionParticipantUncheckedCreateWithoutUserInput>
  }

  export type SessionParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionParticipantWhereUniqueInput
    data: XOR<SessionParticipantUpdateWithoutUserInput, SessionParticipantUncheckedUpdateWithoutUserInput>
  }

  export type SessionParticipantUpdateManyWithWhereWithoutUserInput = {
    where: SessionParticipantScalarWhereInput
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionParticipantScalarWhereInput = {
    AND?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
    OR?: SessionParticipantScalarWhereInput[]
    NOT?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
    id?: StringFilter<"SessionParticipant"> | string
    sessionId?: StringFilter<"SessionParticipant"> | string
    userId?: StringFilter<"SessionParticipant"> | string
    role?: EnumParticipantRoleFilter<"SessionParticipant"> | $Enums.ParticipantRole
    joinedAt?: DateTimeFilter<"SessionParticipant"> | Date | string
    leftAt?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    isActive?: BoolFilter<"SessionParticipant"> | boolean
    isCalibrated?: BoolFilter<"SessionParticipant"> | boolean
    calibratedAt?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
  }

  export type CuppingTemplateUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CuppingTemplateWhereUniqueInput
    update: XOR<CuppingTemplateUpdateWithoutCreatorInput, CuppingTemplateUncheckedUpdateWithoutCreatorInput>
    create: XOR<CuppingTemplateCreateWithoutCreatorInput, CuppingTemplateUncheckedCreateWithoutCreatorInput>
  }

  export type CuppingTemplateUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CuppingTemplateWhereUniqueInput
    data: XOR<CuppingTemplateUpdateWithoutCreatorInput, CuppingTemplateUncheckedUpdateWithoutCreatorInput>
  }

  export type CuppingTemplateUpdateManyWithWhereWithoutCreatorInput = {
    where: CuppingTemplateScalarWhereInput
    data: XOR<CuppingTemplateUpdateManyMutationInput, CuppingTemplateUncheckedUpdateManyWithoutCreatorInput>
  }

  export type FlavorDescriptorUpsertWithWhereUniqueWithoutCreatorInput = {
    where: FlavorDescriptorWhereUniqueInput
    update: XOR<FlavorDescriptorUpdateWithoutCreatorInput, FlavorDescriptorUncheckedUpdateWithoutCreatorInput>
    create: XOR<FlavorDescriptorCreateWithoutCreatorInput, FlavorDescriptorUncheckedCreateWithoutCreatorInput>
  }

  export type FlavorDescriptorUpdateWithWhereUniqueWithoutCreatorInput = {
    where: FlavorDescriptorWhereUniqueInput
    data: XOR<FlavorDescriptorUpdateWithoutCreatorInput, FlavorDescriptorUncheckedUpdateWithoutCreatorInput>
  }

  export type FlavorDescriptorUpdateManyWithWhereWithoutCreatorInput = {
    where: FlavorDescriptorScalarWhereInput
    data: XOR<FlavorDescriptorUpdateManyMutationInput, FlavorDescriptorUncheckedUpdateManyWithoutCreatorInput>
  }

  export type OrganizationCreateWithoutInvitationsInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutOrganizationInput
    samples?: SampleCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutInvitationsInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput
    samples?: SampleUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutInvitationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
  }

  export type OrganizationUpsertWithoutInvitationsInput = {
    update: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type OrganizationUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutSamplesInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutSamplesInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutSamplesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutSamplesInput, OrganizationUncheckedCreateWithoutSamplesInput>
  }

  export type SessionSampleCreateWithoutSampleInput = {
    id?: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutSamplesInput
    scores?: ScoreCreateNestedManyWithoutSessionSampleInput
  }

  export type SessionSampleUncheckedCreateWithoutSampleInput = {
    id?: string
    sessionId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionSampleInput
  }

  export type SessionSampleCreateOrConnectWithoutSampleInput = {
    where: SessionSampleWhereUniqueInput
    create: XOR<SessionSampleCreateWithoutSampleInput, SessionSampleUncheckedCreateWithoutSampleInput>
  }

  export type SessionSampleCreateManySampleInputEnvelope = {
    data: SessionSampleCreateManySampleInput | SessionSampleCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCreateWithoutSampleInput = {
    id?: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutScoresInput
    sessionSample: SessionSampleCreateNestedOneWithoutScoresInput
    user: UserCreateNestedOneWithoutScoresInput
    flavorDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutScoreInput
  }

  export type ScoreUncheckedCreateWithoutSampleInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutScoreInput
  }

  export type ScoreCreateOrConnectWithoutSampleInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutSampleInput, ScoreUncheckedCreateWithoutSampleInput>
  }

  export type ScoreCreateManySampleInputEnvelope = {
    data: ScoreCreateManySampleInput | ScoreCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type GreenBeanGradingCreateWithoutSampleInput = {
    id?: string
    gradingSystem?: $Enums.GradingSystem
    primaryDefects?: number
    secondaryDefects?: number
    fullDefectEquivalents?: number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: number | null
    uniformityPercentage?: number | null
    moistureContent?: number | null
    waterActivity?: number | null
    bulkDensity?: number | null
    colorScore?: number | null
    uniformityScore?: number | null
    grade?: string | null
    classification?: $Enums.GradeClassification | null
    qualityScore?: number | null
    gradedBy?: string | null
    gradedAt?: Date | string | null
    certifiedBy?: string | null
    certificationDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GreenBeanGradingUncheckedCreateWithoutSampleInput = {
    id?: string
    gradingSystem?: $Enums.GradingSystem
    primaryDefects?: number
    secondaryDefects?: number
    fullDefectEquivalents?: number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: number | null
    uniformityPercentage?: number | null
    moistureContent?: number | null
    waterActivity?: number | null
    bulkDensity?: number | null
    colorScore?: number | null
    uniformityScore?: number | null
    grade?: string | null
    classification?: $Enums.GradeClassification | null
    qualityScore?: number | null
    gradedBy?: string | null
    gradedAt?: Date | string | null
    certifiedBy?: string | null
    certificationDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GreenBeanGradingCreateOrConnectWithoutSampleInput = {
    where: GreenBeanGradingWhereUniqueInput
    create: XOR<GreenBeanGradingCreateWithoutSampleInput, GreenBeanGradingUncheckedCreateWithoutSampleInput>
  }

  export type OrganizationUpsertWithoutSamplesInput = {
    update: XOR<OrganizationUpdateWithoutSamplesInput, OrganizationUncheckedUpdateWithoutSamplesInput>
    create: XOR<OrganizationCreateWithoutSamplesInput, OrganizationUncheckedCreateWithoutSamplesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutSamplesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutSamplesInput, OrganizationUncheckedUpdateWithoutSamplesInput>
  }

  export type OrganizationUpdateWithoutSamplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutSamplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type SessionSampleUpsertWithWhereUniqueWithoutSampleInput = {
    where: SessionSampleWhereUniqueInput
    update: XOR<SessionSampleUpdateWithoutSampleInput, SessionSampleUncheckedUpdateWithoutSampleInput>
    create: XOR<SessionSampleCreateWithoutSampleInput, SessionSampleUncheckedCreateWithoutSampleInput>
  }

  export type SessionSampleUpdateWithWhereUniqueWithoutSampleInput = {
    where: SessionSampleWhereUniqueInput
    data: XOR<SessionSampleUpdateWithoutSampleInput, SessionSampleUncheckedUpdateWithoutSampleInput>
  }

  export type SessionSampleUpdateManyWithWhereWithoutSampleInput = {
    where: SessionSampleScalarWhereInput
    data: XOR<SessionSampleUpdateManyMutationInput, SessionSampleUncheckedUpdateManyWithoutSampleInput>
  }

  export type SessionSampleScalarWhereInput = {
    AND?: SessionSampleScalarWhereInput | SessionSampleScalarWhereInput[]
    OR?: SessionSampleScalarWhereInput[]
    NOT?: SessionSampleScalarWhereInput | SessionSampleScalarWhereInput[]
    id?: StringFilter<"SessionSample"> | string
    sessionId?: StringFilter<"SessionSample"> | string
    sampleId?: StringFilter<"SessionSample"> | string
    position?: IntFilter<"SessionSample"> | number
    isBlind?: BoolFilter<"SessionSample"> | boolean
    blindCode?: StringNullableFilter<"SessionSample"> | string | null
    grindSize?: StringNullableFilter<"SessionSample"> | string | null
    waterTemp?: FloatNullableFilter<"SessionSample"> | number | null
    brewRatio?: StringNullableFilter<"SessionSample"> | string | null
    steepTime?: IntNullableFilter<"SessionSample"> | number | null
    aiSummary?: StringNullableFilter<"SessionSample"> | string | null
    aiGeneratedAt?: DateTimeNullableFilter<"SessionSample"> | Date | string | null
    addedAt?: DateTimeFilter<"SessionSample"> | Date | string
  }

  export type ScoreUpsertWithWhereUniqueWithoutSampleInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutSampleInput, ScoreUncheckedUpdateWithoutSampleInput>
    create: XOR<ScoreCreateWithoutSampleInput, ScoreUncheckedCreateWithoutSampleInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutSampleInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutSampleInput, ScoreUncheckedUpdateWithoutSampleInput>
  }

  export type ScoreUpdateManyWithWhereWithoutSampleInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutSampleInput>
  }

  export type GreenBeanGradingUpsertWithoutSampleInput = {
    update: XOR<GreenBeanGradingUpdateWithoutSampleInput, GreenBeanGradingUncheckedUpdateWithoutSampleInput>
    create: XOR<GreenBeanGradingCreateWithoutSampleInput, GreenBeanGradingUncheckedCreateWithoutSampleInput>
    where?: GreenBeanGradingWhereInput
  }

  export type GreenBeanGradingUpdateToOneWithWhereWithoutSampleInput = {
    where?: GreenBeanGradingWhereInput
    data: XOR<GreenBeanGradingUpdateWithoutSampleInput, GreenBeanGradingUncheckedUpdateWithoutSampleInput>
  }

  export type GreenBeanGradingUpdateWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    gradingSystem?: EnumGradingSystemFieldUpdateOperationsInput | $Enums.GradingSystem
    primaryDefects?: IntFieldUpdateOperationsInput | number
    secondaryDefects?: IntFieldUpdateOperationsInput | number
    fullDefectEquivalents?: FloatFieldUpdateOperationsInput | number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformityPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    moistureContent?: NullableFloatFieldUpdateOperationsInput | number | null
    waterActivity?: NullableFloatFieldUpdateOperationsInput | number | null
    bulkDensity?: NullableFloatFieldUpdateOperationsInput | number | null
    colorScore?: NullableIntFieldUpdateOperationsInput | number | null
    uniformityScore?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableEnumGradeClassificationFieldUpdateOperationsInput | $Enums.GradeClassification | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedBy?: NullableStringFieldUpdateOperationsInput | string | null
    gradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GreenBeanGradingUncheckedUpdateWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    gradingSystem?: EnumGradingSystemFieldUpdateOperationsInput | $Enums.GradingSystem
    primaryDefects?: IntFieldUpdateOperationsInput | number
    secondaryDefects?: IntFieldUpdateOperationsInput | number
    fullDefectEquivalents?: FloatFieldUpdateOperationsInput | number
    defectBreakdown?: JsonNullValueInput | InputJsonValue
    screenSizeDistribution?: NullableJsonNullValueInput | InputJsonValue
    averageScreenSize?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformityPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    moistureContent?: NullableFloatFieldUpdateOperationsInput | number | null
    waterActivity?: NullableFloatFieldUpdateOperationsInput | number | null
    bulkDensity?: NullableFloatFieldUpdateOperationsInput | number | null
    colorScore?: NullableIntFieldUpdateOperationsInput | number | null
    uniformityScore?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableEnumGradeClassificationFieldUpdateOperationsInput | $Enums.GradeClassification | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedBy?: NullableStringFieldUpdateOperationsInput | string | null
    gradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    certificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateWithoutTemplatesInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutOrganizationInput
    samples?: SampleCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutTemplatesInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput
    samples?: SampleUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutTemplatesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
  }

  export type UserCreateWithoutCreatedTemplatesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutCreatorInput
    scores?: ScoreCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantCreateNestedManyWithoutUserInput
    createdFlavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedTemplatesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput
    scores?: ScoreUncheckedCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantUncheckedCreateNestedManyWithoutUserInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedTemplatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTemplatesInput, UserUncheckedCreateWithoutCreatedTemplatesInput>
  }

  export type CuppingSessionCreateWithoutTemplateInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCuppingSessionsInput
    creator: UserCreateNestedOneWithoutCuppingSessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
    samples?: SessionSampleCreateNestedManyWithoutSessionInput
    scores?: ScoreCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateWithoutTemplateInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
    samples?: SessionSampleUncheckedCreateNestedManyWithoutSessionInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionCreateOrConnectWithoutTemplateInput = {
    where: CuppingSessionWhereUniqueInput
    create: XOR<CuppingSessionCreateWithoutTemplateInput, CuppingSessionUncheckedCreateWithoutTemplateInput>
  }

  export type CuppingSessionCreateManyTemplateInputEnvelope = {
    data: CuppingSessionCreateManyTemplateInput | CuppingSessionCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutTemplatesInput = {
    update: XOR<OrganizationUpdateWithoutTemplatesInput, OrganizationUncheckedUpdateWithoutTemplatesInput>
    create: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutTemplatesInput, OrganizationUncheckedUpdateWithoutTemplatesInput>
  }

  export type OrganizationUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutCreatedTemplatesInput = {
    update: XOR<UserUpdateWithoutCreatedTemplatesInput, UserUncheckedUpdateWithoutCreatedTemplatesInput>
    create: XOR<UserCreateWithoutCreatedTemplatesInput, UserUncheckedCreateWithoutCreatedTemplatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTemplatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTemplatesInput, UserUncheckedUpdateWithoutCreatedTemplatesInput>
  }

  export type UserUpdateWithoutCreatedTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUpdateManyWithoutUserNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUncheckedUpdateManyWithoutUserNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CuppingSessionUpsertWithWhereUniqueWithoutTemplateInput = {
    where: CuppingSessionWhereUniqueInput
    update: XOR<CuppingSessionUpdateWithoutTemplateInput, CuppingSessionUncheckedUpdateWithoutTemplateInput>
    create: XOR<CuppingSessionCreateWithoutTemplateInput, CuppingSessionUncheckedCreateWithoutTemplateInput>
  }

  export type CuppingSessionUpdateWithWhereUniqueWithoutTemplateInput = {
    where: CuppingSessionWhereUniqueInput
    data: XOR<CuppingSessionUpdateWithoutTemplateInput, CuppingSessionUncheckedUpdateWithoutTemplateInput>
  }

  export type CuppingSessionUpdateManyWithWhereWithoutTemplateInput = {
    where: CuppingSessionScalarWhereInput
    data: XOR<CuppingSessionUpdateManyMutationInput, CuppingSessionUncheckedUpdateManyWithoutTemplateInput>
  }

  export type OrganizationCreateWithoutCuppingSessionsInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    samples?: SampleCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCuppingSessionsInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    samples?: SampleUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    flavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCuppingSessionsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCuppingSessionsInput, OrganizationUncheckedCreateWithoutCuppingSessionsInput>
  }

  export type UserCreateWithoutCuppingSessionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    scores?: ScoreCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCuppingSessionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantUncheckedCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCuppingSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCuppingSessionsInput, UserUncheckedCreateWithoutCuppingSessionsInput>
  }

  export type CuppingTemplateCreateWithoutCuppingSessionsInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutTemplatesInput
    creator: UserCreateNestedOneWithoutCreatedTemplatesInput
  }

  export type CuppingTemplateUncheckedCreateWithoutCuppingSessionsInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingTemplateCreateOrConnectWithoutCuppingSessionsInput = {
    where: CuppingTemplateWhereUniqueInput
    create: XOR<CuppingTemplateCreateWithoutCuppingSessionsInput, CuppingTemplateUncheckedCreateWithoutCuppingSessionsInput>
  }

  export type SessionParticipantCreateWithoutSessionInput = {
    id?: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSessionParticipantsInput
  }

  export type SessionParticipantUncheckedCreateWithoutSessionInput = {
    id?: string
    userId: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
  }

  export type SessionParticipantCreateOrConnectWithoutSessionInput = {
    where: SessionParticipantWhereUniqueInput
    create: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput>
  }

  export type SessionParticipantCreateManySessionInputEnvelope = {
    data: SessionParticipantCreateManySessionInput | SessionParticipantCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type SessionSampleCreateWithoutSessionInput = {
    id?: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    sample: SampleCreateNestedOneWithoutSessionSamplesInput
    scores?: ScoreCreateNestedManyWithoutSessionSampleInput
  }

  export type SessionSampleUncheckedCreateWithoutSessionInput = {
    id?: string
    sampleId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionSampleInput
  }

  export type SessionSampleCreateOrConnectWithoutSessionInput = {
    where: SessionSampleWhereUniqueInput
    create: XOR<SessionSampleCreateWithoutSessionInput, SessionSampleUncheckedCreateWithoutSessionInput>
  }

  export type SessionSampleCreateManySessionInputEnvelope = {
    data: SessionSampleCreateManySessionInput | SessionSampleCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCreateWithoutSessionInput = {
    id?: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionSample: SessionSampleCreateNestedOneWithoutScoresInput
    sample: SampleCreateNestedOneWithoutScoresInput
    user: UserCreateNestedOneWithoutScoresInput
    flavorDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutScoreInput
  }

  export type ScoreUncheckedCreateWithoutSessionInput = {
    id?: string
    sessionSampleId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutScoreInput
  }

  export type ScoreCreateOrConnectWithoutSessionInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutSessionInput, ScoreUncheckedCreateWithoutSessionInput>
  }

  export type ScoreCreateManySessionInputEnvelope = {
    data: ScoreCreateManySessionInput | ScoreCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutCuppingSessionsInput = {
    update: XOR<OrganizationUpdateWithoutCuppingSessionsInput, OrganizationUncheckedUpdateWithoutCuppingSessionsInput>
    create: XOR<OrganizationCreateWithoutCuppingSessionsInput, OrganizationUncheckedCreateWithoutCuppingSessionsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutCuppingSessionsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutCuppingSessionsInput, OrganizationUncheckedUpdateWithoutCuppingSessionsInput>
  }

  export type OrganizationUpdateWithoutCuppingSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCuppingSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    flavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutCuppingSessionsInput = {
    update: XOR<UserUpdateWithoutCuppingSessionsInput, UserUncheckedUpdateWithoutCuppingSessionsInput>
    create: XOR<UserCreateWithoutCuppingSessionsInput, UserUncheckedCreateWithoutCuppingSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCuppingSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCuppingSessionsInput, UserUncheckedUpdateWithoutCuppingSessionsInput>
  }

  export type UserUpdateWithoutCuppingSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    scores?: ScoreUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCuppingSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUncheckedUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CuppingTemplateUpsertWithoutCuppingSessionsInput = {
    update: XOR<CuppingTemplateUpdateWithoutCuppingSessionsInput, CuppingTemplateUncheckedUpdateWithoutCuppingSessionsInput>
    create: XOR<CuppingTemplateCreateWithoutCuppingSessionsInput, CuppingTemplateUncheckedCreateWithoutCuppingSessionsInput>
    where?: CuppingTemplateWhereInput
  }

  export type CuppingTemplateUpdateToOneWithWhereWithoutCuppingSessionsInput = {
    where?: CuppingTemplateWhereInput
    data: XOR<CuppingTemplateUpdateWithoutCuppingSessionsInput, CuppingTemplateUncheckedUpdateWithoutCuppingSessionsInput>
  }

  export type CuppingTemplateUpdateWithoutCuppingSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutTemplatesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedTemplatesNestedInput
  }

  export type CuppingTemplateUncheckedUpdateWithoutCuppingSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionParticipantWhereUniqueInput
    update: XOR<SessionParticipantUpdateWithoutSessionInput, SessionParticipantUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput>
  }

  export type SessionParticipantUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionParticipantWhereUniqueInput
    data: XOR<SessionParticipantUpdateWithoutSessionInput, SessionParticipantUncheckedUpdateWithoutSessionInput>
  }

  export type SessionParticipantUpdateManyWithWhereWithoutSessionInput = {
    where: SessionParticipantScalarWhereInput
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionSampleUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionSampleWhereUniqueInput
    update: XOR<SessionSampleUpdateWithoutSessionInput, SessionSampleUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionSampleCreateWithoutSessionInput, SessionSampleUncheckedCreateWithoutSessionInput>
  }

  export type SessionSampleUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionSampleWhereUniqueInput
    data: XOR<SessionSampleUpdateWithoutSessionInput, SessionSampleUncheckedUpdateWithoutSessionInput>
  }

  export type SessionSampleUpdateManyWithWhereWithoutSessionInput = {
    where: SessionSampleScalarWhereInput
    data: XOR<SessionSampleUpdateManyMutationInput, SessionSampleUncheckedUpdateManyWithoutSessionInput>
  }

  export type ScoreUpsertWithWhereUniqueWithoutSessionInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutSessionInput, ScoreUncheckedUpdateWithoutSessionInput>
    create: XOR<ScoreCreateWithoutSessionInput, ScoreUncheckedCreateWithoutSessionInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutSessionInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutSessionInput, ScoreUncheckedUpdateWithoutSessionInput>
  }

  export type ScoreUpdateManyWithWhereWithoutSessionInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutSessionInput>
  }

  export type CuppingSessionCreateWithoutParticipantsInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCuppingSessionsInput
    creator: UserCreateNestedOneWithoutCuppingSessionsInput
    template?: CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput
    samples?: SessionSampleCreateNestedManyWithoutSessionInput
    scores?: ScoreCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateWithoutParticipantsInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SessionSampleUncheckedCreateNestedManyWithoutSessionInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionCreateOrConnectWithoutParticipantsInput = {
    where: CuppingSessionWhereUniqueInput
    create: XOR<CuppingSessionCreateWithoutParticipantsInput, CuppingSessionUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutSessionParticipantsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutCreatorInput
    scores?: ScoreCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutSessionParticipantsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput
    scores?: ScoreUncheckedCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutSessionParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionParticipantsInput, UserUncheckedCreateWithoutSessionParticipantsInput>
  }

  export type CuppingSessionUpsertWithoutParticipantsInput = {
    update: XOR<CuppingSessionUpdateWithoutParticipantsInput, CuppingSessionUncheckedUpdateWithoutParticipantsInput>
    create: XOR<CuppingSessionCreateWithoutParticipantsInput, CuppingSessionUncheckedCreateWithoutParticipantsInput>
    where?: CuppingSessionWhereInput
  }

  export type CuppingSessionUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: CuppingSessionWhereInput
    data: XOR<CuppingSessionUpdateWithoutParticipantsInput, CuppingSessionUncheckedUpdateWithoutParticipantsInput>
  }

  export type CuppingSessionUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput
    creator?: UserUpdateOneRequiredWithoutCuppingSessionsNestedInput
    template?: CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput
    samples?: SessionSampleUpdateManyWithoutSessionNestedInput
    scores?: ScoreUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SessionSampleUncheckedUpdateManyWithoutSessionNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type UserUpsertWithoutSessionParticipantsInput = {
    update: XOR<UserUpdateWithoutSessionParticipantsInput, UserUncheckedUpdateWithoutSessionParticipantsInput>
    create: XOR<UserCreateWithoutSessionParticipantsInput, UserUncheckedCreateWithoutSessionParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionParticipantsInput, UserUncheckedUpdateWithoutSessionParticipantsInput>
  }

  export type UserUpdateWithoutSessionParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CuppingSessionCreateWithoutSamplesInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCuppingSessionsInput
    creator: UserCreateNestedOneWithoutCuppingSessionsInput
    template?: CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
    scores?: ScoreCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateWithoutSamplesInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionCreateOrConnectWithoutSamplesInput = {
    where: CuppingSessionWhereUniqueInput
    create: XOR<CuppingSessionCreateWithoutSamplesInput, CuppingSessionUncheckedCreateWithoutSamplesInput>
  }

  export type SampleCreateWithoutSessionSamplesInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutSamplesInput
    scores?: ScoreCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutSessionSamplesInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    scores?: ScoreUncheckedCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutSessionSamplesInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutSessionSamplesInput, SampleUncheckedCreateWithoutSessionSamplesInput>
  }

  export type ScoreCreateWithoutSessionSampleInput = {
    id?: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutScoresInput
    sample: SampleCreateNestedOneWithoutScoresInput
    user: UserCreateNestedOneWithoutScoresInput
    flavorDescriptors?: ScoreFlavorDescriptorCreateNestedManyWithoutScoreInput
  }

  export type ScoreUncheckedCreateWithoutSessionSampleInput = {
    id?: string
    sessionId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedCreateNestedManyWithoutScoreInput
  }

  export type ScoreCreateOrConnectWithoutSessionSampleInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutSessionSampleInput, ScoreUncheckedCreateWithoutSessionSampleInput>
  }

  export type ScoreCreateManySessionSampleInputEnvelope = {
    data: ScoreCreateManySessionSampleInput | ScoreCreateManySessionSampleInput[]
    skipDuplicates?: boolean
  }

  export type CuppingSessionUpsertWithoutSamplesInput = {
    update: XOR<CuppingSessionUpdateWithoutSamplesInput, CuppingSessionUncheckedUpdateWithoutSamplesInput>
    create: XOR<CuppingSessionCreateWithoutSamplesInput, CuppingSessionUncheckedCreateWithoutSamplesInput>
    where?: CuppingSessionWhereInput
  }

  export type CuppingSessionUpdateToOneWithWhereWithoutSamplesInput = {
    where?: CuppingSessionWhereInput
    data: XOR<CuppingSessionUpdateWithoutSamplesInput, CuppingSessionUncheckedUpdateWithoutSamplesInput>
  }

  export type CuppingSessionUpdateWithoutSamplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput
    creator?: UserUpdateOneRequiredWithoutCuppingSessionsNestedInput
    template?: CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
    scores?: ScoreUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateWithoutSamplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SampleUpsertWithoutSessionSamplesInput = {
    update: XOR<SampleUpdateWithoutSessionSamplesInput, SampleUncheckedUpdateWithoutSessionSamplesInput>
    create: XOR<SampleCreateWithoutSessionSamplesInput, SampleUncheckedCreateWithoutSessionSamplesInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutSessionSamplesInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutSessionSamplesInput, SampleUncheckedUpdateWithoutSessionSamplesInput>
  }

  export type SampleUpdateWithoutSessionSamplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutSamplesNestedInput
    scores?: ScoreUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutSessionSamplesInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type ScoreUpsertWithWhereUniqueWithoutSessionSampleInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutSessionSampleInput, ScoreUncheckedUpdateWithoutSessionSampleInput>
    create: XOR<ScoreCreateWithoutSessionSampleInput, ScoreUncheckedCreateWithoutSessionSampleInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutSessionSampleInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutSessionSampleInput, ScoreUncheckedUpdateWithoutSessionSampleInput>
  }

  export type ScoreUpdateManyWithWhereWithoutSessionSampleInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutSessionSampleInput>
  }

  export type CuppingSessionCreateWithoutScoresInput = {
    id?: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutCuppingSessionsInput
    creator: UserCreateNestedOneWithoutCuppingSessionsInput
    template?: CuppingTemplateCreateNestedOneWithoutCuppingSessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
    samples?: SessionSampleCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionUncheckedCreateWithoutScoresInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
    samples?: SessionSampleUncheckedCreateNestedManyWithoutSessionInput
  }

  export type CuppingSessionCreateOrConnectWithoutScoresInput = {
    where: CuppingSessionWhereUniqueInput
    create: XOR<CuppingSessionCreateWithoutScoresInput, CuppingSessionUncheckedCreateWithoutScoresInput>
  }

  export type SessionSampleCreateWithoutScoresInput = {
    id?: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutSamplesInput
    sample: SampleCreateNestedOneWithoutSessionSamplesInput
  }

  export type SessionSampleUncheckedCreateWithoutScoresInput = {
    id?: string
    sessionId: string
    sampleId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
  }

  export type SessionSampleCreateOrConnectWithoutScoresInput = {
    where: SessionSampleWhereUniqueInput
    create: XOR<SessionSampleCreateWithoutScoresInput, SessionSampleUncheckedCreateWithoutScoresInput>
  }

  export type SampleCreateWithoutScoresInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutSamplesInput
    sessionSamples?: SessionSampleCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutScoresInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionSamples?: SessionSampleUncheckedCreateNestedManyWithoutSampleInput
    greenBeanGrading?: GreenBeanGradingUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutScoresInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutScoresInput, SampleUncheckedCreateWithoutScoresInput>
  }

  export type UserCreateWithoutScoresInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutCreatorInput
    sessionParticipants?: SessionParticipantCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutScoresInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput
    sessionParticipants?: SessionParticipantUncheckedCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutScoresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
  }

  export type ScoreFlavorDescriptorCreateWithoutScoreInput = {
    id?: string
    intensity?: number
    createdAt?: Date | string
    flavorDescriptor: FlavorDescriptorCreateNestedOneWithoutScoreDescriptorsInput
  }

  export type ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput = {
    id?: string
    flavorDescriptorId: string
    intensity?: number
    createdAt?: Date | string
  }

  export type ScoreFlavorDescriptorCreateOrConnectWithoutScoreInput = {
    where: ScoreFlavorDescriptorWhereUniqueInput
    create: XOR<ScoreFlavorDescriptorCreateWithoutScoreInput, ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput>
  }

  export type ScoreFlavorDescriptorCreateManyScoreInputEnvelope = {
    data: ScoreFlavorDescriptorCreateManyScoreInput | ScoreFlavorDescriptorCreateManyScoreInput[]
    skipDuplicates?: boolean
  }

  export type CuppingSessionUpsertWithoutScoresInput = {
    update: XOR<CuppingSessionUpdateWithoutScoresInput, CuppingSessionUncheckedUpdateWithoutScoresInput>
    create: XOR<CuppingSessionCreateWithoutScoresInput, CuppingSessionUncheckedCreateWithoutScoresInput>
    where?: CuppingSessionWhereInput
  }

  export type CuppingSessionUpdateToOneWithWhereWithoutScoresInput = {
    where?: CuppingSessionWhereInput
    data: XOR<CuppingSessionUpdateWithoutScoresInput, CuppingSessionUncheckedUpdateWithoutScoresInput>
  }

  export type CuppingSessionUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput
    creator?: UserUpdateOneRequiredWithoutCuppingSessionsNestedInput
    template?: CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionSampleUpsertWithoutScoresInput = {
    update: XOR<SessionSampleUpdateWithoutScoresInput, SessionSampleUncheckedUpdateWithoutScoresInput>
    create: XOR<SessionSampleCreateWithoutScoresInput, SessionSampleUncheckedCreateWithoutScoresInput>
    where?: SessionSampleWhereInput
  }

  export type SessionSampleUpdateToOneWithWhereWithoutScoresInput = {
    where?: SessionSampleWhereInput
    data: XOR<SessionSampleUpdateWithoutScoresInput, SessionSampleUncheckedUpdateWithoutScoresInput>
  }

  export type SessionSampleUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutSamplesNestedInput
    sample?: SampleUpdateOneRequiredWithoutSessionSamplesNestedInput
  }

  export type SessionSampleUncheckedUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleUpsertWithoutScoresInput = {
    update: XOR<SampleUpdateWithoutScoresInput, SampleUncheckedUpdateWithoutScoresInput>
    create: XOR<SampleCreateWithoutScoresInput, SampleUncheckedCreateWithoutScoresInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutScoresInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutScoresInput, SampleUncheckedUpdateWithoutScoresInput>
  }

  export type SampleUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutSamplesNestedInput
    sessionSamples?: SessionSampleUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionSamples?: SessionSampleUncheckedUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type UserUpsertWithoutScoresInput = {
    update: XOR<UserUpdateWithoutScoresInput, UserUncheckedUpdateWithoutScoresInput>
    create: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScoresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScoresInput, UserUncheckedUpdateWithoutScoresInput>
  }

  export type UserUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutCreatorNestedInput
    sessionParticipants?: SessionParticipantUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    sessionParticipants?: SessionParticipantUncheckedUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutScoreInput = {
    where: ScoreFlavorDescriptorWhereUniqueInput
    update: XOR<ScoreFlavorDescriptorUpdateWithoutScoreInput, ScoreFlavorDescriptorUncheckedUpdateWithoutScoreInput>
    create: XOR<ScoreFlavorDescriptorCreateWithoutScoreInput, ScoreFlavorDescriptorUncheckedCreateWithoutScoreInput>
  }

  export type ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutScoreInput = {
    where: ScoreFlavorDescriptorWhereUniqueInput
    data: XOR<ScoreFlavorDescriptorUpdateWithoutScoreInput, ScoreFlavorDescriptorUncheckedUpdateWithoutScoreInput>
  }

  export type ScoreFlavorDescriptorUpdateManyWithWhereWithoutScoreInput = {
    where: ScoreFlavorDescriptorScalarWhereInput
    data: XOR<ScoreFlavorDescriptorUpdateManyMutationInput, ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreInput>
  }

  export type ScoreFlavorDescriptorScalarWhereInput = {
    AND?: ScoreFlavorDescriptorScalarWhereInput | ScoreFlavorDescriptorScalarWhereInput[]
    OR?: ScoreFlavorDescriptorScalarWhereInput[]
    NOT?: ScoreFlavorDescriptorScalarWhereInput | ScoreFlavorDescriptorScalarWhereInput[]
    id?: StringFilter<"ScoreFlavorDescriptor"> | string
    scoreId?: StringFilter<"ScoreFlavorDescriptor"> | string
    flavorDescriptorId?: StringFilter<"ScoreFlavorDescriptor"> | string
    intensity?: IntFilter<"ScoreFlavorDescriptor"> | number
    createdAt?: DateTimeFilter<"ScoreFlavorDescriptor"> | Date | string
  }

  export type OrganizationCreateWithoutFlavorDescriptorsInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutOrganizationInput
    samples?: SampleCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutFlavorDescriptorsInput = {
    id?: string
    name: string
    slug: string
    domain?: string | null
    subdomain: string
    description?: string | null
    logo?: string | null
    website?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionPlan?: $Enums.SubscriptionPlan
    trialEndsAt?: Date | string | null
    subscriptionEndsAt?: Date | string | null
    stripeCustomerId?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutOrganizationInput
    samples?: SampleUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: CuppingTemplateUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutFlavorDescriptorsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutFlavorDescriptorsInput, OrganizationUncheckedCreateWithoutFlavorDescriptorsInput>
  }

  export type UserCreateWithoutCreatedFlavorDescriptorsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    cuppingSessions?: CuppingSessionCreateNestedManyWithoutCreatorInput
    scores?: ScoreCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedFlavorDescriptorsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    organizationId: string
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cuppingSessions?: CuppingSessionUncheckedCreateNestedManyWithoutCreatorInput
    scores?: ScoreUncheckedCreateNestedManyWithoutUserInput
    sessionParticipants?: SessionParticipantUncheckedCreateNestedManyWithoutUserInput
    createdTemplates?: CuppingTemplateUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedFlavorDescriptorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedFlavorDescriptorsInput, UserUncheckedCreateWithoutCreatedFlavorDescriptorsInput>
  }

  export type ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput = {
    id?: string
    intensity?: number
    createdAt?: Date | string
    score: ScoreCreateNestedOneWithoutFlavorDescriptorsInput
  }

  export type ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput = {
    id?: string
    scoreId: string
    intensity?: number
    createdAt?: Date | string
  }

  export type ScoreFlavorDescriptorCreateOrConnectWithoutFlavorDescriptorInput = {
    where: ScoreFlavorDescriptorWhereUniqueInput
    create: XOR<ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput>
  }

  export type ScoreFlavorDescriptorCreateManyFlavorDescriptorInputEnvelope = {
    data: ScoreFlavorDescriptorCreateManyFlavorDescriptorInput | ScoreFlavorDescriptorCreateManyFlavorDescriptorInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutFlavorDescriptorsInput = {
    update: XOR<OrganizationUpdateWithoutFlavorDescriptorsInput, OrganizationUncheckedUpdateWithoutFlavorDescriptorsInput>
    create: XOR<OrganizationCreateWithoutFlavorDescriptorsInput, OrganizationUncheckedCreateWithoutFlavorDescriptorsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutFlavorDescriptorsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutFlavorDescriptorsInput, OrganizationUncheckedUpdateWithoutFlavorDescriptorsInput>
  }

  export type OrganizationUpdateWithoutFlavorDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutFlavorDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutOrganizationNestedInput
    samples?: SampleUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: CuppingTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutCreatedFlavorDescriptorsInput = {
    update: XOR<UserUpdateWithoutCreatedFlavorDescriptorsInput, UserUncheckedUpdateWithoutCreatedFlavorDescriptorsInput>
    create: XOR<UserCreateWithoutCreatedFlavorDescriptorsInput, UserUncheckedCreateWithoutCreatedFlavorDescriptorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedFlavorDescriptorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedFlavorDescriptorsInput, UserUncheckedUpdateWithoutCreatedFlavorDescriptorsInput>
  }

  export type UserUpdateWithoutCreatedFlavorDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedFlavorDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUncheckedUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ScoreFlavorDescriptorUpsertWithWhereUniqueWithoutFlavorDescriptorInput = {
    where: ScoreFlavorDescriptorWhereUniqueInput
    update: XOR<ScoreFlavorDescriptorUpdateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedUpdateWithoutFlavorDescriptorInput>
    create: XOR<ScoreFlavorDescriptorCreateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedCreateWithoutFlavorDescriptorInput>
  }

  export type ScoreFlavorDescriptorUpdateWithWhereUniqueWithoutFlavorDescriptorInput = {
    where: ScoreFlavorDescriptorWhereUniqueInput
    data: XOR<ScoreFlavorDescriptorUpdateWithoutFlavorDescriptorInput, ScoreFlavorDescriptorUncheckedUpdateWithoutFlavorDescriptorInput>
  }

  export type ScoreFlavorDescriptorUpdateManyWithWhereWithoutFlavorDescriptorInput = {
    where: ScoreFlavorDescriptorScalarWhereInput
    data: XOR<ScoreFlavorDescriptorUpdateManyMutationInput, ScoreFlavorDescriptorUncheckedUpdateManyWithoutFlavorDescriptorInput>
  }

  export type ScoreCreateWithoutFlavorDescriptorsInput = {
    id?: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    session: CuppingSessionCreateNestedOneWithoutScoresInput
    sessionSample: SessionSampleCreateNestedOneWithoutScoresInput
    sample: SampleCreateNestedOneWithoutScoresInput
    user: UserCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateWithoutFlavorDescriptorsInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreCreateOrConnectWithoutFlavorDescriptorsInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutFlavorDescriptorsInput, ScoreUncheckedCreateWithoutFlavorDescriptorsInput>
  }

  export type FlavorDescriptorCreateWithoutScoreDescriptorsInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    organization?: OrganizationCreateNestedOneWithoutFlavorDescriptorsInput
    creator?: UserCreateNestedOneWithoutCreatedFlavorDescriptorsInput
  }

  export type FlavorDescriptorUncheckedCreateWithoutScoreDescriptorsInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    organizationId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FlavorDescriptorCreateOrConnectWithoutScoreDescriptorsInput = {
    where: FlavorDescriptorWhereUniqueInput
    create: XOR<FlavorDescriptorCreateWithoutScoreDescriptorsInput, FlavorDescriptorUncheckedCreateWithoutScoreDescriptorsInput>
  }

  export type ScoreUpsertWithoutFlavorDescriptorsInput = {
    update: XOR<ScoreUpdateWithoutFlavorDescriptorsInput, ScoreUncheckedUpdateWithoutFlavorDescriptorsInput>
    create: XOR<ScoreCreateWithoutFlavorDescriptorsInput, ScoreUncheckedCreateWithoutFlavorDescriptorsInput>
    where?: ScoreWhereInput
  }

  export type ScoreUpdateToOneWithWhereWithoutFlavorDescriptorsInput = {
    where?: ScoreWhereInput
    data: XOR<ScoreUpdateWithoutFlavorDescriptorsInput, ScoreUncheckedUpdateWithoutFlavorDescriptorsInput>
  }

  export type ScoreUpdateWithoutFlavorDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutScoresNestedInput
    sessionSample?: SessionSampleUpdateOneRequiredWithoutScoresNestedInput
    sample?: SampleUpdateOneRequiredWithoutScoresNestedInput
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateWithoutFlavorDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlavorDescriptorUpsertWithoutScoreDescriptorsInput = {
    update: XOR<FlavorDescriptorUpdateWithoutScoreDescriptorsInput, FlavorDescriptorUncheckedUpdateWithoutScoreDescriptorsInput>
    create: XOR<FlavorDescriptorCreateWithoutScoreDescriptorsInput, FlavorDescriptorUncheckedCreateWithoutScoreDescriptorsInput>
    where?: FlavorDescriptorWhereInput
  }

  export type FlavorDescriptorUpdateToOneWithWhereWithoutScoreDescriptorsInput = {
    where?: FlavorDescriptorWhereInput
    data: XOR<FlavorDescriptorUpdateWithoutScoreDescriptorsInput, FlavorDescriptorUncheckedUpdateWithoutScoreDescriptorsInput>
  }

  export type FlavorDescriptorUpdateWithoutScoreDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutFlavorDescriptorsNestedInput
    creator?: UserUpdateOneWithoutCreatedFlavorDescriptorsNestedInput
  }

  export type FlavorDescriptorUncheckedUpdateWithoutScoreDescriptorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleCreateWithoutGreenBeanGradingInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutSamplesInput
    sessionSamples?: SessionSampleCreateNestedManyWithoutSampleInput
    scores?: ScoreCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutGreenBeanGradingInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionSamples?: SessionSampleUncheckedCreateNestedManyWithoutSampleInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutGreenBeanGradingInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutGreenBeanGradingInput, SampleUncheckedCreateWithoutGreenBeanGradingInput>
  }

  export type SampleUpsertWithoutGreenBeanGradingInput = {
    update: XOR<SampleUpdateWithoutGreenBeanGradingInput, SampleUncheckedUpdateWithoutGreenBeanGradingInput>
    create: XOR<SampleCreateWithoutGreenBeanGradingInput, SampleUncheckedCreateWithoutGreenBeanGradingInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutGreenBeanGradingInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutGreenBeanGradingInput, SampleUncheckedUpdateWithoutGreenBeanGradingInput>
  }

  export type SampleUpdateWithoutGreenBeanGradingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutSamplesNestedInput
    sessionSamples?: SessionSampleUpdateManyWithoutSampleNestedInput
    scores?: ScoreUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutGreenBeanGradingInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionSamples?: SessionSampleUncheckedUpdateManyWithoutSampleNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    bio?: string | null
    role?: $Enums.UserRole
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingSessionCreateManyOrganizationInput = {
    id?: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleCreateManyOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    code?: string | null
    origin: string
    region?: string | null
    farm?: string | null
    producer?: string | null
    variety?: string | null
    altitude?: number | null
    processingMethod?: $Enums.ProcessingMethod | null
    harvestDate?: Date | string | null
    roaster?: string | null
    roastDate?: Date | string | null
    roastLevel?: $Enums.RoastLevel | null
    moisture?: number | null
    density?: number | null
    screenSize?: string | null
    notes?: string | null
    imageUrl?: string | null
    tags?: SampleCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingTemplateCreateManyOrganizationInput = {
    id?: string
    createdBy: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationCreateManyOrganizationInput = {
    id?: string
    email: string
    role?: $Enums.UserRole
    token: string
    status?: $Enums.InvitationStatus
    expiresAt: Date | string
    invitedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FlavorDescriptorCreateManyOrganizationInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutCreatorNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutUserNestedInput
    sessionParticipants?: SessionParticipantUncheckedUpdateManyWithoutUserNestedInput
    createdTemplates?: CuppingTemplateUncheckedUpdateManyWithoutCreatorNestedInput
    createdFlavorDescriptors?: FlavorDescriptorUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingSessionUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCuppingSessionsNestedInput
    template?: CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUpdateManyWithoutSessionNestedInput
    scores?: ScoreUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUncheckedUpdateManyWithoutSessionNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionSamples?: SessionSampleUpdateManyWithoutSampleNestedInput
    scores?: ScoreUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionSamples?: SessionSampleUncheckedUpdateManyWithoutSampleNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSampleNestedInput
    greenBeanGrading?: GreenBeanGradingUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    farm?: NullableStringFieldUpdateOperationsInput | string | null
    producer?: NullableStringFieldUpdateOperationsInput | string | null
    variety?: NullableStringFieldUpdateOperationsInput | string | null
    altitude?: NullableIntFieldUpdateOperationsInput | number | null
    processingMethod?: NullableEnumProcessingMethodFieldUpdateOperationsInput | $Enums.ProcessingMethod | null
    harvestDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roaster?: NullableStringFieldUpdateOperationsInput | string | null
    roastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roastLevel?: NullableEnumRoastLevelFieldUpdateOperationsInput | $Enums.RoastLevel | null
    moisture?: NullableFloatFieldUpdateOperationsInput | number | null
    density?: NullableFloatFieldUpdateOperationsInput | number | null
    screenSize?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: SampleUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingTemplateUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedTemplatesNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutTemplateNestedInput
  }

  export type CuppingTemplateUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type CuppingTemplateUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlavorDescriptorUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedFlavorDescriptorsNestedInput
    scoreDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutFlavorDescriptorNestedInput
  }

  export type FlavorDescriptorUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutFlavorDescriptorNestedInput
  }

  export type FlavorDescriptorUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingSessionCreateManyCreatorInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    location?: string | null
    templateId?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreCreateManyUserInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    sampleId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionParticipantCreateManyUserInput = {
    id?: string
    sessionId: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
  }

  export type CuppingTemplateCreateManyCreatorInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    isDefault?: boolean
    isPublic?: boolean
    scoringSystem?: $Enums.ScoringSystem
    maxScore?: number
    categories: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FlavorDescriptorCreateManyCreatorInput = {
    id?: string
    name: string
    category: $Enums.FlavorCategory
    description?: string | null
    isDefault?: boolean
    organizationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingSessionUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput
    template?: CuppingTemplateUpdateOneWithoutCuppingSessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUpdateManyWithoutSessionNestedInput
    scores?: ScoreUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUncheckedUpdateManyWithoutSessionNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutScoresNestedInput
    sessionSample?: SessionSampleUpdateOneRequiredWithoutScoresNestedInput
    sample?: SampleUpdateOneRequiredWithoutScoresNestedInput
    flavorDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    session?: CuppingSessionUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type SessionParticipantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CuppingTemplateUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutTemplatesNestedInput
    cuppingSessions?: CuppingSessionUpdateManyWithoutTemplateNestedInput
  }

  export type CuppingTemplateUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cuppingSessions?: CuppingSessionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type CuppingTemplateUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    maxScore?: IntFieldUpdateOperationsInput | number
    categories?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlavorDescriptorUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutFlavorDescriptorsNestedInput
    scoreDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutFlavorDescriptorNestedInput
  }

  export type FlavorDescriptorUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutFlavorDescriptorNestedInput
  }

  export type FlavorDescriptorUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: EnumFlavorCategoryFieldUpdateOperationsInput | $Enums.FlavorCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionSampleCreateManySampleInput = {
    id?: string
    sessionId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
  }

  export type ScoreCreateManySampleInput = {
    id?: string
    sessionId: string
    sessionSampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionSampleUpdateWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutSamplesNestedInput
    scores?: ScoreUpdateManyWithoutSessionSampleNestedInput
  }

  export type SessionSampleUncheckedUpdateWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutSessionSampleNestedInput
  }

  export type SessionSampleUncheckedUpdateManyWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUpdateWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutScoresNestedInput
    sessionSample?: SessionSampleUpdateOneRequiredWithoutScoresNestedInput
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
    flavorDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateManyWithoutSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuppingSessionCreateManyTemplateInput = {
    id?: string
    organizationId: string
    createdBy: string
    name: string
    description?: string | null
    location?: string | null
    blindTasting?: boolean
    allowComments?: boolean
    requireCalibration?: boolean
    status?: $Enums.SessionStatus
    scheduledAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    tags?: CuppingSessionCreatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuppingSessionUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCuppingSessionsNestedInput
    creator?: UserUpdateOneRequiredWithoutCuppingSessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUpdateManyWithoutSessionNestedInput
    scores?: ScoreUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
    samples?: SessionSampleUncheckedUpdateManyWithoutSessionNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type CuppingSessionUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    blindTasting?: BoolFieldUpdateOperationsInput | boolean
    allowComments?: BoolFieldUpdateOperationsInput | boolean
    requireCalibration?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: CuppingSessionUpdatetagsInput | string[]
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantCreateManySessionInput = {
    id?: string
    userId: string
    role?: $Enums.ParticipantRole
    joinedAt?: Date | string
    leftAt?: Date | string | null
    isActive?: boolean
    isCalibrated?: boolean
    calibratedAt?: Date | string | null
  }

  export type SessionSampleCreateManySessionInput = {
    id?: string
    sampleId: string
    position: number
    isBlind?: boolean
    blindCode?: string | null
    grindSize?: string | null
    waterTemp?: number | null
    brewRatio?: string | null
    steepTime?: number | null
    aiSummary?: string | null
    aiGeneratedAt?: Date | string | null
    addedAt?: Date | string
  }

  export type ScoreCreateManySessionInput = {
    id?: string
    sessionSampleId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionParticipantUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionParticipantsNestedInput
  }

  export type SessionParticipantUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leftAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCalibrated?: BoolFieldUpdateOperationsInput | boolean
    calibratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionSampleUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSessionSamplesNestedInput
    scores?: ScoreUpdateManyWithoutSessionSampleNestedInput
  }

  export type SessionSampleUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: ScoreUncheckedUpdateManyWithoutSessionSampleNestedInput
  }

  export type SessionSampleUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    isBlind?: BoolFieldUpdateOperationsInput | boolean
    blindCode?: NullableStringFieldUpdateOperationsInput | string | null
    grindSize?: NullableStringFieldUpdateOperationsInput | string | null
    waterTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    brewRatio?: NullableStringFieldUpdateOperationsInput | string | null
    steepTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionSample?: SessionSampleUpdateOneRequiredWithoutScoresNestedInput
    sample?: SampleUpdateOneRequiredWithoutScoresNestedInput
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
    flavorDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionSampleId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreCreateManySessionSampleInput = {
    id?: string
    sessionId: string
    sampleId: string
    userId: string
    totalScore: number
    maxScore?: number
    scores: JsonNullValueInput | InputJsonValue
    aroma?: number | null
    flavor?: number | null
    aftertaste?: number | null
    acidity?: number | null
    body?: number | null
    balance?: number | null
    sweetness?: number | null
    cleanliness?: number | null
    uniformity?: number | null
    overall?: number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: string | null
    privateNotes?: string | null
    voiceNotes?: string | null
    voiceFileUrl?: string | null
    isComplete?: boolean
    isSubmitted?: boolean
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreUpdateWithoutSessionSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: CuppingSessionUpdateOneRequiredWithoutScoresNestedInput
    sample?: SampleUpdateOneRequiredWithoutScoresNestedInput
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
    flavorDescriptors?: ScoreFlavorDescriptorUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateWithoutSessionSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flavorDescriptors?: ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreNestedInput
  }

  export type ScoreUncheckedUpdateManyWithoutSessionSampleInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sampleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalScore?: FloatFieldUpdateOperationsInput | number
    maxScore?: FloatFieldUpdateOperationsInput | number
    scores?: JsonNullValueInput | InputJsonValue
    aroma?: NullableFloatFieldUpdateOperationsInput | number | null
    flavor?: NullableFloatFieldUpdateOperationsInput | number | null
    aftertaste?: NullableFloatFieldUpdateOperationsInput | number | null
    acidity?: NullableFloatFieldUpdateOperationsInput | number | null
    body?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    sweetness?: NullableFloatFieldUpdateOperationsInput | number | null
    cleanliness?: NullableFloatFieldUpdateOperationsInput | number | null
    uniformity?: NullableFloatFieldUpdateOperationsInput | number | null
    overall?: NullableFloatFieldUpdateOperationsInput | number | null
    defects?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    privateNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceNotes?: NullableStringFieldUpdateOperationsInput | string | null
    voiceFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorCreateManyScoreInput = {
    id?: string
    flavorDescriptorId: string
    intensity?: number
    createdAt?: Date | string
  }

  export type ScoreFlavorDescriptorUpdateWithoutScoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flavorDescriptor?: FlavorDescriptorUpdateOneRequiredWithoutScoreDescriptorsNestedInput
  }

  export type ScoreFlavorDescriptorUncheckedUpdateWithoutScoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    flavorDescriptorId?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorUncheckedUpdateManyWithoutScoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    flavorDescriptorId?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorCreateManyFlavorDescriptorInput = {
    id?: string
    scoreId: string
    intensity?: number
    createdAt?: Date | string
  }

  export type ScoreFlavorDescriptorUpdateWithoutFlavorDescriptorInput = {
    id?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: ScoreUpdateOneRequiredWithoutFlavorDescriptorsNestedInput
  }

  export type ScoreFlavorDescriptorUncheckedUpdateWithoutFlavorDescriptorInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreId?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreFlavorDescriptorUncheckedUpdateManyWithoutFlavorDescriptorInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreId?: StringFieldUpdateOperationsInput | string
    intensity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}